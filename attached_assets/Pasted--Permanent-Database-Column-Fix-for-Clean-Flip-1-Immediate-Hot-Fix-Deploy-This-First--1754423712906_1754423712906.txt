# Permanent Database Column Fix for Clean & Flip

## 1. Immediate Hot Fix (Deploy This First)

### Update `/server/storage/database.ts`

Replace the `getFeaturedProducts` method with this safe version:

```typescript
async getFeaturedProducts(): Promise<any[]> {
  try {
    // Safe query that only selects columns that exist
    const products = await db
      .select({
        id: productsTable.id,
        name: productsTable.name,
        description: productsTable.description,
        price: productsTable.price,
        images: productsTable.images,
        category: productsTable.category,
        // Remove subcategory - it doesn't exist
        // subcategory: productsTable.subcategory,
        featured: productsTable.featured,
        stock: productsTable.stock,
        createdAt: productsTable.createdAt
      })
      .from(productsTable)
      .where(eq(productsTable.featured, true))
      .limit(8);
    
    return products;
  } catch (error) {
    console.error('[ERROR] Error fetching featured products', error);
    // Return empty array instead of crashing
    return [];
  }
}
```

## 2. Create Column Safety Utility

Create `/server/utils/safe-query.ts`:

```typescript
import { sql } from 'drizzle-orm';
import { db } from '../db';

// Cache for table columns to avoid repeated queries
const tableColumnsCache = new Map<string, Set<string>>();

/**
 * Get actual columns that exist in a database table
 */
export async function getTableColumns(tableName: string): Promise<Set<string>> {
  // Check cache first
  if (tableColumnsCache.has(tableName)) {
    return tableColumnsCache.get(tableName)!;
  }

  try {
    const result = await db.execute(sql`
      SELECT column_name 
      FROM information_schema.columns 
      WHERE table_name = ${tableName}
      AND table_schema = 'public'
    `);
    
    const columns = new Set(result.rows.map(row => row.column_name));
    tableColumnsCache.set(tableName, columns);
    
    return columns;
  } catch (error) {
    console.error(`Failed to get columns for table ${tableName}:`, error);
    return new Set();
  }
}

/**
 * Build a safe select object that only includes existing columns
 */
export async function buildSafeSelect(
  tableName: string,
  desiredColumns: Record<string, any>
): Promise<Record<string, any>> {
  const existingColumns = await getTableColumns(tableName);
  const safeSelect: Record<string, any> = {};
  
  for (const [alias, column] of Object.entries(desiredColumns)) {
    // Extract column name from the column object
    const columnName = column.name || alias;
    
    if (existingColumns.has(columnName)) {
      safeSelect[alias] = column;
    } else {
      console.warn(`Column '${columnName}' does not exist in table '${tableName}', skipping...`);
    }
  }
  
  return safeSelect;
}

/**
 * Clear the columns cache (useful after migrations)
 */
export function clearColumnsCache(tableName?: string) {
  if (tableName) {
    tableColumnsCache.delete(tableName);
  } else {
    tableColumnsCache.clear();
  }
}
```

## 3. Update All Product Queries

### Update `/server/storage/database.ts` with Safe Queries:

```typescript
import { buildSafeSelect } from '../utils/safe-query';

class DatabaseStorage {
  // ... other methods ...

  async getFeaturedProducts(): Promise<any[]> {
    try {
      // Build safe selection that only includes existing columns
      const safeSelect = await buildSafeSelect('products', {
        id: productsTable.id,
        name: productsTable.name,
        description: productsTable.description,
        price: productsTable.price,
        images: productsTable.images,
        category: productsTable.category,
        subcategory: productsTable.subcategory, // Will be excluded if doesn't exist
        featured: productsTable.featured,
        stock: productsTable.stock,
        brand: productsTable.brand,
        condition: productsTable.condition,
        size: productsTable.size,
        createdAt: productsTable.createdAt,
        updatedAt: productsTable.updatedAt
      });

      const products = await db
        .select(safeSelect)
        .from(productsTable)
        .where(eq(productsTable.featured, true))
        .limit(8);
      
      return products;
    } catch (error) {
      console.error('[ERROR] Error fetching featured products:', error);
      return [];
    }
  }

  async getProducts(options: ProductQueryOptions = {}): Promise<ProductsResponse> {
    try {
      const safeSelect = await buildSafeSelect('products', {
        id: productsTable.id,
        name: productsTable.name,
        description: productsTable.description,
        price: productsTable.price,
        images: productsTable.images,
        category: productsTable.category,
        subcategory: productsTable.subcategory,
        featured: productsTable.featured,
        stock: productsTable.stock,
        brand: productsTable.brand,
        condition: productsTable.condition,
        size: productsTable.size,
        createdAt: productsTable.createdAt,
        updatedAt: productsTable.updatedAt
      });

      // Build query with safe columns
      let query = db.select(safeSelect).from(productsTable);
      
      // Apply filters safely...
      // ... rest of the method
    } catch (error) {
      console.error('[ERROR] Error fetching products:', error);
      return { products: [], total: 0, page: 1, totalPages: 0 };
    }
  }
}
```

## 4. Create Migration to Add Missing Columns

Create `/server/db/migrations/add-missing-product-columns.sql`:

```sql
-- Add subcategory column if it doesn't exist
DO $$ 
BEGIN
  IF NOT EXISTS (
    SELECT 1 FROM information_schema.columns 
    WHERE table_name = 'products' AND column_name = 'subcategory'
  ) THEN
    ALTER TABLE products ADD COLUMN subcategory VARCHAR(100);
    
    -- Set default subcategories based on category
    UPDATE products 
    SET subcategory = CASE
      WHEN category = 'Apparel' THEN 'Shirts'
      WHEN category = 'Footwear' THEN 'Running Shoes'
      WHEN category = 'Equipment' THEN 'Weights'
      WHEN category = 'Accessories' THEN 'Bags'
      ELSE 'General'
    END
    WHERE subcategory IS NULL;
  END IF;
END $$;

-- Add other potentially missing columns
DO $$ 
BEGIN
  -- Add brand if missing
  IF NOT EXISTS (
    SELECT 1 FROM information_schema.columns 
    WHERE table_name = 'products' AND column_name = 'brand'
  ) THEN
    ALTER TABLE products ADD COLUMN brand VARCHAR(100);
  END IF;
  
  -- Add condition if missing
  IF NOT EXISTS (
    SELECT 1 FROM information_schema.columns 
    WHERE table_name = 'products' AND column_name = 'condition'
  ) THEN
    ALTER TABLE products ADD COLUMN condition VARCHAR(50);
  END IF;
  
  -- Add size if missing
  IF NOT EXISTS (
    SELECT 1 FROM information_schema.columns 
    WHERE table_name = 'products' AND column_name = 'size'
  ) THEN
    ALTER TABLE products ADD COLUMN size VARCHAR(50);
  END IF;
  
  -- Add updated_at if missing
  IF NOT EXISTS (
    SELECT 1 FROM information_schema.columns 
    WHERE table_name = 'products' AND column_name = 'updated_at'
  ) THEN
    ALTER TABLE products ADD COLUMN updated_at TIMESTAMP DEFAULT NOW();
  END IF;
END $$;

-- Create index on subcategory for performance
CREATE INDEX IF NOT EXISTS idx_products_subcategory ON products(subcategory);
```

## 5. Update Schema File

Update `/server/db/schema.ts` to match the database:

```typescript
export const products = pgTable('products', {
  id: serial('id').primaryKey(),
  name: varchar('name', { length: 255 }).notNull(),
  description: text('description'),
  price: decimal('price', { precision: 10, scale: 2 }).notNull(),
  images: text('images').array(),
  category: varchar('category', { length: 100 }),
  subcategory: varchar('subcategory', { length: 100 }), // Add this
  featured: boolean('featured').default(false),
  stock: integer('stock').default(0),
  brand: varchar('brand', { length: 100 }), // Add this
  condition: varchar('condition', { length: 50 }), // Add this
  size: varchar('size', { length: 50 }), // Add this
  createdAt: timestamp('created_at').defaultNow(),
  updatedAt: timestamp('updated_at').defaultNow(), // Add this
});
```

## 6. Add Health Check Endpoint

Add to `/server/routes/health.ts`:

```typescript
import { getTableColumns } from '../utils/safe-query';

router.get('/api/health/schema', async (req, res) => {
  try {
    const productColumns = await getTableColumns('products');
    const userColumns = await getTableColumns('users');
    
    const missingProductColumns = [
      'subcategory', 'brand', 'condition', 'size', 'updated_at'
    ].filter(col => !productColumns.has(col));
    
    const health = {
      status: missingProductColumns.length === 0 ? 'healthy' : 'needs_migration',
      tables: {
        products: {
          columns: Array.from(productColumns),
          missing: missingProductColumns
        },
        users: {
          columns: Array.from(userColumns)
        }
      },
      timestamp: new Date().toISOString()
    };
    
    res.json(health);
  } catch (error) {
    res.status(500).json({
      status: 'error',
      error: error.message
    });
  }
});
```

## 7. Deployment Steps

### Step 1: Deploy the Hot Fix
```bash
# Update the getFeaturedProducts method to remove subcategory
# Commit and push
git add .
git commit -m "Fix: Remove subcategory from product queries"
git push
```

### Step 2: Run Migration
```bash
# After deployment, run the migration
npm run db:migrate

# Or manually:
psql $DATABASE_URL < server/db/migrations/add-missing-product-columns.sql
```

### Step 3: Verify Fix
```bash
# Check schema health
curl https://cleanandflip.com/api/health/schema

# Test featured products
curl https://cleanandflip.com/api/products/featured
```

## 8. Add Startup Validation

Add to `/server/index.ts`:

```typescript
import { getTableColumns } from './utils/safe-query';

async function validateDatabaseSchema() {
  console.log('Validating database schema...');
  
  try {
    const productColumns = await getTableColumns('products');
    const requiredColumns = ['id', 'name', 'price', 'category'];
    const missingRequired = requiredColumns.filter(col => !productColumns.has(col));
    
    if (missingRequired.length > 0) {
      console.error(`❌ Missing required columns in products table: ${missingRequired.join(', ')}`);
      // Don't exit - let the app run with degraded functionality
    } else {
      console.log('✅ Database schema validation passed');
    }
    
    // Log optional missing columns
    const optionalColumns = ['subcategory', 'brand', 'condition', 'size'];
    const missingOptional = optionalColumns.filter(col => !productColumns.has(col));
    
    if (missingOptional.length > 0) {
      console.warn(`⚠️  Missing optional columns: ${missingOptional.join(', ')}`);
      console.warn('   Run migrations to add these columns for full functionality');
    }
  } catch (error) {
    console.error('Schema validation error:', error);
    // Don't crash - continue with startup
  }
}

// Call during startup
await validateDatabaseSchema();
```

## 9. Monitoring Script

Create `/server/scripts/monitor-schema.ts`:

```typescript
import { db } from '../db';
import { sql } from 'drizzle-orm';

async function monitorSchema() {
  console.log('🔍 Database Schema Monitor\n');
  
  const tables = ['products', 'users', 'orders', 'categories'];
  
  for (const table of tables) {
    console.log(`\n📊 Table: ${table}`);
    console.log('─'.repeat(40));
    
    try {
      // Get columns
      const columns = await db.execute(sql`
        SELECT 
          column_name,
          data_type,
          is_nullable,
          column_default
        FROM information_schema.columns
        WHERE table_name = ${table}
        ORDER BY ordinal_position
      `);
      
      // Get row count
      const count = await db.execute(sql`
        SELECT COUNT(*) as count FROM ${sql.identifier(table)}
      `);
      
      console.log(`Columns: ${columns.rowCount}`);
      console.log(`Rows: ${count.rows[0].count}`);
      
      // List columns
      columns.rows.forEach(col => {
        console.log(`  - ${col.column_name} (${col.data_type})${col.is_nullable === 'NO' ? ' NOT NULL' : ''}`);
      });
      
    } catch (error) {
      console.error(`  ❌ Error: ${error.message}`);
    }
  }
}

monitorSchema();
```

## Priority Actions:

1. **IMMEDIATE**: Deploy the hot fix to remove subcategory from queries
2. **TODAY**: Run the migration to add missing columns
3. **ONGOING**: Use safe query utilities for all database operations

This permanent fix ensures your app never crashes due to missing columns!