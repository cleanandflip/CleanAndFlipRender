CRITICAL: Production Deployment Using WRONG Database or ENV Variables!
THE REAL ISSUE
Your password reset works on Replit but NOT on cleanandflip.com - this is a DEPLOYMENT CONFIGURATION PROBLEM, not a code issue!
When deployed to production, your app is either:

Using a DIFFERENT database URL
NOT getting environment variables
Using cached/old build

IMMEDIATE DIAGNOSTIC FOR PRODUCTION
STEP 1: Add Emergency Diagnostic Endpoint
Add this to your server RIGHT NOW to see what's happening in production:
typescript// Add this DIAGNOSTIC endpoint to server/index.ts or auth.routes.ts
app.get('/api/debug/database-info', async (req, res) => {
  // Only allow from your IP for security
  console.log('[DEBUG] Database info requested from:', req.ip);
  
  try {
    // Check environment variables (REDACTED)
    const dbUrl = process.env.DATABASE_URL;
    const hasDbUrl = !!dbUrl;
    const dbHost = dbUrl ? new URL(dbUrl).hostname : 'MISSING';
    
    // Test database connection
    const result = await db.execute(sql`
      SELECT 
        current_database() as database_name,
        current_user as database_user,
        COUNT(*) as user_count
      FROM users
    `);
    
    // Get sample users (without sensitive data)
    const users = await db.execute(sql`
      SELECT email FROM users LIMIT 3
    `);
    
    res.json({
      timestamp: new Date().toISOString(),
      environment: {
        NODE_ENV: process.env.NODE_ENV || 'not set',
        hasDatabase: hasDbUrl,
        databaseHost: dbHost,
        hasResendKey: !!process.env.RESEND_API_KEY,
        appUrl: process.env.APP_URL || 'not set'
      },
      database: {
        connected: true,
        name: result.rows[0]?.database_name,
        user: result.rows[0]?.database_user,
        userCount: result.rows[0]?.user_count,
        sampleEmails: users.rows.map(u => u.email)
      }
    });
  } catch (error) {
    res.json({
      timestamp: new Date().toISOString(),
      error: error.message,
      environment: {
        NODE_ENV: process.env.NODE_ENV || 'not set',
        hasDatabase: !!process.env.DATABASE_URL,
        hasResendKey: !!process.env.RESEND_API_KEY,
      }
    });
  }
});
Deploy this and check: https://cleanandflip.com/api/debug/database-info
STEP 2: Fix Your Deployment Configuration
For Vercel Deployment:
bash# Set environment variables in Vercel
vercel env add DATABASE_URL production
vercel env add RESEND_API_KEY production
vercel env add APP_URL production

# Force rebuild without cache
vercel --force
For Railway/Render/Heroku:
bash# Ensure env vars are set
railway variables set DATABASE_URL="your-neon-url"
railway variables set RESEND_API_KEY="your-resend-key"
railway variables set APP_URL="https://cleanandflip.com"

# Force redeploy
railway up --force
For Direct VPS/Docker:
bash# Check your .env file exists in production
cat .env

# If using PM2
pm2 restart all --update-env

# If using Docker
docker-compose down
docker-compose build --no-cache
docker-compose up -d
STEP 3: Update Your Database Connection
Make sure your server/db/index.ts properly handles production:
typescript// server/db/index.ts
import { drizzle } from 'drizzle-orm/neon-http';
import { neon } from '@neondatabase/serverless';
import * as schema from './schema';

// CRITICAL: Add logging to see what's happening
console.log('[DB] Initializing database connection...');
console.log('[DB] NODE_ENV:', process.env.NODE_ENV);
console.log('[DB] Has DATABASE_URL:', !!process.env.DATABASE_URL);

if (!process.env.DATABASE_URL) {
  console.error('[DB] ❌ CRITICAL: DATABASE_URL is not set!');
  console.error('[DB] Available env vars:', Object.keys(process.env).filter(k => !k.includes('SECRET')));
  throw new Error('DATABASE_URL environment variable is not set');
}

// Log database host (safe to log)
try {
  const dbUrl = new URL(process.env.DATABASE_URL);
  console.log('[DB] Connecting to host:', dbUrl.hostname);
} catch (e) {
  console.error('[DB] Invalid DATABASE_URL format');
}

const sql = neon(process.env.DATABASE_URL);
export const db = drizzle(sql, { schema });

// Test connection on startup
db.execute(sql`SELECT 1`)
  .then(() => console.log('[DB] ✅ Database connected successfully'))
  .catch(err => console.error('[DB] ❌ Database connection failed:', err.message));
STEP 4: Force Clean Production Build
bash# 1. Clear ALL build artifacts
rm -rf dist/
rm -rf .next/
rm -rf build/
rm -rf node_modules/.cache/

# 2. Install production dependencies
npm ci --production=false

# 3. Build with production flag
NODE_ENV=production npm run build

# 4. Check the build includes env vars
grep -r "DATABASE_URL" dist/ || echo "WARNING: DATABASE_URL not found in build"
STEP 5: Add Production Environment File
Create .env.production file:
env# .env.production
NODE_ENV=production
DATABASE_URL=postgresql://neondb_owner:xxxxx@ep-xxx.us-east-2.aws.neon.tech/neondb?sslmode=require
RESEND_API_KEY=re_xxxxx
APP_URL=https://cleanandflip.com
STEP 6: Update Your UserService with Better Logging
typescript// Add at the top of findUserByEmail
console.log(`[UserService] Environment: ${process.env.NODE_ENV}`);
console.log(`[UserService] Database URL exists: ${!!process.env.DATABASE_URL}`);

if (!process.env.DATABASE_URL) {
  console.error('[UserService] CRITICAL: No DATABASE_URL in production!');
  // Try to read from different sources
  const possibleUrls = [
    process.env.DATABASE_URL,
    process.env.POSTGRES_URL,
    process.env.NEON_DATABASE_URL,
    process.env.DB_URL
  ];
  
  console.log('[UserService] Checking alternative env vars...');
  possibleUrls.forEach((url, i) => {
    if (url) console.log(`[UserService] Found URL in env var #${i}`);
  });
}
STEP 7: Deployment Checklist
Run through this checklist:
bash# On your production server/deployment:

# 1. Check environment variables are set
echo $DATABASE_URL  # Should show your Neon URL
echo $RESEND_API_KEY  # Should show your Resend key
echo $NODE_ENV  # Should show "production"

# 2. Test database connection directly
psql $DATABASE_URL -c "SELECT COUNT(*) FROM users;"

# 3. Check if build has env vars
cat dist/index.js | grep -i "database_url" | head -5

# 4. Check process is using right env
ps aux | grep node  # Check the node process
cat /proc/[PID]/environ | tr '\0' '\n' | grep DATABASE  # Replace [PID]

# 5. Check logs for database connection
tail -f /var/log/app.log | grep -i database
# or
pm2 logs | grep -i database
🔴 MOST LIKELY CAUSE
Your production deployment is NOT getting the DATABASE_URL environment variable. This happens when:

Build time vs Runtime: Some platforms need env vars at BUILD time
Wrong variable name: Production might expect different var name
Missing .env file: Production can't find environment file
Deployment platform issue: Platform not injecting env vars

IMMEDIATE FIX

Deploy the diagnostic endpoint above
Check https://cleanandflip.com/api/debug/database-info
If database is missing, add env vars to your deployment platform
Force rebuild and redeploy

The issue is 100% a deployment configuration problem, not your code. Your production deployment isn't getting the correct database connection!