COMPREHENSIVE FIX: Admin Dashboard Button Functionality & Auto-Load
Looking at your screenshots, the action buttons aren't working and the Products tab doesn't auto-load. Here's the complete fix:

PHASE 1: FIX AUTO-LOADING & ROUTING
File 1: /client/src/pages/Admin.tsx
typescript// MAIN ADMIN PAGE WITH AUTO-LOAD FIX
import { useEffect } from 'react';
import { useLocation, useRoute } from 'wouter';
import { AdminLayout } from '@/components/admin/AdminLayout';
import { ProductsTab } from './admin/ProductsTab';
import { CategoriesTab } from './admin/CategoriesTab';
import { SubmissionsTab } from './admin/SubmissionsTab';
import { AnalyticsTab } from './admin/AnalyticsTab';
import { WishlistTab } from './admin/WishlistTab';
import { UsersTab } from './admin/UsersTab';
import { SystemTab } from './admin/SystemTab';
import { StripeTab } from './admin/StripeTab';

export function AdminDashboard() {
  const [location, navigate] = useLocation();
  const [match, params] = useRoute('/admin/:tab');
  
  // Extract tab from URL or default to 'products'
  const currentTab = params?.tab || 'products';

  // Auto-redirect to products if no tab specified
  useEffect(() => {
    if (location === '/admin' || location === '/admin/') {
      navigate('/admin/products', { replace: true });
    }
  }, [location, navigate]);

  // Render the appropriate tab content
  const renderTabContent = () => {
    switch(currentTab) {
      case 'products':
        return <ProductsTab />;
      case 'categories':
        return <CategoriesTab />;
      case 'submissions':
        return <SubmissionsTab />;
      case 'analytics':
        return <AnalyticsTab />;
      case 'wishlist':
        return <WishlistTab />;
      case 'users':
        return <UsersTab />;
      case 'system':
        return <SystemTab />;
      case 'stripe':
        return <StripeTab />;
      default:
        // Default to products if unknown tab
        navigate('/admin/products', { replace: true });
        return <ProductsTab />;
    }
  };

  return (
    <AdminLayout currentTab={currentTab}>
      {renderTabContent()}
    </AdminLayout>
  );
}

PHASE 2: FIX ADMIN LAYOUT TAB HIGHLIGHTING
File 2: /client/src/components/admin/AdminLayout.tsx
typescript// UPDATED ADMIN LAYOUT WITH PROPER TAB DETECTION
import { useLocation } from 'wouter';
import { 
  Package, Grid, FolderOpen, BarChart3, Heart, 
  Users, Settings, CreditCard 
} from 'lucide-react';
import { cn } from '@/lib/utils';

interface AdminLayoutProps {
  children: React.ReactNode;
  currentTab?: string;
}

const ADMIN_TABS = [
  { id: 'products', label: 'Products', icon: Package },
  { id: 'categories', label: 'Categories', icon: Grid },
  { id: 'submissions', label: 'Submissions', icon: FolderOpen },
  { id: 'analytics', label: 'Analytics', icon: BarChart3 },
  { id: 'wishlist', label: 'Wishlist', icon: Heart },
  { id: 'users', label: 'Users', icon: Users },
  { id: 'system', label: 'System', icon: Settings },
  { id: 'stripe', label: 'Stripe', icon: CreditCard },
];

export function AdminLayout({ children, currentTab }: AdminLayoutProps) {
  const [location, navigate] = useLocation();
  
  // Get active tab from prop or URL
  const activeTab = currentTab || location.split('/').pop() || 'products';

  const handleTabClick = (tabId: string) => {
    navigate(`/admin/${tabId}`);
  };

  return (
    <div className="min-h-screen bg-[#0f172a]">
      {/* Header */}
      <div className="border-b border-gray-800 bg-[#1e293b]/50 backdrop-blur">
        <div className="container mx-auto px-6 py-6">
          <h1 className="text-2xl font-bold text-white">DEVELOPER DASHBOARD</h1>
          <p className="text-gray-400 text-sm mt-1">Manage your Clean & Flip marketplace</p>
        </div>
      </div>

      {/* Tab Navigation */}
      <div className="border-b border-gray-800 bg-[#1e293b]/30">
        <div className="container mx-auto px-6">
          <nav className="flex space-x-1 -mb-px">
            {ADMIN_TABS.map((tab) => {
              const Icon = tab.icon;
              const isActive = activeTab === tab.id;
              
              return (
                <button
                  key={tab.id}
                  onClick={() => handleTabClick(tab.id)}
                  className={cn(
                    "flex items-center gap-2 px-4 py-3",
                    "border-b-2 transition-all duration-200",
                    "text-sm font-medium",
                    isActive ? [
                      "border-blue-500 text-white",
                      "bg-blue-500/10"
                    ] : [
                      "border-transparent text-gray-400",
                      "hover:text-white hover:bg-white/5"
                    ]
                  )}
                >
                  <Icon className="w-4 h-4" />
                  {tab.label}
                </button>
              );
            })}
          </nav>
        </div>
      </div>

      {/* Content */}
      <div className="container mx-auto px-6 py-8">
        {children}
      </div>
    </div>
  );
}

PHASE 3: FIX PRODUCTS TAB WITH WORKING BUTTONS
File 3: /client/src/pages/admin/ProductsTab.tsx
typescript// PRODUCTS TAB WITH ALL WORKING BUTTONS
import { useState, useEffect } from 'react';
import { Package, Plus, Download, Eye, Edit2, Trash2, RefreshCw } from 'lucide-react';
import { UnifiedMetricCard } from '@/components/admin/UnifiedMetricCard';
import { UnifiedDataTable } from '@/components/admin/UnifiedDataTable';
import { ProductModal } from '@/components/admin/ProductModal';
import { toast } from '@/hooks/useToast';

interface Product {
  id: string;
  name: string;
  category: string;
  price: number;
  stock: number;
  status: 'active' | 'inactive';
  image?: string;
}

export function ProductsTab() {
  const [products, setProducts] = useState<Product[]>([]);
  const [loading, setLoading] = useState(true);
  const [showAddModal, setShowAddModal] = useState(false);
  const [editingProduct, setEditingProduct] = useState<Product | null>(null);
  const [searchQuery, setSearchQuery] = useState('');
  const [currentPage, setCurrentPage] = useState(1);
  const [totalPages, setTotalPages] = useState(1);

  useEffect(() => {
    fetchProducts();
  }, [currentPage, searchQuery]);

  const fetchProducts = async () => {
    setLoading(true);
    try {
      const params = new URLSearchParams({
        page: currentPage.toString(),
        search: searchQuery
      });
      const res = await fetch(`/api/admin/products?${params}`);
      const data = await res.json();
      setProducts(data.products || []);
      setTotalPages(data.totalPages || 1);
    } catch (error) {
      console.error('Error fetching products:', error);
      toast.error('Failed to load products');
    } finally {
      setLoading(false);
    }
  };

  // VIEW PRODUCT
  const handleView = (product: Product) => {
    window.open(`/product/${product.id}`, '_blank');
  };

  // EDIT PRODUCT
  const handleEdit = (product: Product) => {
    setEditingProduct(product);
    setShowAddModal(true);
  };

  // DELETE PRODUCT
  const handleDelete = async (product: Product) => {
    if (!confirm(`Are you sure you want to delete "${product.name}"?`)) {
      return;
    }

    try {
      const res = await fetch(`/api/admin/products/${product.id}`, {
        method: 'DELETE',
        credentials: 'include'
      });

      if (res.ok) {
        toast.success('Product deleted successfully');
        fetchProducts(); // Refresh the list
      } else {
        throw new Error('Failed to delete');
      }
    } catch (error) {
      console.error('Error deleting product:', error);
      toast.error('Failed to delete product');
    }
  };

  // EXPORT PRODUCTS
  const handleExport = async () => {
    try {
      const res = await fetch('/api/admin/products/export', {
        credentials: 'include'
      });
      
      if (res.ok) {
        const blob = await res.blob();
        const url = window.URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = `products-${new Date().toISOString().split('T')[0]}.csv`;
        document.body.appendChild(a);
        a.click();
        a.remove();
        window.URL.revokeObjectURL(url);
        toast.success('Products exported successfully');
      }
    } catch (error) {
      console.error('Error exporting products:', error);
      toast.error('Failed to export products');
    }
  };

  // ADD/UPDATE PRODUCT
  const handleSaveProduct = async (productData: Partial<Product>) => {
    try {
      const url = editingProduct 
        ? `/api/admin/products/${editingProduct.id}`
        : '/api/admin/products';
      
      const method = editingProduct ? 'PUT' : 'POST';
      
      const res = await fetch(url, {
        method,
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(productData),
        credentials: 'include'
      });

      if (res.ok) {
        toast.success(editingProduct ? 'Product updated' : 'Product added');
        setShowAddModal(false);
        setEditingProduct(null);
        fetchProducts();
      } else {
        throw new Error('Failed to save');
      }
    } catch (error) {
      console.error('Error saving product:', error);
      toast.error('Failed to save product');
    }
  };

  const columns = [
    {
      key: 'product',
      label: 'PRODUCT',
      render: (product: Product) => (
        <div className="flex items-center gap-3">
          {product.image && (
            <img 
              src={product.image} 
              alt={product.name}
              className="w-10 h-10 rounded-lg object-cover"
            />
          )}
          <div>
            <p className="font-medium text-white">{product.name}</p>
            <p className="text-xs text-gray-500">ID: {product.id}</p>
          </div>
        </div>
      )
    },
    {
      key: 'category',
      label: 'CATEGORY',
      render: (product: Product) => (
        <span className="text-gray-300">{product.category}</span>
      )
    },
    {
      key: 'price',
      label: 'PRICE',
      render: (product: Product) => (
        <span className="text-white font-medium">${product.price.toFixed(2)}</span>
      )
    },
    {
      key: 'stock',
      label: 'STOCK',
      render: (product: Product) => (
        <span className={cn(
          "px-2 py-1 rounded text-xs font-medium",
          product.stock > 5 
            ? "bg-yellow-500/20 text-yellow-400" 
            : "bg-orange-500/20 text-orange-400"
        )}>
          {product.stock} units
        </span>
      )
    },
    {
      key: 'status',
      label: 'STATUS',
      render: (product: Product) => (
        <span className={cn(
          "px-2 py-1 rounded text-xs font-medium",
          product.status === 'active' 
            ? "bg-green-500/20 text-green-400" 
            : "bg-gray-500/20 text-gray-400"
        )}>
          {product.status}
        </span>
      )
    },
    {
      key: 'actions',
      label: 'Actions',
      render: (product: Product) => (
        <div className="flex items-center gap-1">
          <button
            onClick={() => handleView(product)}
            className="p-2 hover:bg-white/10 rounded-lg transition-colors"
            title="View Product"
          >
            <Eye className="w-4 h-4 text-gray-400" />
          </button>
          <button
            onClick={() => handleEdit(product)}
            className="p-2 hover:bg-white/10 rounded-lg transition-colors"
            title="Edit Product"
          >
            <Edit2 className="w-4 h-4 text-gray-400" />
          </button>
          <button
            onClick={() => handleDelete(product)}
            className="p-2 hover:bg-white/10 rounded-lg transition-colors"
            title="Delete Product"
          >
            <Trash2 className="w-4 h-4 text-gray-400" />
          </button>
        </div>
      )
    }
  ];

  return (
    <div className="space-y-8">
      {/* Metrics */}
      <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
        <UnifiedMetricCard
          title="Total Products"
          value={products.length}
          icon={Package}
          change={{ value: 12, label: 'from last month' }}
        />
        <UnifiedMetricCard
          title="Active Products"
          value={products.filter(p => p.status === 'active').length}
          icon={Package}
          change={{ value: 8, label: 'from last month' }}
        />
        <UnifiedMetricCard
          title="Total Value"
          value={`$${products.reduce((sum, p) => sum + (p.price * p.stock), 0).toFixed(2)}`}
          icon={Package}
          change={{ value: 23, label: 'from last month' }}
        />
      </div>

      {/* Header with Actions */}
      <div className="flex items-center justify-between">
        <div>
          <h2 className="text-xl font-bold text-white">Product Management</h2>
          <p className="text-gray-400 text-sm mt-1">Manage your Clean & Flip inventory</p>
        </div>
        <button
          onClick={() => {
            setEditingProduct(null);
            setShowAddModal(true);
          }}
          className="flex items-center gap-2 px-4 py-2 bg-blue-500 hover:bg-blue-600 text-white rounded-lg transition-colors"
        >
          <Plus className="w-4 h-4" />
          Add Product
        </button>
      </div>

      {/* Data Table */}
      <UnifiedDataTable
        data={products}
        columns={columns}
        loading={loading}
        searchPlaceholder="Search products by name, SKU, or category..."
        onSearch={setSearchQuery}
        onRefresh={fetchProducts}
        onExport={handleExport}
        pagination={{
          currentPage,
          totalPages,
          onPageChange: setCurrentPage
        }}
      />

      {/* Add/Edit Modal */}
      {showAddModal && (
        <ProductModal
          product={editingProduct}
          onSave={handleSaveProduct}
          onClose={() => {
            setShowAddModal(false);
            setEditingProduct(null);
          }}
        />
      )}
    </div>
  );
}

PHASE 4: CREATE PRODUCT MODAL COMPONENT
File 4: /client/src/components/admin/ProductModal.tsx
typescript// PRODUCT ADD/EDIT MODAL
import { useState, useEffect } from 'react';
import { X, Upload } from 'lucide-react';

interface ProductModalProps {
  product?: any;
  onSave: (data: any) => void;
  onClose: () => void;
}

export function ProductModal({ product, onSave, onClose }: ProductModalProps) {
  const [formData, setFormData] = useState({
    name: '',
    category: '',
    price: '',
    stock: '',
    status: 'active',
    description: '',
    image: ''
  });

  useEffect(() => {
    if (product) {
      setFormData({
        name: product.name || '',
        category: product.category || '',
        price: product.price?.toString() || '',
        stock: product.stock?.toString() || '',
        status: product.status || 'active',
        description: product.description || '',
        image: product.image || ''
      });
    }
  }, [product]);

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    onSave({
      ...formData,
      price: parseFloat(formData.price),
      stock: parseInt(formData.stock)
    });
  };

  return (
    <div className="fixed inset-0 bg-black/50 backdrop-blur-sm flex items-center justify-center z-50">
      <div className="bg-[#1e293b] border border-gray-800 rounded-xl w-full max-w-2xl max-h-[90vh] overflow-y-auto">
        {/* Header */}
        <div className="px-6 py-4 border-b border-gray-800 flex items-center justify-between">
          <h2 className="text-xl font-bold text-white">
            {product ? 'Edit Product' : 'Add New Product'}
          </h2>
          <button
            onClick={onClose}
            className="p-2 hover:bg-white/10 rounded-lg transition-colors"
          >
            <X className="w-5 h-5 text-gray-400" />
          </button>
        </div>

        {/* Form */}
        <form onSubmit={handleSubmit} className="p-6 space-y-4">
          <div className="grid grid-cols-2 gap-4">
            <div>
              <label className="block text-sm font-medium text-gray-400 mb-2">
                Product Name
              </label>
              <input
                type="text"
                value={formData.name}
                onChange={(e) => setFormData({ ...formData, name: e.target.value })}
                className="w-full px-4 py-2 bg-[#0f172a]/50 border border-gray-700 rounded-lg text-white focus:outline-none focus:ring-2 focus:ring-blue-500/50"
                required
              />
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-400 mb-2">
                Category
              </label>
              <select
                value={formData.category}
                onChange={(e) => setFormData({ ...formData, category: e.target.value })}
                className="w-full px-4 py-2 bg-[#0f172a]/50 border border-gray-700 rounded-lg text-white focus:outline-none focus:ring-2 focus:ring-blue-500/50"
                required
              >
                <option value="">Select category</option>
                <option value="Strength Training">Strength Training</option>
                <option value="Cardio Equipment">Cardio Equipment</option>
                <option value="Accessories">Accessories</option>
              </select>
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-400 mb-2">
                Price
              </label>
              <input
                type="number"
                step="0.01"
                value={formData.price}
                onChange={(e) => setFormData({ ...formData, price: e.target.value })}
                className="w-full px-4 py-2 bg-[#0f172a]/50 border border-gray-700 rounded-lg text-white focus:outline-none focus:ring-2 focus:ring-blue-500/50"
                required
              />
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-400 mb-2">
                Stock
              </label>
              <input
                type="number"
                value={formData.stock}
                onChange={(e) => setFormData({ ...formData, stock: e.target.value })}
                className="w-full px-4 py-2 bg-[#0f172a]/50 border border-gray-700 rounded-lg text-white focus:outline-none focus:ring-2 focus:ring-blue-500/50"
                required
              />
            </div>
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-400 mb-2">
              Description
            </label>
            <textarea
              value={formData.description}
              onChange={(e) => setFormData({ ...formData, description: e.target.value })}
              rows={4}
              className="w-full px-4 py-2 bg-[#0f172a]/50 border border-gray-700 rounded-lg text-white focus:outline-none focus:ring-2 focus:ring-blue-500/50"
            />
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-400 mb-2">
              Status
            </label>
            <select
              value={formData.status}
              onChange={(e) => setFormData({ ...formData, status: e.target.value })}
              className="w-full px-4 py-2 bg-[#0f172a]/50 border border-gray-700 rounded-lg text-white focus:outline-none focus:ring-2 focus:ring-blue-500/50"
            >
              <option value="active">Active</option>
              <option value="inactive">Inactive</option>
            </select>
          </div>

          {/* Actions */}
          <div className="flex justify-end gap-3 pt-4">
            <button
              type="button"
              onClick={onClose}
              className="px-4 py-2 bg-white/10 hover:bg-white/20 text-white rounded-lg transition-colors"
            >
              Cancel
            </button>
            <button
              type="submit"
              className="px-4 py-2 bg-blue-500 hover:bg-blue-600 text-white rounded-lg transition-colors"
            >
              {product ? 'Update Product' : 'Add Product'}
            </button>
          </div>
        </form>
      </div>
    </div>
  );
}

PHASE 5: UPDATE DATA TABLE COMPONENT
File 5: /client/src/components/admin/UnifiedDataTable.tsx
typescript// UPDATED DATA TABLE WITH WORKING BUTTONS
import { Search, Download, RefreshCw, ChevronLeft, ChevronRight } from 'lucide-react';

interface UnifiedDataTableProps {
  data: any[];
  columns: any[];
  loading?: boolean;
  searchPlaceholder?: string;
  onSearch?: (query: string) => void;
  onRefresh?: () => void;
  onExport?: () => void;
  pagination?: {
    currentPage: number;
    totalPages: number;
    onPageChange: (page: number) => void;
  };
}

export function UnifiedDataTable({
  data,
  columns,
  loading = false,
  searchPlaceholder = "Search...",
  onSearch,
  onRefresh,
  onExport,
  pagination
}: UnifiedDataTableProps) {
  return (
    <div className="bg-[#1e293b]/50 border border-gray-800 rounded-xl backdrop-blur overflow-hidden">
      {/* Search Bar */}
      <div className="px-6 py-4 border-b border-gray-800">
        <div className="flex items-center justify-between">
          <div className="relative flex-1 max-w-md">
            <Search className="absolute left-3 top-1/2 -translate-y-1/2 w-4 h-4 text-gray-400" />
            <input
              type="text"
              onChange={(e) => onSearch?.(e.target.value)}
              placeholder={searchPlaceholder}
              className="w-full pl-10 pr-4 py-2 bg-[#0f172a]/50 border border-gray-700 rounded-lg text-white placeholder-gray-500 focus:outline-none focus:ring-2 focus:ring-blue-500/50"
            />
          </div>
          
          <div className="flex items-center gap-2 ml-4">
            {onRefresh && (
              <button
                onClick={onRefresh}
                className="p-2 hover:bg-white/10 rounded-lg transition-colors"
                title="Refresh"
              >
                <RefreshCw className="w-4 h-4 text-gray-400" />
              </button>
            )}
            {onExport && (
              <button
                onClick={onExport}
                className="flex items-center gap-2 px-3 py-2 bg-white/10 hover:bg-white/20 rounded-lg transition-colors text-gray-300"
              >
                <Download className="w-4 h-4" />
                Export
              </button>
            )}
          </div>
        </div>
      </div>

      {/* Table */}
      <div className="overflow-x-auto">
        <table className="w-full">
          <thead>
            <tr className="border-b border-gray-800">
              <th className="px-6 py-3 text-left">
                <input type="checkbox" className="rounded border-gray-600" />
              </th>
              {columns.map((col: any) => (
                <th key={col.key} className="px-6 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider">
                  {col.label}
                </th>
              ))}
            </tr>
          </thead>
          <tbody>
            {loading ? (
              <tr>
                <td colSpan={columns.length + 1} className="px-6 py-12 text-center text-gray-500">
                  Loading...
                </td>
              </tr>
            ) : data.length === 0 ? (
              <tr>
                <td colSpan={columns.length + 1} className="px-6 py-12 text-center text-gray-500">
                  No data available
                </td>
              </tr>
            ) : (
              data.map((item, index) => (
                <tr key={item.id || index} className="border-b border-gray-800/50 hover:bg-white/5">
                  <td className="px-6 py-4">
                    <input type="checkbox" className="rounded border-gray-600" />
                  </td>
                  {columns.map((col: any) => (
                    <td key={col.key} className="px-6 py-4">
                      {col.render ? col.render(item) : item[col.key]}
                    </td>
                  ))}
                </tr>
              ))
            )}
          </tbody>
        </table>
      </div>

      {/* Pagination */}
      {pagination && (
        <div className="px-6 py-4 border-t border-gray-800 flex items-center justify-between">
          <p className="text-sm text-gray-400">
            Page {pagination.currentPage} of {pagination.totalPages}
          </p>
          <div className="flex gap-2">
            <button
              onClick={() => pagination.onPageChange(Math.max(1, pagination.currentPage - 1))}
              disabled={pagination.currentPage === 1}
              className="p-2 hover:bg-white/10 rounded-lg disabled:opacity-50 disabled:cursor-not-allowed"
            >
              <ChevronLeft className="w-4 h-4 text-gray-400" />
            </button>
            <button
              onClick={() => pagination.onPageChange(Math.min(pagination.totalPages, pagination.currentPage + 1))}
              disabled={pagination.currentPage === pagination.totalPages}
              className="p-2 hover:bg-white/10 rounded-lg disabled:opacity-50 disabled:cursor-not-allowed"
            >
              <ChevronRight className="w-4 h-4 text-gray-400" />
            </button>
          </div>
        </div>
      )}
    </div>
  );
}

PHASE 6: ADD TOAST NOTIFICATIONS
File 6: /client/src/hooks/useToast.tsx
typescript// SIMPLE TOAST NOTIFICATION SYSTEM
import { create } from 'zustand';

interface Toast {
  id: string;
  message: string;
  type: 'success' | 'error' | 'info';
}

interface ToastStore {
  toasts: Toast[];
  addToast: (message: string, type: Toast['type']) => void;
  removeToast: (id: string) => void;
}

const useToastStore = create<ToastStore>((set) => ({
  toasts: [],
  addToast: (message, type) => {
    const id = Date.now().toString();
    set((state) => ({
      toasts: [...state.toasts, { id, message, type }]
    }));
    setTimeout(() => {
      set((state) => ({
        toasts: state.toasts.filter((t) => t.id !== id)
      }));
    }, 3000);
  },
  removeToast: (id) =>
    set((state) => ({
      toasts: state.toasts.filter((t) => t.id !== id)
    }))
}));

export const toast = {
  success: (message: string) => useToastStore.getState().addToast(message, 'success'),
  error: (message: string) => useToastStore.getState().addToast(message, 'error'),
  info: (message: string) => useToastStore.getState().addToast(message, 'info')
};

// Toast Container Component
export function ToastContainer() {
  const toasts = useToastStore((state) => state.toasts);

  return (
    <div className="fixed bottom-4 right-4 z-50 space-y-2">
      {toasts.map((toast) => (
        <div
          key={toast.id}
          className={`px-4 py-3 rounded-lg text-white animate-slide-in ${
            toast.type === 'success' ? 'bg-green-500' :
            toast.type === 'error' ? 'bg-red-500' : 'bg-blue-500'
          }`}
        >
          {toast.message}
        </div>
      ))}
    </div>
  );
}

PHASE 7: UPDATE APP ROUTER
typescript// Update your main App.tsx or router file
import { Route, Switch } from 'wouter';
import { AdminDashboard } from './pages/Admin';

function App() {
  return (
    <>
      <Switch>
        {/* Other routes */}
        <Route path="/admin" component={AdminDashboard} />
        <Route path="/admin/:tab" component={AdminDashboard} />
      </Switch>
      <ToastContainer />
    </>
  );
}

PHASE 8: APPLY SAME PATTERN TO CATEGORIES TAB
Create similar functionality for Categories tab following the same pattern as Products tab.

EXPECTED RESULTS:
✅ Products tab auto-loads when visiting /admin
✅ Add Product button opens modal
✅ Export button downloads CSV
✅ View button opens product in new tab
✅ Edit button opens edit modal
✅ Delete button removes product with confirmation
✅ Refresh button reloads data
✅ Search filters products in real-time
✅ Pagination works correctly
✅ All tabs have consistent working buttons
This comprehensive fix ensures all buttons work properly across every admin tab with proper error handling and user feedback.