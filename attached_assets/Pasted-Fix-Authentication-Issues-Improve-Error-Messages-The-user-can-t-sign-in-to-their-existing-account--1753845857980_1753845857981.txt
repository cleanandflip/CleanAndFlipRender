Fix Authentication Issues & Improve Error Messages
The user can't sign in to their existing account (cleanandflipyt@gmail.com) and gets unclear errors. Fix the authentication system and add detailed error messages.
1. Fix Sign In - Add Detailed Error Messages
In /server/auth.ts or login endpoint:
javascriptapp.post('/api/login', async (req, res) => {
  const { email, password } = req.body;
  
  try {
    // Normalize email
    const normalizedEmail = email.toLowerCase().trim();
    
    console.log('Login attempt for:', normalizedEmail);
    
    // Find user - check both exact and case-insensitive
    const user = await db.query(
      'SELECT * FROM users WHERE LOWER(email) = LOWER($1)',
      [normalizedEmail]
    );
    
    if (!user || user.length === 0) {
      console.log('User not found:', normalizedEmail);
      return res.status(401).json({ 
        error: 'Invalid credentials',
        details: 'No account found with this email address'
      });
    }
    
    // Check password
    const validPassword = await bcrypt.compare(password, user[0].password_hash || user[0].password);
    
    if (!validPassword) {
      console.log('Invalid password for:', normalizedEmail);
      return res.status(401).json({ 
        error: 'Invalid credentials',
        details: 'Incorrect password'
      });
    }
    
    // Success - create session
    req.session.userId = user[0].id;
    console.log('Login successful for:', normalizedEmail);
    
    res.json({ 
      success: true,
      user: {
        id: user[0].id,
        email: user[0].email,
        name: `${user[0].first_name} ${user[0].last_name}`,
        role: user[0].role
      }
    });
    
  } catch (error) {
    console.error('Login error:', error);
    res.status(500).json({ 
      error: 'Login failed',
      details: 'System error during login. Please try again.'
    });
  }
});
2. Fix Registration - Check for Existing Email
javascriptapp.post('/api/register', async (req, res) => {
  const { email, password, ...otherFields } = req.body;
  
  try {
    // Normalize email
    const normalizedEmail = email.toLowerCase().trim();
    
    // Check if email already exists
    const existingUser = await db.query(
      'SELECT id FROM users WHERE LOWER(email) = LOWER($1)',
      [normalizedEmail]
    );
    
    if (existingUser && existingUser.length > 0) {
      return res.status(409).json({ 
        error: 'Registration failed',
        details: 'An account with this email already exists. Please sign in instead.',
        code: 'EMAIL_EXISTS'
      });
    }
    
    // Create new user
    const hashedPassword = await bcrypt.hash(password, 12);
    
    const newUser = await db.query(
      `INSERT INTO users (email, password_hash, first_name, last_name, address, city_state_zip, role) 
       VALUES ($1, $2, $3, $4, $5, $6, $7) 
       RETURNING id, email`,
      [normalizedEmail, hashedPassword, ...otherFields, 'user']
    );
    
    res.json({ 
      success: true,
      message: 'Account created successfully. Please sign in.'
    });
    
  } catch (error) {
    console.error('Registration error:', error);
    
    // Check for unique constraint violation
    if (error.code === '23505') {
      return res.status(409).json({ 
        error: 'Registration failed',
        details: 'This email is already registered. Please sign in.',
        code: 'EMAIL_EXISTS'
      });
    }
    
    res.status(500).json({ 
      error: 'Registration failed',
      details: 'System error during registration. Please try again later.'
    });
  }
});
3. Update Frontend Toast Messages
In the login/register components:
typescript// Login component
const handleLogin = async (e) => {
  e.preventDefault();
  
  try {
    const response = await fetch('/api/login', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ email, password }),
      credentials: 'include'
    });
    
    const data = await response.json();
    
    if (!response.ok) {
      // Show specific error message
      if (data.details) {
        toast.error(`Login Failed: ${data.details}`);
      } else {
        toast.error(data.error || 'Login failed');
      }
      return;
    }
    
    toast.success('Welcome back!');
    navigate('/dashboard');
    
  } catch (error) {
    toast.error('Network error. Please check your connection.');
  }
};

// Register component
const handleRegister = async (e) => {
  e.preventDefault();
  
  try {
    const response = await fetch('/api/register', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(formData),
      credentials: 'include'
    });
    
    const data = await response.json();
    
    if (!response.ok) {
      // Show specific error for existing email
      if (data.code === 'EMAIL_EXISTS') {
        toast.error(
          <div>
            <p>{data.details}</p>
            <button 
              onClick={() => navigate('/auth/signin')}
              className="underline mt-2"
            >
              Go to Sign In
            </button>
          </div>,
          { duration: 6000 }
        );
      } else {
        toast.error(data.details || data.error || 'Registration failed');
      }
      return;
    }
    
    toast.success('Account created! Please sign in.');
    navigate('/auth/signin');
    
  } catch (error) {
    toast.error('Network error. Please check your connection.');
  }
};
4. Add Password Reset Option
If the user forgot their password, add a reset option:
javascript// In login component
<div className="text-center mt-4">
  <button
    type="button"
    onClick={() => {
      toast.info(
        'Password reset coming soon. For now, please create a new account with a different email.',
        { duration: 5000 }
      );
    }}
    className="text-sm text-blue-400 hover:underline"
  >
    Forgot password?
  </button>
</div>
5. Debug the Existing Account
Add a debug endpoint to check the account status:
javascript// Temporary debug endpoint
app.post('/api/debug/check-email', async (req, res) => {
  const { email } = req.body;
  
  try {
    const users = await db.query(
      'SELECT id, email, created_at, role FROM users WHERE LOWER(email) = LOWER($1)',
      [email.toLowerCase().trim()]
    );
    
    if (users.length > 0) {
      res.json({
        exists: true,
        count: users.length,
        users: users.map(u => ({
          id: u.id,
          email: u.email,
          created: u.created_at,
          role: u.role
        }))
      });
    } else {
      res.json({ exists: false });
    }
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});
6. Fix Case Sensitivity Issues
Make sure all email comparisons are case-insensitive:
sql-- Update unique constraint to be case-insensitive
CREATE UNIQUE INDEX users_email_lower_idx ON users (LOWER(email));

-- Drop old constraint if exists
ALTER TABLE users DROP CONSTRAINT IF EXISTS users_email_unique;
Summary of Changes:

Added detailed error messages for login failures
Clear message when email already exists
Toast messages show specific problems
Case-insensitive email handling
Option to navigate to sign in from registration error
Debug endpoint to check account status

This will help identify if it's:

Password issue
Email case sensitivity issue
Account corruption
System bug

The user will now see exactly what's wrong instead of generic error messages.