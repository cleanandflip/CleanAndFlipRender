Complete Search System Overhaul - Comprehensive Instructions for Replit
PHASE 1: CREATE NEW SEARCH SYSTEM STRUCTURE
1.1 Create Search Types (/shared/types/search.ts)
typescriptexport interface SearchResult {
  id: string;
  title: string;
  type: 'product' | 'category' | 'brand';
  subtitle?: string;
  price?: number;
  image?: string;
  url: string;
}

export interface SearchSuggestion {
  term: string;
  category?: string;
  count?: number;
}

export interface SearchState {
  query: string;
  results: SearchResult[];
  suggestions: SearchSuggestion[];
  recentSearches: string[];
  popularSearches: string[];
  isLoading: boolean;
  isOpen: boolean;
  selectedIndex: number;
}

export interface SearchFilters {
  categories?: string[];
  priceRange?: { min: number; max: number };
  brands?: string[];
  conditions?: string[];
}
1.2 Create Search API Endpoints (/server/routes/search.ts)
typescriptimport { db } from "@db";
import { products, categories } from "@db/schema";
import { sql, ilike, and, gte, lte } from "drizzle-orm";

// Global search endpoint
app.get("/api/search", async (req, res) => {
  try {
    const { q, limit = 10, type = 'all' } = req.query;
    
    if (!q || typeof q !== 'string' || q.length < 2) {
      return res.json({ results: [], suggestions: [] });
    }

    const searchTerm = `%${q}%`;
    const results = [];

    // Search products
    if (type === 'all' || type === 'products') {
      const productResults = await db
        .select({
          id: products.id,
          title: products.name,
          subtitle: products.brand,
          price: products.price,
          image: sql`${products.images}->0`,
          type: sql`'product'`,
        })
        .from(products)
        .where(
          and(
            products.status === 'active',
            or(
              ilike(products.name, searchTerm),
              ilike(products.brand, searchTerm),
              ilike(products.description, searchTerm)
            )
          )
        )
        .limit(limit);
      
      results.push(...productResults.map(p => ({
        ...p,
        type: 'product' as const,
        url: `/products/${p.id}`
      })));
    }

    // Search categories
    if (type === 'all' || type === 'categories') {
      const categoryResults = await db
        .select({
          id: categories.id,
          title: categories.name,
          type: sql`'category'`,
        })
        .from(categories)
        .where(ilike(categories.name, searchTerm))
        .limit(5);
      
      results.push(...categoryResults.map(c => ({
        ...c,
        type: 'category' as const,
        url: `/products?category=${c.id}`
      })));
    }

    // Get search suggestions
    const suggestions = await db
      .select({
        term: products.name,
        category: categories.name,
      })
      .from(products)
      .leftJoin(categories, eq(products.categoryId, categories.id))
      .where(ilike(products.name, searchTerm))
      .limit(5);

    res.json({ results, suggestions });
  } catch (error) {
    console.error('Search error:', error);
    res.status(500).json({ error: 'Search failed' });
  }
});

// Popular searches endpoint
app.get("/api/search/popular", async (req, res) => {
  // This could be from analytics or hardcoded
  const popularSearches = [
    "Olympic Barbell",
    "Bumper Plates",
    "Power Rack",
    "Dumbbells",
    "Bench Press",
    "Kettlebells",
    "Weight Plates",
    "Squat Rack"
  ];
  
  res.json({ searches: popularSearches });
});
PHASE 2: CREATE NEW SEARCH COMPONENTS
2.1 Main Search Bar Component (/client/src/components/search/SearchBar.tsx)
typescriptimport React, { useState, useRef, useEffect, useCallback } from 'react';
import { useQuery } from '@tanstack/react-query';
import { useDebounce } from '@/hooks/useDebounce';
import { Search, X, Clock, TrendingUp, ChevronRight, Loader2 } from 'lucide-react';
import { motion, AnimatePresence } from 'framer-motion';
import { SearchResult, SearchSuggestion } from '@shared/types/search';
import { useClickOutside } from '@/hooks/useClickOutside';
import { useKeyboardNavigation } from '@/hooks/useKeyboardNavigation';
import SearchDropdown from './SearchDropdown';
import { cn } from '@/lib/utils';

interface SearchBarProps {
  className?: string;
  placeholder?: string;
  onSearch?: (query: string) => void;
  onResultClick?: (result: SearchResult) => void;
  variant?: 'default' | 'hero' | 'navbar';
  showSuggestions?: boolean;
  autoFocus?: boolean;
}

export default function SearchBar({
  className,
  placeholder = "Search equipment...",
  onSearch,
  onResultClick,
  variant = 'default',
  showSuggestions = true,
  autoFocus = false
}: SearchBarProps) {
  const [query, setQuery] = useState('');
  const [isOpen, setIsOpen] = useState(false);
  const [selectedIndex, setSelectedIndex] = useState(-1);
  const inputRef = useRef<HTMLInputElement>(null);
  const containerRef = useRef<HTMLDivElement>(null);
  
  const debouncedQuery = useDebounce(query, 300);

  // Fetch search results
  const { data: searchData, isLoading } = useQuery({
    queryKey: ['search', debouncedQuery],
    queryFn: async () => {
      if (debouncedQuery.length < 2) return null;
      const response = await fetch(`/api/search?q=${encodeURIComponent(debouncedQuery)}`);
      if (!response.ok) throw new Error('Search failed');
      return response.json();
    },
    enabled: debouncedQuery.length >= 2 && isOpen,
    staleTime: 60000, // Cache for 1 minute
  });

  // Fetch popular searches
  const { data: popularData } = useQuery({
    queryKey: ['search-popular'],
    queryFn: async () => {
      const response = await fetch('/api/search/popular');
      if (!response.ok) throw new Error('Failed to fetch popular searches');
      return response.json();
    },
    staleTime: 3600000, // Cache for 1 hour
  });

  // Load recent searches from localStorage
  const getRecentSearches = useCallback(() => {
    try {
      const saved = localStorage.getItem('cleanflip-recent-searches');
      return saved ? JSON.parse(saved).slice(0, 5) : [];
    } catch {
      return [];
    }
  }, []);

  const [recentSearches, setRecentSearches] = useState<string[]>(getRecentSearches);

  // Save search to history
  const saveToHistory = useCallback((searchTerm: string) => {
    if (!searchTerm.trim()) return;
    
    const updated = [searchTerm, ...recentSearches.filter(s => s !== searchTerm)].slice(0, 5);
    setRecentSearches(updated);
    localStorage.setItem('cleanflip-recent-searches', JSON.stringify(updated));
  }, [recentSearches]);

  // Handle search submission
  const handleSearch = useCallback((searchQuery: string) => {
    if (!searchQuery.trim()) return;
    
    saveToHistory(searchQuery);
    onSearch?.(searchQuery);
    setIsOpen(false);
    inputRef.current?.blur();
  }, [saveToHistory, onSearch]);

  // Handle result click
  const handleResultClick = useCallback((result: SearchResult) => {
    saveToHistory(result.title);
    onResultClick?.(result);
    setQuery('');
    setIsOpen(false);
  }, [saveToHistory, onResultClick]);

  // Handle input change
  const handleInputChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {
    const value = e.target.value;
    setQuery(value);
    setIsOpen(true);
    setSelectedIndex(-1);
  }, []);

  // Handle form submission
  const handleSubmit = useCallback((e: React.FormEvent) => {
    e.preventDefault();
    handleSearch(query);
  }, [query, handleSearch]);

  // Clear search
  const handleClear = useCallback(() => {
    setQuery('');
    setIsOpen(false);
    inputRef.current?.focus();
  }, []);

  // Click outside handler
  useClickOutside(containerRef, () => setIsOpen(false));

  // Keyboard navigation
  const items = [
    ...(searchData?.results || []),
    ...(recentSearches.map(term => ({ type: 'recent', title: term }))),
    ...(popularData?.searches?.map(term => ({ type: 'popular', title: term })) || [])
  ];

  useKeyboardNavigation({
    isOpen,
    items,
    selectedIndex,
    onSelect: (index) => setSelectedIndex(index),
    onEnter: (item) => {
      if (item.type === 'recent' || item.type === 'popular') {
        handleSearch(item.title);
      } else {
        handleResultClick(item as SearchResult);
      }
    },
    onEscape: () => setIsOpen(false)
  });

  // Auto-focus on mount if specified
  useEffect(() => {
    if (autoFocus && inputRef.current) {
      inputRef.current.focus();
    }
  }, [autoFocus]);

  return (
    <div 
      ref={containerRef}
      className={cn(
        "search-container relative w-full",
        className
      )}
    >
      <form onSubmit={handleSubmit} className="relative">
        <div className={cn(
          "search-input-wrapper relative flex items-center",
          "bg-gray-800/50 border border-gray-700/50",
          "rounded-lg transition-all duration-200",
          "hover:bg-gray-800/60 hover:border-gray-600/50",
          "focus-within:bg-gray-800/70 focus-within:border-gray-500/50",
          "focus-within:ring-2 focus-within:ring-gray-500/20",
          {
            'h-12': variant === 'default',
            'h-14': variant === 'hero',
            'h-10': variant === 'navbar'
          }
        )}>
          {/* Search Icon */}
          <Search className={cn(
            "absolute left-3 text-gray-400",
            {
              'w-5 h-5': variant === 'default',
              'w-6 h-6': variant === 'hero',
              'w-4 h-4': variant === 'navbar'
            }
          )} />
          
          {/* Input Field */}
          <input
            ref={inputRef}
            type="text"
            value={query}
            onChange={handleInputChange}
            onFocus={() => setIsOpen(true)}
            placeholder={placeholder}
            className={cn(
              "w-full bg-transparent border-0 outline-none",
              "text-white placeholder-gray-400",
              "pl-10 pr-10",
              {
                'text-base': variant === 'default',
                'text-lg': variant === 'hero',
                'text-sm': variant === 'navbar'
              }
            )}
            autoComplete="off"
            spellCheck="false"
          />
          
          {/* Clear Button */}
          <AnimatePresence>
            {query && (
              <motion.button
                initial={{ opacity: 0, scale: 0.8 }}
                animate={{ opacity: 1, scale: 1 }}
                exit={{ opacity: 0, scale: 0.8 }}
                type="button"
                onClick={handleClear}
                className="absolute right-3 text-gray-400 hover:text-white transition-colors"
              >
                <X className="w-4 h-4" />
              </motion.button>
            )}
          </AnimatePresence>
          
          {/* Loading Indicator */}
          {isLoading && (
            <div className="absolute right-3">
              <Loader2 className="w-4 h-4 text-gray-400 animate-spin" />
            </div>
          )}
        </div>
      </form>

      {/* Search Dropdown */}
      <AnimatePresence>
        {isOpen && (
          <SearchDropdown
            query={query}
            results={searchData?.results || []}
            suggestions={searchData?.suggestions || []}
            recentSearches={recentSearches}
            popularSearches={popularData?.searches || []}
            isLoading={isLoading}
            selectedIndex={selectedIndex}
            onResultClick={handleResultClick}
            onSearchClick={handleSearch}
            onClearHistory={() => {
              setRecentSearches([]);
              localStorage.removeItem('cleanflip-recent-searches');
            }}
          />
        )}
      </AnimatePresence>
    </div>
  );
}
2.2 Search Dropdown Component (/client/src/components/search/SearchDropdown.tsx)
typescriptimport React from 'react';
import { motion } from 'framer-motion';
import { Clock, TrendingUp, Search, X, Package, Tag, DollarSign } from 'lucide-react';
import { SearchResult, SearchSuggestion } from '@shared/types/search';
import { cn } from '@/lib/utils';

interface SearchDropdownProps {
  query: string;
  results: SearchResult[];
  suggestions: SearchSuggestion[];
  recentSearches: string[];
  popularSearches: string[];
  isLoading: boolean;
  selectedIndex: number;
  onResultClick: (result: SearchResult) => void;
  onSearchClick: (query: string) => void;
  onClearHistory: () => void;
}

export default function SearchDropdown({
  query,
  results,
  suggestions,
  recentSearches,
  popularSearches,
  isLoading,
  selectedIndex,
  onResultClick,
  onSearchClick,
  onClearHistory
}: SearchDropdownProps) {
  const hasResults = results.length > 0;
  const showRecentSearches = query.length === 0 && recentSearches.length > 0;
  const showPopularSearches = query.length === 0;

  return (
    <motion.div
      initial={{ opacity: 0, y: -10 }}
      animate={{ opacity: 1, y: 0 }}
      exit={{ opacity: 0, y: -10 }}
      transition={{ duration: 0.2 }}
      className={cn(
        "search-dropdown absolute top-full left-0 right-0 mt-2",
        "bg-gray-900/95 backdrop-blur-xl",
        "border border-gray-700/50 rounded-xl",
        "shadow-2xl shadow-black/40",
        "overflow-hidden z-50",
        "max-h-[480px] overflow-y-auto"
      )}
    >
      {/* Loading State */}
      {isLoading && query.length >= 2 && (
        <div className="p-8 text-center">
          <div className="inline-flex items-center gap-3 text-gray-400">
            <div className="w-5 h-5 border-2 border-gray-600 border-t-blue-500 rounded-full animate-spin" />
            <span>Searching...</span>
          </div>
        </div>
      )}

      {/* Search Results */}
      {!isLoading && query.length >= 2 && hasResults && (
        <div className="search-results">
          <div className="px-4 py-2 bg-gray-800/50 border-b border-gray-700/50">
            <h3 className="text-xs font-semibold text-gray-400 uppercase tracking-wider">
              Search Results
            </h3>
          </div>
          <div className="py-2">
            {results.map((result, index) => (
              <SearchResultItem
                key={result.id}
                result={result}
                isSelected={index === selectedIndex}
                onClick={() => onResultClick(result)}
              />
            ))}
          </div>
        </div>
      )}

      {/* No Results */}
      {!isLoading && query.length >= 2 && !hasResults && (
        <div className="p-8 text-center">
          <Package className="w-12 h-12 mx-auto mb-3 text-gray-600" />
          <p className="text-gray-400 mb-1">No results found for "{query}"</p>
          <p className="text-sm text-gray-500">Try adjusting your search terms</p>
        </div>
      )}

      {/* Recent Searches */}
      {showRecentSearches && (
        <div className="recent-searches border-b border-gray-700/50">
          <div className="px-4 py-2 bg-gray-800/50 border-b border-gray-700/50 flex items-center justify-between">
            <h3 className="text-xs font-semibold text-gray-400 uppercase tracking-wider flex items-center gap-2">
              <Clock className="w-3 h-3" />
              Recent Searches
            </h3>
            <button
              onClick={onClearHistory}
              className="text-xs text-gray-500 hover:text-gray-300 transition-colors"
            >
              Clear
            </button>
          </div>
          <div className="py-2">
            {recentSearches.map((term, index) => (
              <SearchTermItem
                key={`recent-${index}`}
                term={term}
                icon={<Clock className="w-4 h-4" />}
                isSelected={selectedIndex === results.length + index}
                onClick={() => onSearchClick(term)}
              />
            ))}
          </div>
        </div>
      )}

      {/* Popular Searches */}
      {showPopularSearches && (
        <div className="popular-searches">
          <div className="px-4 py-2 bg-gray-800/50 border-b border-gray-700/50">
            <h3 className="text-xs font-semibold text-gray-400 uppercase tracking-wider flex items-center gap-2">
              <TrendingUp className="w-3 h-3" />
              Popular Searches
            </h3>
          </div>
          <div className="py-2">
            {popularSearches.map((term, index) => (
              <SearchTermItem
                key={`popular-${index}`}
                term={term}
                icon={<TrendingUp className="w-4 h-4" />}
                isSelected={selectedIndex === results.length + recentSearches.length + index}
                onClick={() => onSearchClick(term)}
              />
            ))}
          </div>
        </div>
      )}
    </motion.div>
  );
}

// Search Result Item Component
function SearchResultItem({ 
  result, 
  isSelected, 
  onClick 
}: { 
  result: SearchResult; 
  isSelected: boolean; 
  onClick: () => void;
}) {
  const getIcon = () => {
    switch (result.type) {
      case 'product': return <Package className="w-4 h-4" />;
      case 'category': return <Tag className="w-4 h-4" />;
      default: return <Search className="w-4 h-4" />;
    }
  };

  return (
    <button
      onClick={onClick}
      className={cn(
        "w-full px-4 py-3 flex items-center gap-3",
        "hover:bg-gray-800/50 transition-colors",
        "border-l-2 border-transparent",
        isSelected && "bg-gray-800/50 border-l-blue-500"
      )}
    >
      <div className="text-gray-400">
        {getIcon()}
      </div>
      <div className="flex-1 text-left">
        <div className="text-white font-medium">{result.title}</div>
        {result.subtitle && (
          <div className="text-sm text-gray-400">{result.subtitle}</div>
        )}
      </div>
      {result.price && (
        <div className="text-right">
          <div className="text-white font-semibold flex items-center gap-1">
            <DollarSign className="w-3 h-3" />
            {result.price}
          </div>
        </div>
      )}
    </button>
  );
}

// Search Term Item Component
function SearchTermItem({ 
  term, 
  icon, 
  isSelected, 
  onClick 
}: { 
  term: string; 
  icon: React.ReactNode; 
  isSelected: boolean; 
  onClick: () => void;
}) {
  return (
    <button
      onClick={onClick}
      className={cn(
        "w-full px-4 py-3 flex items-center gap-3",
        "hover:bg-gray-800/50 transition-colors",
        "border-l-2 border-transparent",
        isSelected && "bg-gray-800/50 border-l-blue-500"
      )}
    >
      <div className="text-gray-400">{icon}</div>
      <div className="text-white text-left">{term}</div>
    </button>
  );
}
PHASE 3: CREATE HOOKS AND UTILITIES
3.1 useDebounce Hook (/client/src/hooks/useDebounce.ts)
typescriptimport { useState, useEffect } from 'react';

export function useDebounce<T>(value: T, delay: number): T {
  const [debouncedValue, setDebouncedValue] = useState<T>(value);

  useEffect(() => {
    const handler = setTimeout(() => {
      setDebouncedValue(value);
    }, delay);

    return () => {
      clearTimeout(handler);
    };
  }, [value, delay]);

  return debouncedValue;
}
3.2 useClickOutside Hook (/client/src/hooks/useClickOutside.ts)
typescriptimport { RefObject, useEffect } from 'react';

export function useClickOutside(
  ref: RefObject<HTMLElement>,
  handler: () => void
) {
  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      if (ref.current && !ref.current.contains(event.target as Node)) {
        handler();
      }
    };

    document.addEventListener('mousedown', handleClickOutside);
    return () => {
      document.removeEventListener('mousedown', handleClickOutside);
    };
  }, [ref, handler]);
}
3.3 useKeyboardNavigation Hook (/client/src/hooks/useKeyboardNavigation.ts)
typescriptimport { useEffect } from 'react';

interface UseKeyboardNavigationProps {
  isOpen: boolean;
  items: any[];
  selectedIndex: number;
  onSelect: (index: number) => void;
  onEnter: (item: any) => void;
  onEscape: () => void;
}

export function useKeyboardNavigation({
  isOpen,
  items,
  selectedIndex,
  onSelect,
  onEnter,
  onEscape
}: UseKeyboardNavigationProps) {
  useEffect(() => {
    if (!isOpen) return;

    const handleKeyDown = (e: KeyboardEvent) => {
      switch (e.key) {
        case 'ArrowDown':
          e.preventDefault();
          onSelect(Math.min(selectedIndex + 1, items.length - 1));
          break;
        case 'ArrowUp':
          e.preventDefault();
          onSelect(Math.max(selectedIndex - 1, -1));
          break;
        case 'Enter':
          e.preventDefault();
          if (selectedIndex >= 0 && items[selectedIndex]) {
            onEnter(items[selectedIndex]);
          }
          break;
        case 'Escape':
          e.preventDefault();
          onEscape();
          break;
      }
    };

    document.addEventListener('keydown', handleKeyDown);
    return () => {
      document.removeEventListener('keydown', handleKeyDown);
    };
  }, [isOpen, items, selectedIndex, onSelect, onEnter, onEscape]);
}
PHASE 4: GLOBAL STYLES
4.1 Search Theme CSS (/client/src/styles/search.css)
css/* Search System Global Styles */
:root {
  --search-bg: rgba(31, 41, 55, 0.6);
  --search-bg-hover: rgba(31, 41, 55, 0.7);
  --search-bg-focus: rgba(31, 41, 55, 0.8);
  --search-border: rgba(107, 114, 128, 0.5);
  --search-border-hover: rgba(107, 114, 128, 0.6);
  --search-border-focus: rgba(107, 114, 128, 0.7);
  --search-dropdown-bg: rgba(17, 24, 39, 0.95);
  --search-dropdown-border: rgba(55, 65, 81, 0.5);
  --search-item-hover: rgba(55, 65, 81, 0.5);
  --search-text: #ffffff;
  --search-text-secondary: #9ca3af;
  --search-placeholder: #6b7280;
  --search-icon: #6b7280;
  --search-accent: #3b82f6;
}

/* Ensure proper stacking context */
.search-container {
  position: relative;
  z-index: 100;
}

.search-dropdown {
  position: absolute;
  z-index: 9999;
}

/* Custom scrollbar for dropdown */
.search-dropdown::-webkit-scrollbar {
  width: 6px;
}

.search-dropdown::-webkit-scrollbar-track {
  background: rgba(31, 41, 55, 0.5);
}

.search-dropdown::-webkit-scrollbar-thumb {
  background: rgba(75, 85, 99, 0.5);
  border-radius: 3px;
}

.search-dropdown::-webkit-scrollbar-thumb:hover {
  background: rgba(107, 114, 128, 0.6);
}

/* Smooth transitions */
.search-input-wrapper,
.search-dropdown button {
  transition-property: background-color, border-color, transform;
  transition-duration: 200ms;
  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
}

/* Focus styles for accessibility */
.search-input-wrapper:focus-within {
  outline: 2px solid transparent;
  outline-offset: 2px;
}

/* Mobile responsive */
@media (max-width: 640px) {
  .search-dropdown {
    position: fixed;
    left: 1rem;
    right: 1rem;
    top: auto;
    bottom: 1rem;
    max-height: 70vh;
  }
}

/* Prevent body scroll when search is open on mobile */
@media (max-width: 640px) {
  body:has(.search-dropdown) {
    overflow: hidden;
  }
}

/* Loading animation */
@keyframes search-spin {
  to {
    transform: rotate(360deg);
  }
}

/* Highlight animation */
@keyframes search-highlight {
  0%, 100% {
    background-color: transparent;
  }
  50% {
    background-color: rgba(59, 130, 246, 0.1);
  }
}

.search-highlight {
  animation: search-highlight 0.5s ease-in-out;
}
PHASE 5: INTEGRATION INSTRUCTIONS
5.1 Replace Existing SearchBar Usage

In Products Page (/client/src/pages/Products.tsx):

typescriptimport SearchBar from '@/components/search/SearchBar';
import { useLocation } from 'wouter';

// Replace existing search bar with:
<SearchBar
  placeholder="Search equipment..."
  onSearch={(query) => {
    handleFilterChange({ ...filters, search: query });
  }}
  onResultClick={(result) => {
    if (result.url) {
      setLocation(result.url);
    }
  }}
  variant="default"
  className="max-w-md"
/>

In Navigation (/client/src/components/Navigation.tsx):

typescript<SearchBar
  placeholder="Search..."
  variant="navbar"
  onResultClick={(result) => {
    setLocation(result.url);
  }}
  className="hidden md:block max-w-xs"
/>

In Hero/Landing (/client/src/pages/Home.tsx):

typescript<SearchBar
  placeholder="Search for equipment..."
  variant="hero"
  autoFocus
  onSearch={(query) => {
    setLocation(`/products?search=${encodeURIComponent(query)}`);
  }}
  className="max-w-2xl mx-auto"
/>
5.2 Database Indexes for Search Performance
Add to your database migrations:
sql-- Add search indexes
CREATE INDEX idx_products_name_gin ON products USING gin(to_tsvector('english', name));
CREATE INDEX idx_products_brand_gin ON products USING gin(to_tsvector('english', brand));
CREATE INDEX idx_products_description_gin ON products USING gin(to_tsvector('english', description));
CREATE INDEX idx_categories_name ON categories(name);

-- Add search function for better performance
CREATE OR REPLACE FUNCTION search_products(search_query TEXT)
RETURNS TABLE(
  id TEXT,
  name TEXT,
  brand TEXT,
  price DECIMAL,
  image TEXT,
  relevance REAL
) AS $$
BEGIN
  RETURN QUERY
  SELECT 
    p.id,
    p.name,
    p.brand,
    p.price,
    p.images->0 as image,
    ts_rank(
      to_tsvector('english', p.name || ' ' || COALESCE(p.brand, '') || ' ' || COALESCE(p.description, '')),
      plainto_tsquery('english', search_query)
    ) as relevance
  FROM products p
  WHERE 
    p.status = 'active' AND
    to_tsvector('english', p.name || ' ' || COALESCE(p.brand, '') || ' ' || COALESCE(p.description, ''))
    @@ plainto_tsquery('english', search_query)
  ORDER BY relevance DESC
  LIMIT 20;
END;
$$ LANGUAGE plpgsql;
5.3 Environment Variables
Add to .env:
SEARCH_CACHE_TTL=300000
SEARCH_MIN_QUERY_LENGTH=2
SEARCH_MAX_RESULTS=20
SEARCH_DEBOUNCE_MS=300
PHASE 6: TESTING & OPTIMIZATION
6.1 Test All Search Scenarios

Empty state (shows recent & popular)
Typing (shows results after 2 chars)
No results found
Click on result
Click on suggestion
Keyboard navigation
Mobile responsiveness
Clear button
Form submission

6.2 Performance Optimizations

Implement Redis caching for popular searches
Add query result caching
Optimize database queries with proper indexes
Implement virtual scrolling for long result lists
Add image lazy loading in results

PHASE 7: CLEANUP
7.1 Remove Old Files
bash# Remove old search components
rm client/src/components/products/search-bar.tsx
rm client/src/components/SearchBar.tsx
# Remove any other old search-related files
7.2 Update Imports
Search and replace all old SearchBar imports:
typescript// Old
import SearchBar from '@/components/products/search-bar';

// New
import SearchBar from '@/components/search/SearchBar';
FINAL CHECKLIST

 All search bars replaced with new component
 Search API endpoints working
 Database indexes created
 Keyboard navigation functional
 Mobile responsive
 Click handlers working
 Recent searches persisting
 Popular searches loading
 Results linking correctly
 Loading states smooth
 Error states handled
 Accessibility compliant
 Performance optimized
 Old code removed
 Documentation updated

This complete overhaul provides a modern, performant, and beautiful search system that integrates perfectly with your existing codebase