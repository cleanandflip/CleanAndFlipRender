Instructions for Replit: Apply Global Design System to ENTIRE Website
IMPORTANT: This is for the ENTIRE website, not just admin dashboard
Apply the global design system from the document to EVERY PAGE AND COMPONENT in the application:
1. Pages to Update (ALL OF THEM)
bash# Customer-Facing Pages
- Landing Page (/)
- Product Catalog (/products)
- Product Details (/products/:id)
- Shopping Cart (/cart)
- Checkout (/checkout)
- Submit Equipment (/submit)
- Login/Register (/login, /register)
- User Dashboard (/dashboard)
- About Page (/about)
- Contact Page (/contact)

# Admin Pages
- Admin Dashboard (/admin)
- All Admin Tabs (Products, Categories, Users, etc.)

# Component Libraries
- Navigation/Header
- Footer
- Modals
- Forms
- Cards
- Buttons
- All UI components
2. Implementation Order
bash# STEP 1: Create the global design system files
mkdir -p client/src/styles/design-system
touch client/src/styles/design-system/theme.ts
touch client/src/styles/design-system/components.ts
touch client/src/styles/design-system/animations.css

# STEP 2: Copy the EXACT code from the document into these files
# - Copy globalDesignSystem into theme.ts
# - Copy componentClasses into components.ts
# - Copy all animations into animations.css
3. Update Root Layout Files
tsx// client/src/App.tsx or main layout file
import './styles/design-system/animations.css';
import { globalDesignSystem as theme } from './styles/design-system/theme';

// Apply base styles to the root
export function App() {
  return (
    <div 
      className="min-h-screen"
      style={{ 
        backgroundColor: theme.colors.bg.primary,
        color: theme.colors.text.secondary
      }}
    >
      {/* All routes and content */}
    </div>
  );
}
4. Update Navigation Component
tsx// client/src/components/Navigation.tsx
// Apply the design system to the main navigation

import { globalDesignSystem as theme } from '@/styles/design-system/theme';

export const Navigation = () => {
  return (
    <nav 
      className="border-b"
      style={{ 
        backgroundColor: theme.colors.bg.primary,
        borderColor: theme.colors.border.default
      }}
    >
      {/* Update all nav links, buttons, etc. with new colors */}
    </nav>
  );
};
5. Update ALL Page Components
For EVERY page component in the application:
tsx// Example: client/src/pages/Products.tsx
import { Button, Card } from '@/components/shared/AnimatedComponents';
import { globalDesignSystem as theme } from '@/styles/design-system/theme';

// Replace ALL hardcoded colors with theme colors
// Replace ALL old buttons with new Button component
// Replace ALL old cards with new Card component
6. Global Find & Replace Instructions
Run these replacements across the ENTIRE codebase:
bash# Find all files with styling
find client/src -type f \( -name "*.tsx" -o -name "*.ts" -o -name "*.css" \) | xargs grep -l "className\|style\|bg-\|text-\|border-"

# Replace colors in ALL files:
# Old → New
bg-gray-900 → bg-[#1A1F2E]
bg-gray-800 → bg-[#232937]
bg-gray-700 → bg-[#2D3548]
text-white → text-[#FFFFFF]
text-gray-300 → text-[#E2E8F0]
text-gray-400 → text-[#94A3B8]
text-gray-500 → text-[#64748B]
border-gray-700 → border-[rgba(255,255,255,0.08)]
border-gray-600 → border-[rgba(255,255,255,0.12)]

# Replace button classes
<button className="... → <Button variant="primary"
<a className="btn... → <Button as="a"
7. Update Tailwind Config
js// tailwind.config.js
import { globalDesignSystem as theme } from './client/src/styles/design-system/theme';

export default {
  theme: {
    extend: {
      colors: {
        // Add all theme colors here
        'brand-blue': theme.colors.brand.blue,
        'brand-green': theme.colors.brand.green,
        // ... etc
      }
    }
  }
}
8. Component-by-Component Updates
tsx// For EVERY component file:

// 1. Import the theme
import { globalDesignSystem as theme } from '@/styles/design-system/theme';

// 2. Import new animated components
import { Button, Card, Toggle } from '@/components/shared/AnimatedComponents';

// 3. Replace ALL:
// - <button> with <Button>
// - <div className="card..."> with <Card>
// - <input type="checkbox"> with <Toggle>

// 4. Update all color references to use theme
// - style={{ color: '#fff' }} → style={{ color: theme.colors.text.primary }}
// - className="text-white" → style={{ color: theme.colors.text.primary }}
9. Critical Files to Update
bash# These files MUST be updated:
client/src/App.tsx
client/src/main.tsx
client/src/index.css
client/src/components/Layout.tsx
client/src/components/Navigation.tsx
client/src/components/Footer.tsx
client/src/pages/*.tsx (ALL page files)
client/src/components/**/*.tsx (ALL component files)
10. Add Animations to ALL Interactive Elements
tsx// Wrap ALL clickable elements with motion
import { motion } from 'framer-motion';

// Before:
<div onClick={handleClick}>

// After:
<motion.div 
  whileHover={{ scale: 1.02 }}
  whileTap={{ scale: 0.98 }}
  onClick={handleClick}
>

// Add fade-in to ALL page content
<motion.div
  initial={{ opacity: 0, y: 20 }}
  animate={{ opacity: 1, y: 0 }}
  transition={{ duration: 0.3 }}
>
11. Test Every Single Page
javascript// Run this test on EVERY page
const pagesToTest = [
  '/',
  '/products',
  '/products/123',
  '/cart',
  '/checkout',
  '/submit',
  '/login',
  '/register',
  '/dashboard',
  '/admin',
  '/admin/products',
  '/admin/categories',
  '/admin/users',
  '/about',
  '/contact'
];

pagesToTest.forEach(page => {
  console.log(`Testing ${page}...`);
  // Navigate to page
  // Check for:
  // - Correct background color (#1A1F2E)
  // - Correct text colors
  // - Working animations
  // - Consistent styling
});
12. Verification Checklist

 App.tsx uses theme colors for background
 Navigation uses new design system
 Footer uses new design system
 Landing page fully updated
 Product pages use new Card components
 All buttons replaced with Button component
 Cart page uses theme colors
 Checkout uses new form styles
 Login/Register pages updated
 Admin dashboard fully themed
 All modals use new styling
 Animations work on all pages
 No hardcoded colors remain
 Mobile responsive on all pages
 Dark theme consistent everywhere

IMPORTANT NOTES FOR REPLIT:

DO NOT skip any pages - update EVERYTHING
DO NOT leave any old color classes - replace ALL
DO NOT forget customer-facing pages - they're more important than admin
TEST every single page after updates
ENSURE animations work smoothly everywhere
MAINTAIN responsive design on all screen sizes

The goal is a completely unified design across the ENTIRE application - every button, every card, every text element should use the new design system

Site-Wide Global Design System - Clean & Flip
1. Unified Color System for Entire Application
tsx// client/src/styles/global-design-system.ts - Site-wide design tokens

export const globalDesignSystem = {
  // Core Color Palette (matching current website)
  colors: {
    // Primary Background Colors
    bg: {
      primary: '#1A1F2E',        // Main dark navy background
      secondary: '#232937',      // Slightly lighter for cards/sections
      tertiary: '#2D3548',       // Hover states and elevated surfaces
      overlay: 'rgba(0, 0, 0, 0.6)',
      gradient: 'linear-gradient(135deg, #1A1F2E 0%, #232937 100%)'
    },
    
    // Text Hierarchy
    text: {
      primary: '#FFFFFF',        // Main headings, important text
      secondary: '#E2E8F0',      // Body text, descriptions
      muted: '#94A3B8',          // Subtle text, labels
      disabled: '#64748B',       // Disabled states
      inverse: '#1A1F2E'         // Text on light backgrounds
    },
    
    // Brand Colors
    brand: {
      blue: '#3B82F6',          // Primary blue (CTA buttons)
      blueHover: '#2563EB',
      blueLight: 'rgba(59, 130, 246, 0.1)',
      green: '#10B981',         // Success green (cash offer button)
      greenHover: '#059669',
      greenLight: 'rgba(16, 185, 129, 0.1)'
    },
    
    // Functional Colors
    status: {
      info: '#3B82F6',
      success: '#10B981',
      warning: '#F59E0B',
      error: '#EF4444',
      neutral: '#6B7280'
    },
    
    // Border & Divider Colors
    border: {
      default: 'rgba(255, 255, 255, 0.08)',
      hover: 'rgba(255, 255, 255, 0.12)',
      focus: 'rgba(59, 130, 246, 0.5)',
      divider: 'rgba(255, 255, 255, 0.06)'
    }
  },
  
  // Typography System
  typography: {
    fonts: {
      sans: '-apple-system, BlinkMacSystemFont, "Inter", "Segoe UI", sans-serif',
      mono: '"SF Mono", "Monaco", "Inconsolata", monospace'
    },
    
    // Font Sizes with line heights
    sizes: {
      xs: { size: '0.75rem', lineHeight: '1rem' },
      sm: { size: '0.875rem', lineHeight: '1.25rem' },
      base: { size: '1rem', lineHeight: '1.5rem' },
      lg: { size: '1.125rem', lineHeight: '1.75rem' },
      xl: { size: '1.25rem', lineHeight: '1.75rem' },
      '2xl': { size: '1.5rem', lineHeight: '2rem' },
      '3xl': { size: '1.875rem', lineHeight: '2.25rem' },
      '4xl': { size: '2.25rem', lineHeight: '2.5rem' }
    },
    
    // Font Weights
    weights: {
      normal: 400,
      medium: 500,
      semibold: 600,
      bold: 700
    }
  },
  
  // Spacing Scale
  spacing: {
    0: '0',
    1: '0.25rem',
    2: '0.5rem',
    3: '0.75rem',
    4: '1rem',
    5: '1.25rem',
    6: '1.5rem',
    8: '2rem',
    10: '2.5rem',
    12: '3rem',
    16: '4rem',
    20: '5rem'
  },
  
  // Border Radius
  radius: {
    none: '0',
    sm: '0.25rem',
    base: '0.5rem',
    md: '0.75rem',
    lg: '1rem',
    xl: '1.5rem',
    full: '9999px'
  },
  
  // Shadows & Glows
  effects: {
    shadows: {
      sm: '0 1px 2px 0 rgba(0, 0, 0, 0.3)',
      base: '0 1px 3px 0 rgba(0, 0, 0, 0.4), 0 1px 2px 0 rgba(0, 0, 0, 0.06)',
      md: '0 4px 6px -1px rgba(0, 0, 0, 0.4), 0 2px 4px -1px rgba(0, 0, 0, 0.06)',
      lg: '0 10px 15px -3px rgba(0, 0, 0, 0.4), 0 4px 6px -2px rgba(0, 0, 0, 0.05)',
      xl: '0 20px 25px -5px rgba(0, 0, 0, 0.4), 0 10px 10px -5px rgba(0, 0, 0, 0.04)'
    },
    
    glows: {
      blue: '0 0 0 3px rgba(59, 130, 246, 0.1)',
      green: '0 0 0 3px rgba(16, 185, 129, 0.1)',
      subtle: '0 0 20px rgba(59, 130, 246, 0.15)'
    }
  },
  
  // Animation Presets
  animations: {
    duration: {
      instant: '100ms',
      fast: '200ms',
      normal: '300ms',
      slow: '500ms'
    },
    
    easing: {
      default: 'cubic-bezier(0.4, 0, 0.2, 1)',
      in: 'cubic-bezier(0.4, 0, 1, 1)',
      out: 'cubic-bezier(0, 0, 0.2, 1)',
      bounce: 'cubic-bezier(0.68, -0.55, 0.265, 1.55)'
    }
  }
};
2. Reusable Component Classes
tsx// client/src/styles/component-classes.ts

export const componentClasses = {
  // Button Styles
  button: {
    base: `
      inline-flex items-center justify-center
      font-medium rounded-lg
      transition-all duration-200
      focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-[#1A1F2E]
      disabled:opacity-50 disabled:cursor-not-allowed
    `,
    
    variants: {
      primary: `
        bg-[#3B82F6] text-white
        hover:bg-[#2563EB] hover:shadow-lg hover:shadow-blue-500/25
        focus:ring-blue-500
      `,
      secondary: `
        bg-[#232937] text-white border border-[rgba(255,255,255,0.08)]
        hover:bg-[#2D3548] hover:border-[rgba(255,255,255,0.12)]
        focus:ring-gray-500
      `,
      success: `
        bg-[#10B981] text-white
        hover:bg-[#059669] hover:shadow-lg hover:shadow-green-500/25
        focus:ring-green-500
      `,
      ghost: `
        bg-transparent text-[#E2E8F0]
        hover:bg-[rgba(255,255,255,0.08)] hover:text-white
        focus:ring-gray-500
      `
    },
    
    sizes: {
      sm: 'px-3 py-1.5 text-sm',
      md: 'px-4 py-2 text-base',
      lg: 'px-6 py-3 text-lg'
    }
  },
  
  // Card Styles
  card: {
    base: `
      bg-[#232937] backdrop-blur-sm
      border border-[rgba(255,255,255,0.08)]
      rounded-lg
      transition-all duration-300
    `,
    interactive: `
      hover:bg-[#2D3548]
      hover:border-[rgba(255,255,255,0.12)]
      hover:shadow-xl hover:shadow-black/20
      cursor-pointer
    `,
    glow: `
      hover:shadow-[0_0_30px_rgba(59,130,246,0.15)]
    `
  },
  
  // Input Styles
  input: {
    base: `
      w-full px-4 py-2
      bg-[#1A1F2E] text-white
      border border-[rgba(255,255,255,0.08)]
      rounded-lg
      placeholder:text-[#64748B]
      transition-all duration-200
      focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent
      hover:border-[rgba(255,255,255,0.12)]
    `
  },
  
  // Badge Styles
  badge: {
    base: 'inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium',
    variants: {
      default: 'bg-[rgba(255,255,255,0.08)] text-[#E2E8F0]',
      success: 'bg-[rgba(16,185,129,0.1)] text-[#10B981] border border-[rgba(16,185,129,0.2)]',
      info: 'bg-[rgba(59,130,246,0.1)] text-[#3B82F6] border border-[rgba(59,130,246,0.2)]',
      warning: 'bg-[rgba(245,158,11,0.1)] text-[#F59E0B] border border-[rgba(245,158,11,0.2)]',
      error: 'bg-[rgba(239,68,68,0.1)] text-[#EF4444] border border-[rgba(239,68,68,0.2)]'
    }
  }
};
3. Animated Utility Components
tsx// client/src/components/shared/AnimatedComponents.tsx

import { motion, AnimatePresence } from 'framer-motion';
import { componentClasses } from '@/styles/component-classes';

// Animated Button Component
export const Button = ({ 
  variant = 'primary',
  size = 'md',
  className = '',
  children,
  loading,
  ...props 
}) => {
  return (
    <motion.button
      whileHover={{ scale: 1.02 }}
      whileTap={{ scale: 0.98 }}
      className={`
        ${componentClasses.button.base}
        ${componentClasses.button.variants[variant]}
        ${componentClasses.button.sizes[size]}
        ${className}
      `}
      {...props}
    >
      <AnimatePresence mode="wait">
        {loading ? (
          <motion.div
            key="loading"
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            className="flex items-center gap-2"
          >
            <motion.div
              animate={{ rotate: 360 }}
              transition={{ duration: 1, repeat: Infinity, ease: "linear" }}
            >
              <Loader2 className="w-4 h-4" />
            </motion.div>
            <span>Loading...</span>
          </motion.div>
        ) : (
          <motion.span
            key="content"
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
          >
            {children}
          </motion.span>
        )}
      </AnimatePresence>
    </motion.button>
  );
};

// Animated Card Component
export const Card = ({ 
  children, 
  interactive = false,
  glow = false,
  className = '',
  ...props 
}) => {
  return (
    <motion.div
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ duration: 0.3 }}
      whileHover={interactive ? { y: -2 } : {}}
      className={`
        ${componentClasses.card.base}
        ${interactive ? componentClasses.card.interactive : ''}
        ${glow ? componentClasses.card.glow : ''}
        ${className}
      `}
      {...props}
    >
      {children}
    </motion.div>
  );
};

// Animated Toggle Switch
export const Toggle = ({ checked, onChange, label }) => {
  return (
    <label className="flex items-center cursor-pointer">
      <div className="relative">
        <motion.div
          animate={{ 
            backgroundColor: checked ? '#3B82F6' : 'rgba(255, 255, 255, 0.08)'
          }}
          className="w-11 h-6 rounded-full"
        >
          <motion.div
            animate={{ 
              x: checked ? 20 : 2,
              backgroundColor: checked ? '#FFFFFF' : '#94A3B8'
            }}
            transition={{ type: "spring", stiffness: 500, damping: 30 }}
            className="absolute top-1 w-4 h-4 rounded-full"
          />
        </motion.div>
      </div>
      {label && (
        <span className="ml-3 text-sm text-[#E2E8F0]">{label}</span>
      )}
    </label>
  );
};

// Page Transition Wrapper
export const PageTransition = ({ children }) => {
  return (
    <motion.div
      initial={{ opacity: 0, x: -20 }}
      animate={{ opacity: 1, x: 0 }}
      exit={{ opacity: 0, x: 20 }}
      transition={{ duration: 0.3 }}
    >
      {children}
    </motion.div>
  );
};

// Hover Glow Effect
export const GlowHover = ({ children, color = 'blue' }) => {
  const glowColors = {
    blue: 'hover:shadow-[0_0_30px_rgba(59,130,246,0.3)]',
    green: 'hover:shadow-[0_0_30px_rgba(16,185,129,0.3)]'
  };
  
  return (
    <div className={`transition-all duration-300 ${glowColors[color]}`}>
      {children}
    </div>
  );
};

// Animated Number Counter
export const AnimatedNumber = ({ value, prefix = '', suffix = '' }) => {
  const [displayValue, setDisplayValue] = useState(0);
  
  useEffect(() => {
    const animationDuration = 1000;
    const steps = 60;
    const stepDuration = animationDuration / steps;
    const increment = value / steps;
    
    let current = 0;
    const timer = setInterval(() => {
      current += increment;
      if (current >= value) {
        setDisplayValue(value);
        clearInterval(timer);
      } else {
        setDisplayValue(Math.floor(current));
      }
    }, stepDuration);
    
    return () => clearInterval(timer);
  }, [value]);
  
  return (
    <span className="tabular-nums">
      {prefix}{displayValue.toLocaleString()}{suffix}
    </span>
  );
};
4. Global CSS Animations
css/* client/src/styles/animations.css */

/* Smooth fade in */
@keyframes fadeIn {
  from {
    opacity: 0;
    transform: translateY(10px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

/* Pulse effect for notifications */
@keyframes pulse {
  0%, 100% {
    opacity: 1;
  }
  50% {
    opacity: 0.5;
  }
}

/* Glow effect */
@keyframes glow {
  0%, 100% {
    box-shadow: 0 0 20px rgba(59, 130, 246, 0.5);
  }
  50% {
    box-shadow: 0 0 30px rgba(59, 130, 246, 0.8);
  }
}

/* Loading shimmer */
@keyframes shimmer {
  0% {
    background-position: -200% 0;
  }
  100% {
    background-position: 200% 0;
  }
}

/* Float animation */
@keyframes float {
  0%, 100% {
    transform: translateY(0);
  }
  50% {
    transform: translateY(-10px);
  }
}

/* Utility classes */
.animate-fade-in {
  animation: fadeIn 0.3s ease-out;
}

.animate-pulse {
  animation: pulse 2s infinite;
}

.animate-glow {
  animation: glow 2s infinite;
}

.animate-float {
  animation: float 3s ease-in-out infinite;
}

.shimmer {
  background: linear-gradient(
    90deg,
    rgba(255, 255, 255, 0.05) 25%,
    rgba(255, 255, 255, 0.1) 50%,
    rgba(255, 255, 255, 0.05) 75%
  );
  background-size: 200% 100%;
  animation: shimmer 1.5s infinite;
}

/* Hover transitions */
.transition-all {
  transition-property: all;
  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
  transition-duration: 200ms;
}

/* Focus states */
.focus-ring {
  outline: 2px solid transparent;
  outline-offset: 2px;
}

.focus-ring:focus {
  outline-color: #3B82F6;
  outline-offset: 2px;
}
5. Usage Examples
tsx// Example: Dashboard Page
import { Button, Card, Toggle, AnimatedNumber } from '@/components/shared/AnimatedComponents';
import { globalDesignSystem as theme } from '@/styles/global-design-system';

export const DashboardPage = () => {
  return (
    <div style={{ backgroundColor: theme.colors.bg.primary }} className="min-h-screen">
      {/* Header */}
      <header className="border-b" style={{ borderColor: theme.colors.border.default }}>
        <div className="container mx-auto px-6 py-4">
          <h1 style={{ color: theme.colors.text.primary }} className="text-2xl font-bold">
            Dashboard
          </h1>
        </div>
      </header>
      
      {/* Content */}
      <main className="container mx-auto px-6 py-8">
        {/* Stats Cards */}
        <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
          <Card glow>
            <div className="p-6">
              <p style={{ color: theme.colors.text.muted }} className="text-sm">
                Total Revenue
              </p>
              <p style={{ color: theme.colors.text.primary }} className="text-3xl font-bold mt-2">
                <AnimatedNumber value={45231} prefix="$" />
              </p>
            </div>
          </Card>
        </div>
        
        {/* Action Buttons */}
        <div className="flex gap-4">
          <Button variant="primary">
            Add Product
          </Button>
          <Button variant="success">
            Generate Report
          </Button>
          <Button variant="secondary">
            View Settings
          </Button>
        </div>
      </main>
    </div>
  );
};
This global design system:

Matches your current website colors exactly
Provides consistent styling across all pages and dashboards
Includes subtle animations for a lively feel
Is organized and easy to maintain
Works for both customer-facing pages and admin dashboards
Uses your existing dark navy background with proper contrast
Keeps the clean, minimal aesthetic while adding polish