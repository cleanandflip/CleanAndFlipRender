Global Button Theme & Typography Update Instructions for Replit
Instructions for Replit:
"Create a comprehensive global button theme and update typography colors across the entire Clean & Flip site. Remove ALL hardcoded button styles and implement a unified design system.
PHASE 1: CREATE GLOBAL BUTTON THEME
Create client/src/styles/button-theme.css:
css/* Global Button Theme Variables */
:root {
  /* Button Colors */
  --btn-primary-bg: #3B82F6;
  --btn-primary-hover: #2563EB;
  --btn-primary-text: #FFFFFF;
  
  --btn-secondary-bg: rgba(59, 130, 246, 0.1);
  --btn-secondary-hover: rgba(59, 130, 246, 0.2);
  --btn-secondary-text: #60A5FA;
  --btn-secondary-text-hover: #93BBFC;
  
  --btn-ghost-bg: transparent;
  --btn-ghost-hover: rgba(59, 130, 246, 0.1);
  --btn-ghost-text: #94A3B8;
  --btn-ghost-text-hover: #CBD5E1;
  
  --btn-danger-bg: #EF4444;
  --btn-danger-hover: #DC2626;
  --btn-danger-text: #FFFFFF;
  
  /* Effects */
  --btn-ring-color: rgba(59, 130, 246, 0.5);
  --btn-shadow: 0 1px 3px rgba(0, 0, 0, 0.1), 0 1px 2px rgba(0, 0, 0, 0.06);
  --btn-shadow-hover: 0 4px 6px rgba(59, 130, 246, 0.1), 0 2px 4px rgba(59, 130, 246, 0.06);
  
  /* Animation */
  --btn-transition: all 0.2s cubic-bezier(0.4, 0, 0.2, 1);
}

/* Base Button Styles */
.btn {
  position: relative;
  display: inline-flex;
  align-items: center;
  justify-content: center;
  gap: 0.5rem;
  padding: 0.5rem 1rem;
  font-weight: 500;
  font-size: 0.875rem;
  line-height: 1.25rem;
  border-radius: 0.5rem;
  border: 1px solid transparent;
  transition: var(--btn-transition);
  cursor: pointer;
  user-select: none;
  outline: none;
  white-space: nowrap;
}

/* Button Sizes */
.btn-sm {
  padding: 0.375rem 0.875rem;
  font-size: 0.8125rem;
  gap: 0.375rem;
}

.btn-md {
  padding: 0.5rem 1rem;
  font-size: 0.875rem;
}

.btn-lg {
  padding: 0.625rem 1.25rem;
  font-size: 1rem;
  gap: 0.625rem;
}

/* Button Variants */
.btn-primary {
  background-color: var(--btn-primary-bg);
  color: var(--btn-primary-text);
  border-color: var(--btn-primary-bg);
  box-shadow: var(--btn-shadow);
}

.btn-primary:hover:not(:disabled) {
  background-color: var(--btn-primary-hover);
  border-color: var(--btn-primary-hover);
  box-shadow: var(--btn-shadow-hover);
  transform: translateY(-1px);
}

.btn-secondary {
  background-color: var(--btn-secondary-bg);
  color: var(--btn-secondary-text);
  border-color: rgba(59, 130, 246, 0.3);
}

.btn-secondary:hover:not(:disabled) {
  background-color: var(--btn-secondary-hover);
  color: var(--btn-secondary-text-hover);
  border-color: rgba(59, 130, 246, 0.4);
}

.btn-ghost {
  background-color: var(--btn-ghost-bg);
  color: var(--btn-ghost-text);
  border-color: transparent;
}

.btn-ghost:hover:not(:disabled) {
  background-color: var(--btn-ghost-hover);
  color: var(--btn-ghost-text-hover);
}

.btn-danger {
  background-color: var(--btn-danger-bg);
  color: var(--btn-danger-text);
  border-color: var(--btn-danger-bg);
}

.btn-danger:hover:not(:disabled) {
  background-color: var(--btn-danger-hover);
  border-color: var(--btn-danger-hover);
}

/* Glass Morphism Effect */
.btn-glass {
  background: rgba(255, 255, 255, 0.05);
  backdrop-filter: blur(10px);
  border: 1px solid rgba(255, 255, 255, 0.1);
}

.btn-glass:hover:not(:disabled) {
  background: rgba(255, 255, 255, 0.08);
  border-color: rgba(255, 255, 255, 0.15);
}

/* States */
.btn:focus-visible {
  ring: 2px solid var(--btn-ring-color);
  ring-offset: 2px;
  ring-offset-color: transparent;
}

.btn:active:not(:disabled) {
  transform: scale(0.98);
}

.btn:disabled {
  opacity: 0.5;
  cursor: not-allowed;
}

/* Icon Animations */
.btn svg {
  transition: transform 0.2s ease;
}

.btn:hover:not(:disabled) svg {
  transform: scale(1.1);
}

/* Loading State */
.btn-loading {
  color: transparent;
}

.btn-loading::after {
  content: "";
  position: absolute;
  width: 1rem;
  height: 1rem;
  border: 2px solid currentColor;
  border-right-color: transparent;
  border-radius: 50%;
  animation: spin 0.6s linear infinite;
}

@keyframes spin {
  to { transform: rotate(360deg); }
}
PHASE 2: CREATE BUTTON COMPONENT
Update client/src/components/ui/Button.tsx:
typescriptimport { forwardRef, ButtonHTMLAttributes } from 'react';
import { cn } from '@/lib/utils';
import { Loader2 } from 'lucide-react';

export interface ButtonProps extends ButtonHTMLAttributes<HTMLButtonElement> {
  variant?: 'primary' | 'secondary' | 'ghost' | 'danger' | 'glass';
  size?: 'sm' | 'md' | 'lg';
  loading?: boolean;
  icon?: React.ReactNode;
}

export const Button = forwardRef<HTMLButtonElement, ButtonProps>(
  ({ 
    className, 
    variant = 'primary', 
    size = 'md', 
    loading = false,
    icon,
    children,
    disabled,
    ...props 
  }, ref) => {
    return (
      <button
        ref={ref}
        disabled={disabled || loading}
        className={cn(
          'btn',
          `btn-${variant}`,
          `btn-${size}`,
          loading && 'btn-loading',
          className
        )}
        {...props}
      >
        {loading ? (
          <Loader2 className="h-4 w-4 animate-spin" />
        ) : icon ? (
          <span className="btn-icon">{icon}</span>
        ) : null}
        {!loading && children}
      </button>
    );
  }
);

Button.displayName = 'Button';
PHASE 3: UPDATE GLOBAL TYPOGRAPHY
Create client/src/styles/typography.css:
css/* Global Typography Theme */
:root {
  /* Text Colors */
  --text-primary: #F1F5F9;      /* Main text - light gray */
  --text-secondary: #94A3B8;     /* Secondary text - muted */
  --text-tertiary: #64748B;      /* Tertiary text - more muted */
  --text-accent: #60A5FA;        /* Accent text - blue */
  --text-success: #34D399;       /* Success text - green */
  --text-warning: #FBBF24;       /* Warning text - yellow */
  --text-danger: #F87171;        /* Error text - red */
  
  /* Heading Colors */
  --heading-primary: #FFFFFF;     /* Main headings - white */
  --heading-secondary: #E2E8F0;   /* Sub headings - off-white */
  
  /* Background Text Contrast */
  --text-on-dark: #F1F5F9;
  --text-on-light: #1E293B;
  --text-on-accent: #FFFFFF;
}

/* Global Text Styles */
body {
  color: var(--text-primary);
}

h1, h2, h3, h4, h5, h6 {
  color: var(--heading-primary);
  font-weight: 600;
  line-height: 1.2;
}

/* Heading Sizes */
h1 { font-size: 2.5rem; }
h2 { font-size: 2rem; }
h3 { font-size: 1.75rem; }
h4 { font-size: 1.5rem; }
h5 { font-size: 1.25rem; }
h6 { font-size: 1.125rem; }

/* Text Utilities */
.text-primary { color: var(--text-primary); }
.text-secondary { color: var(--text-secondary); }
.text-tertiary { color: var(--text-tertiary); }
.text-accent { color: var(--text-accent); }
.text-success { color: var(--text-success); }
.text-warning { color: var(--text-warning); }
.text-danger { color: var(--text-danger); }

/* Labels and Small Text */
.label {
  color: var(--text-secondary);
  font-size: 0.875rem;
  font-weight: 500;
  margin-bottom: 0.375rem;
}

.caption {
  color: var(--text-tertiary);
  font-size: 0.75rem;
}

/* Links */
a {
  color: var(--text-accent);
  transition: color 0.2s ease;
}

a:hover {
  color: #93BBFC;
}

/* Form Elements */
input, textarea, select {
  color: var(--text-primary);
  background-color: rgba(30, 41, 59, 0.5);
  border-color: rgba(100, 116, 139, 0.3);
}

input::placeholder,
textarea::placeholder {
  color: var(--text-tertiary);
}

/* Card Text */
.card-title {
  color: var(--heading-primary);
  font-size: 1.125rem;
  font-weight: 600;
}

.card-description {
  color: var(--text-secondary);
  font-size: 0.875rem;
}

/* Dashboard Specific */
.metric-value {
  color: var(--heading-primary);
  font-size: 2rem;
  font-weight: 700;
}

.metric-label {
  color: var(--text-secondary);
  font-size: 0.875rem;
  text-transform: uppercase;
  letter-spacing: 0.05em;
}

/* Table Text */
.table-header {
  color: var(--text-secondary);
  font-weight: 600;
  text-transform: uppercase;
  font-size: 0.75rem;
  letter-spacing: 0.05em;
}

.table-cell {
  color: var(--text-primary);
}

/* Status Colors */
.status-active { color: var(--text-success); }
.status-pending { color: var(--text-warning); }
.status-inactive { color: var(--text-tertiary); }
.status-error { color: var(--text-danger); }
PHASE 4: FIND AND REPLACE ALL BUTTONS
Run these commands to find all button instances:
bash# Find all button elements
grep -rn "<button\|<Button\|variant=\|className=.*btn" --include="*.tsx" --include="*.jsx" client/src/

# Find hardcoded color classes
grep -rn "bg-blue-\|text-white\|hover:bg-\|border-blue" --include="*.tsx" client/src/

# List files to update
echo "Files requiring button updates:" > button-updates.txt
find client/src -name "*.tsx" -o -name "*.jsx" | xargs grep -l "button\|Button" >> button-updates.txt
PHASE 5: UPDATE SPECIFIC COMPONENTS
Navigation Buttons
typescript// Replace navigation buttons with:
<Button
  variant="ghost"
  size="md"
  onClick={(e) => handleNavigation(item.href, e)}
  className={isActive(item.href) ? 'btn-primary' : ''}
>
  {item.name}
</Button>
User Dropdown
typescript// Replace dropdown items with:
<Button
  variant="ghost"
  size="sm"
  className="w-full justify-start"
  onClick={handleAction}
>
  <Icon className="mr-2 h-4 w-4" />
  {label}
</Button>
Filter Buttons
typescript// Replace filter button with:
<Button
  variant="secondary"
  size="sm"
  onClick={() => setShowFilters(!showFilters)}
  icon={<Filter size={16} />}
  className="relative"
>
  Filters
  {activeFilterCount > 0 && (
    <span className="absolute -top-2 -right-2 bg-blue-500 text-white text-xs rounded-full w-5 h-5 flex items-center justify-center">
      {activeFilterCount}
    </span>
  )}
</Button>
Dashboard Tab Buttons
typescript// Replace tab buttons with:
<Button
  variant={activeTab === tab.id ? 'primary' : 'ghost'}
  size="sm"
  onClick={() => setActiveTab(tab.id)}
  icon={tab.icon}
>
  {tab.label}
</Button>
PHASE 6: UPDATE TEXT COLORS THROUGHOUT
Apply these changes to improve readability:

Dashboard Cards:

css.dashboard-card {
  background: rgba(30, 41, 59, 0.6);
  border: 1px solid rgba(100, 116, 139, 0.2);
}

.dashboard-card h3 {
  color: var(--heading-primary);
}

.dashboard-card p {
  color: var(--text-secondary);
}

Profile Information:

css.profile-section h2 {
  color: var(--heading-primary);
  margin-bottom: 1.5rem;
}

.profile-label {
  color: var(--text-tertiary);
  font-size: 0.875rem;
  margin-bottom: 0.25rem;
}

.profile-value {
  color: var(--text-primary);
  font-size: 1rem;
}

Navigation Items:

css.nav-item {
  color: var(--text-secondary);
}

.nav-item:hover {
  color: var(--text-primary);
}

.nav-item.active {
  color: var(--text-accent);
}
PHASE 7: IMPORT STYLES
In client/src/index.css:
css/* Import new theme files */
@import './styles/button-theme.css';
@import './styles/typography.css';

/* Remove all old button styles and hardcoded colors */
PHASE 8: AUTOMATED REPLACEMENT SCRIPT
Create scripts/update-buttons.js:
javascriptconst fs = require('fs');
const path = require('path');
const glob = require('glob');

// Patterns to replace
const replacements = [
  // Old button classes to new
  { from: /className=".*bg-blue-500.*"/g, to: 'variant="primary"' },
  { from: /className=".*bg-gray-.*"/g, to: 'variant="secondary"' },
  { from: /className=".*hover:bg-blue.*"/g, to: 'variant="primary"' },
  
  // Text colors
  { from: /text-white(?!\w)/g, to: 'text-primary' },
  { from: /text-gray-400/g, to: 'text-secondary' },
  { from: /text-gray-500/g, to: 'text-tertiary' },
  { from: /text-blue-400/g, to: 'text-accent' },
];

// Process files
glob('client/src/**/*.{tsx,jsx}', (err, files) => {
  files.forEach(file => {
    let content = fs.readFileSync(file, 'utf8');
    let changed = false;
    
    replacements.forEach(({ from, to }) => {
      if (from.test(content)) {
        content = content.replace(from, to);
        changed = true;
      }
    });
    
    if (changed) {
      fs.writeFileSync(file, content);
      console.log(`Updated: ${file}`);
    }
  });
});
PHASE 9: VERIFICATION CHECKLIST
After implementation, verify:

 All navigation buttons use Button component
 User dropdown uses consistent button styles
 Filter buttons match theme
 Dashboard tabs use proper variants
 No hardcoded colors remain (bg-blue-500, etc.)
 Text is readable with proper contrast
 Hover states work consistently
 Focus states are visible
 Loading states display properly
 Disabled states are clear

PHASE 10: FINAL CLEANUP
bash# Remove all inline button styles
grep -rn "style=.*button" --include="*.tsx" client/src/

# Find remaining hardcoded colors
grep -rn "bg-\|text-\|border-" --include="*.tsx" client/src/ | grep -v "var(\|btn-\|text-"

# Verify Button component usage
grep -rn "<button" --include="*.tsx" client/src/ # Should be minimal
grep -rn "<Button" --include="*.tsx" client/src/ # Should be prevalent
This comprehensive update will:

Create a unified button theme across the entire site
Improve text readability with proper color hierarchy
Remove all hardcoded colors
Ensure consistent animations and interactions
Make the UI more accessible and easier to navigate"