REPLIT: CHECK AND FIX CURRENT DATABASE SCHEMA ISSUES
Based on the production logs, there are two critical database schema mismatches causing errors. Here's a comprehensive diagnostic and fix plan:

IMMEDIATE DIAGNOSTIC INSTRUCTIONS
1. Create Health Check Script
Create /server/scripts/check-schema-issues.ts:
typescriptimport { db } from '../db';
import { sql } from 'drizzle-orm';

async function checkSchemaIssues() {
  console.log('🔍 Checking for current schema issues...\n');
  
  const issues = [];
  
  try {
    // Check 1: Test products table for subcategory
    console.log('1. Testing products table schema...');
    try {
      await db.execute(sql`SELECT id, name, subcategory FROM products LIMIT 1`);
      console.log('✅ Subcategory column exists in products');
    } catch (error) {
      if (error.message.includes('column "subcategory" does not exist')) {
        console.log('❌ Subcategory column missing from products table');
        issues.push('products.subcategory');
      }
    }
    
    // Check 2: Test users table for street (address fields)
    console.log('\n2. Testing users table schema...');
    try {
      await db.execute(sql`SELECT id, email, street FROM users LIMIT 1`);
      console.log('✅ Street column exists in users');
    } catch (error) {
      if (error.message.includes('column "street" does not exist')) {
        console.log('❌ Street column missing from users table');
        issues.push('users.street');
      }
    }
    
    // Check 3: Verify actual columns in each table
    console.log('\n3. Actual database schema:');
    
    // Products columns
    const productCols = await db.execute(sql`
      SELECT column_name, data_type 
      FROM information_schema.columns 
      WHERE table_name = 'products' 
      ORDER BY ordinal_position
    `);
    console.log('\nProducts table columns:');
    productCols.rows.forEach(col => 
      console.log(`  - ${col.column_name} (${col.data_type})`)
    );
    
    // Users columns
    const userCols = await db.execute(sql`
      SELECT column_name, data_type 
      FROM information_schema.columns 
      WHERE table_name = 'users' 
      ORDER BY ordinal_position
    `);
    console.log('\nUsers table columns:');
    userCols.rows.forEach(col => 
      console.log(`  - ${col.column_name} (${col.data_type})`)
    );
    
    // Check if addresses table exists (might be separate)
    const addressTable = await db.execute(sql`
      SELECT EXISTS (
        SELECT FROM information_schema.tables 
        WHERE table_name = 'addresses'
      )
    `);
    
    if (addressTable.rows[0].exists) {
      console.log('\n✅ Addresses table exists (separate from users)');
      const addressCols = await db.execute(sql`
        SELECT column_name, data_type 
        FROM information_schema.columns 
        WHERE table_name = 'addresses' 
        ORDER BY ordinal_position
      `);
      console.log('\nAddresses table columns:');
      addressCols.rows.forEach(col => 
        console.log(`  - ${col.column_name} (${col.data_type})`)
      );
    }
    
    // Summary
    console.log('\n📊 SUMMARY:');
    if (issues.length === 0) {
      console.log('✅ No schema issues detected');
    } else {
      console.log(`❌ Found ${issues.length} schema issues:`);
      issues.forEach(issue => console.log(`  - ${issue}`));
    }
    
  } catch (error) {
    console.error('Schema check failed:', error);
  }
}

// Run the check
checkSchemaIssues();
2. Add Monitoring Endpoint
Add this to your Express routes:
typescript// /server/routes/health.ts
router.get('/api/health/schema-check', async (req, res) => {
  const results = {
    status: 'checking',
    issues: [],
    tables: {}
  };
  
  try {
    // Test products.subcategory
    try {
      await db.execute(sql`SELECT subcategory FROM products LIMIT 1`);
      results.tables['products.subcategory'] = 'exists';
    } catch (e) {
      results.tables['products.subcategory'] = 'missing';
      results.issues.push('products.subcategory column missing');
    }
    
    // Test users.street
    try {
      await db.execute(sql`SELECT street FROM users LIMIT 1`);
      results.tables['users.street'] = 'exists';
    } catch (e) {
      results.tables['users.street'] = 'missing';
      results.issues.push('users.street column missing');
    }
    
    // Check if using separate addresses table
    const addressCheck = await db.execute(sql`
      SELECT EXISTS (
        SELECT FROM information_schema.tables 
        WHERE table_name = 'addresses'
      )
    `);
    
    results.hasAddressesTable = addressCheck.rows[0].exists;
    results.status = results.issues.length === 0 ? 'healthy' : 'issues_found';
    
    res.json(results);
  } catch (error) {
    res.status(500).json({
      status: 'error',
      error: error.message
    });
  }
});
3. Fix Password Reset Street Error
The password reset is trying to access user address info. Update the password reset service:
typescript// /server/services/password-reset.service.ts

static async requestPasswordReset(email: string, ipAddress: string, userAgent: string) {
  try {
    // Fix: Only select columns that exist
    const [user] = await db
      .select({
        id: users.id,
        email: users.email,
        name: users.name,
        // Remove any address fields if they don't exist in users table
        // street: users.street, // REMOVE THIS
        // city: users.city,     // REMOVE THIS
        // state: users.state,   // REMOVE THIS
      })
      .from(users)
      .where(eq(users.email, email.toLowerCase()))
      .limit(1);
      
    // If you need address info, join with addresses table
    let userAddress = null;
    if (user) {
      const addresses = await db
        .select()
        .from(addressesTable)
        .where(eq(addressesTable.userId, user.id))
        .limit(1);
      userAddress = addresses[0] || null;
    }
    
    // Continue with password reset...
  } catch (error) {
    console.error('Password reset error:', error);
    throw error;
  }
}
4. Fix Featured Products Query
Update the products query to handle missing subcategory:
typescript// /server/storage/database.ts or relevant file

async getFeaturedProducts() {
  try {
    // Get column list dynamically
    const columnCheck = await db.execute(sql`
      SELECT column_name 
      FROM information_schema.columns 
      WHERE table_name = 'products'
    `);
    
    const hasSubcategory = columnCheck.rows.some(
      row => row.column_name === 'subcategory'
    );
    
    // Build query based on available columns
    const query = db
      .select({
        id: productsTable.id,
        name: productsTable.name,
        description: productsTable.description,
        price: productsTable.price,
        images: productsTable.images,
        category: productsTable.category,
        // Only include if exists
        ...(hasSubcategory ? { subcategory: productsTable.subcategory } : {}),
        featured: productsTable.featured,
        stock: productsTable.stock,
      })
      .from(productsTable)
      .where(eq(productsTable.featured, true))
      .limit(8);
      
    return await query;
  } catch (error) {
    console.error('Error fetching featured products:', error);
    return [];
  }
}
5. Create Migration Scripts
If columns are needed, create migrations:
For subcategory - /server/db/migrations/001_add_subcategory.sql:
sql-- Add subcategory to products if it doesn't exist
DO $$ 
BEGIN
  IF NOT EXISTS (
    SELECT 1 FROM information_schema.columns 
    WHERE table_name = 'products' AND column_name = 'subcategory'
  ) THEN
    ALTER TABLE products ADD COLUMN subcategory VARCHAR(100);
  END IF;
END $$;
For user addresses - /server/db/migrations/002_fix_user_addresses.sql:
sql-- Option 1: Add street to users table if needed
DO $$ 
BEGIN
  IF NOT EXISTS (
    SELECT 1 FROM information_schema.columns 
    WHERE table_name = 'users' AND column_name = 'street'
  ) THEN
    -- Check if addresses table exists
    IF EXISTS (
      SELECT 1 FROM information_schema.tables 
      WHERE table_name = 'addresses'
    ) THEN
      -- Addresses are in separate table, no action needed
      RAISE NOTICE 'Using separate addresses table';
    ELSE
      -- Add address columns to users
      ALTER TABLE users 
      ADD COLUMN street VARCHAR(255),
      ADD COLUMN city VARCHAR(100),
      ADD COLUMN state VARCHAR(50),
      ADD COLUMN zip VARCHAR(20),
      ADD COLUMN country VARCHAR(100) DEFAULT 'US';
    END IF;
  END IF;
END $$;
6. Add Startup Schema Validation
Add to your server startup:
typescript// /server/index.ts or main server file

async function validateSchema() {
  console.log('Validating database schema...');
  
  const schemaIssues = [];
  
  // Test critical queries
  const tests = [
    {
      name: 'Products subcategory',
      query: sql`SELECT subcategory FROM products LIMIT 1`
    },
    {
      name: 'User addresses',
      query: sql`SELECT id FROM users LIMIT 1`
    }
  ];
  
  for (const test of tests) {
    try {
      await db.execute(test.query);
    } catch (error) {
      if (error.code === '42703') { // Column does not exist
        schemaIssues.push(`${test.name}: ${error.message}`);
      }
    }
  }
  
  if (schemaIssues.length > 0) {
    console.warn('⚠️  Schema issues detected:');
    schemaIssues.forEach(issue => console.warn(`   - ${issue}`));
    console.warn('   Run migrations to fix these issues');
  } else {
    console.log('✅ Schema validation passed');
  }
}

// Call during startup
await validateSchema();
7. Run These Commands Now
Tell Replit to run these commands to check current status:
bash# 1. Check current errors in last hour
grep "does not exist" server.log | tail -20

# 2. Run schema check script
node server/scripts/check-schema-issues.js

# 3. Test the health endpoint
curl https://cleanandflip.com/api/health/schema-check

# 4. Check if errors are still occurring
curl -X POST https://cleanandflip.com/api/auth/forgot-password \
  -H "Content-Type: application/json" \
  -d '{"email": "test@example.com"}'
8. Permanent Fix Implementation Order

Immediate: Update queries to only use existing columns
Today: Run schema validation script to identify all issues
Then: Create and run migrations for needed columns
Finally: Update Drizzle schema to match database
Ongoing: Add schema validation to CI/CD pipeline

This comprehensive approach will identify if the issues are still happening and provide both immediate fixes and long-term solutions.