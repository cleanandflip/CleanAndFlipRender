here’s exactly what to hand Replit to finish the search UI: mobile-friendly, full-width on small screens, with a proper loading spinner while searches are “in flight.” This keeps your logic the same and just adds polish + a tiny status wire-up.

1) Add a lightweight “busy” signal to the search service
So the header input can show a spinner while results are loading (or while the debounce is pending).

src/lib/searchService.ts (extend existing)

ts
Copy
Edit
// add near the top
let busy = false;
const busySubs = new Set<() => void>();

export function setSearchBusy(next: boolean) {
  if (busy === next) return;
  busy = next;
  busySubs.forEach(fn => fn());
}

export function isSearchBusy() {
  return busy;
}

export function subscribeSearchBusy(fn: () => void) {
  busySubs.add(fn);
  return () => busySubs.delete(fn);
}

// export with the rest
export const searchService = {
  getQuery,
  setQuery,
  subscribe,
  // NEW:
  isBusy: isSearchBusy,
  setBusy: setSearchBusy,
  subscribeBusy: subscribeSearchBusy,
};
2) Tell the results layer to report loading state
Wherever you fetch/filter products (client or API), toggle the busy flag.
Two safe places:

Inside your data hook (e.g., useFetchProducts), or

Inside ProductsResults.tsx once you know loading.

src/components/products/ProductsResults.tsx (add an effect)

ts
Copy
Edit
import { searchService } from "@/lib/searchService";

// after you have { loading } from your fetcher:
React.useEffect(() => {
  searchService.setBusy(!!loading);
  return () => searchService.setBusy(false);
}, [loading]);
This drives the spinner in the header anytime the grid is fetching.

3) Upgrade the SearchBar: responsive + spinner + better clear
src/components/search/SearchBar.tsx (replace JSX return)

tsx
Copy
Edit
return (
  // container shrinks nicely in header rows, but is full-width on mobile
  <div className="relative flex items-center w-full sm:w-auto">
    <div className="relative flex items-center w-full">
      {/* leading icon */}
      <span aria-hidden className="pointer-events-none absolute left-3 top-1/2 -translate-y-1/2">
        <SearchIcon className="h-4 w-4 opacity-70" />
      </span>

      {/* input */}
      <input
        id={id}
        type="search"
        value={value}
        onChange={onChange}
        onKeyDown={onKeyDown}
        placeholder={placeholder}
        autoFocus={autoFocus}
        aria-label="Search products"
        className={[
          // RESPONSIVE WIDTH
          "h-10 w-full sm:w-[min(46vw,520px)] md:w-[420px] lg:w-[520px]",
          // padding to reserve icon + clear/spinner
          "pl-10 pr-10",
          // shape/typography (match buttons height/rounding)
          "rounded-lg text-sm",
          // theme tokens/classes (replace with your design tokens)
          "bg-header/70 border border-headerBorder",
          // focus & transitions
          "focus:ring-2 focus:ring-brand/60 focus:border-transparent",
          "placeholder:opacity-70 transition-colors"
        ].join(" ")}
      />

      {/* right-side cluster: spinner OR clear */}
      <div className="absolute right-2 top-1/2 -translate-y-1/2 flex items-center gap-1">
        {/* loading spinner when busy */}
        {searchService.isBusy() && (
          <svg
            className="h-4 w-4 animate-spin opacity-80"
            viewBox="0 0 24 24"
            aria-label="Searching"
          >
            <circle cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="3" fill="none" opacity="0.25" />
            <path d="M22 12a10 10 0 0 1-10 10" stroke="currentColor" strokeWidth="3" fill="none" />
          </svg>
        )}

        {/* clear button (shows only if there's text) */}
        {value && (
          <button
            type="button"
            onClick={clear}
            aria-label="Clear search"
            className="grid h-6 w-6 place-items-center rounded-md hover:opacity-90 focus:outline-none focus:ring-2 focus:ring-brand/60"
          >
            <span className="block leading-none text-base">×</span>
          </button>
        )}
      </div>
    </div>
  </div>
);
Wire the busy subscription so the spinner reacts instantly

Add this to the component’s effects:

tsx
Copy
Edit
// keep input value synced with URL
React.useEffect(() => {
  return searchService.subscribe(() => setValue(searchService.getQuery().q));
}, []);

// trigger re-render when busy changes
const [, force] = React.useReducer(x => x + 1, 0);
React.useEffect(() => searchService.subscribeBusy(force), []);
Optional: show spinner during debounce too

Right after setValue(next) in onChange, set busy true; and clear it when you flush:

ts
Copy
Edit
// inside onChange
searchService.setBusy(true);
flushRef.current = window.setTimeout(() => { commit(next); }, 300);

// inside commit() or when pressing Enter/Escape
searchService.setBusy(false); // the ProductsResults effect will set true again while real fetch runs
4) Make the header responsive around the field
Ensure the header’s right cluster lets the field go full-width on small screens, then tightens at sm+ breakpoints.

Header.tsx (right cluster wrapper)

tsx
Copy
Edit
<div className="flex items-center gap-3 w-full sm:w-auto">
  <div className="flex-1 sm:flex-none">
    <SearchBar />
  </div>
  <SignInButton />
  <CartButton />
</div>
On mobile: search fills the row; buttons sit to the right as space allows or wrap below depending on your header container.

On desktop: SearchBar uses fixed max widths (520px) and aligns with buttons.

5) Mobile polish (optional but recommended)
Add min-w-0 to header containers to prevent overflow.

If header height is tight on mobile, stack nav links and right cluster into two rows (flex-col gap-2 sm:flex-row on the outer header container).

Consider focusing the SearchBar when the user taps a dedicated small search icon on mobile (no extra logic; just inputRef.current?.focus()).

6) Quick acceptance checklist
 On mobile, the search field expands full-width and doesn’t collide with buttons.

 Leading icon is perfectly aligned; text isn’t overlapped.

 A spinner appears while debouncing and while results are fetching.

 Clear (×) button sits at the right and restores the home sections (on /) or resets the grid (on /products).

 Keyboard: Enter submits immediately; Esc clears and blurs.

 prefers-reduced-motion respected automatically (no extra animation added here).