Here's a prompt for Replit:

CRITICAL FIX: Wishlist System Completely Broken - Not Saving Anywhere
Issues:

Clicking wishlist button doesn't save items
No wishlist items appear in user profile
Developer dashboard shows no wishlist data
Zero synchronization across the platform

Complete Wishlist System Fix Required:
1. Fix Wishlist Button Component:
javascript// WishlistButton.jsx - Ensure it actually saves
const WishlistButton = ({ productId }) => {
  const { user, token } = useAuth();
  const [isWishlisted, setIsWishlisted] = useState(false);
  const [loading, setLoading] = useState(false);
  
  // Check if item is wishlisted on mount
  useEffect(() => {
    const checkWishlistStatus = async () => {
      if (!user) return;
      
      try {
        const response = await fetch('/api/wishlist/check', {
          method: 'POST',
          headers: {
            'Authorization': `Bearer ${token}`,
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({ productId })
        });
        
        const data = await response.json();
        setIsWishlisted(data.isWishlisted);
      } catch (error) {
        console.error('Error checking wishlist status:', error);
      }
    };
    
    checkWishlistStatus();
  }, [productId, user, token]);
  
  const handleWishlistToggle = async () => {
    if (!user) {
      // Show login modal
      alert('Please log in to save items to your wishlist');
      return;
    }
    
    setLoading(true);
    
    try {
      const method = isWishlisted ? 'DELETE' : 'POST';
      const response = await fetch('/api/wishlist', {
        method,
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ productId })
      });
      
      if (!response.ok) {
        throw new Error('Failed to update wishlist');
      }
      
      const data = await response.json();
      setIsWishlisted(!isWishlisted);
      
      // Show success feedback
      console.log(isWishlisted ? 'Removed from wishlist' : 'Added to wishlist');
      
      // Trigger global wishlist update
      window.dispatchEvent(new CustomEvent('wishlistUpdated', { 
        detail: { productId, action: isWishlisted ? 'remove' : 'add' } 
      }));
      
    } catch (error) {
      console.error('Wishlist error:', error);
      alert('Failed to update wishlist. Please try again.');
    } finally {
      setLoading(false);
    }
  };
  
  return (
    <button
      onClick={handleWishlistToggle}
      disabled={loading}
      className={`p-2 rounded-full transition-all ${
        isWishlisted 
          ? 'bg-red-500 text-white' 
          : 'bg-gray-200 hover:bg-gray-300'
      }`}
      aria-label={isWishlisted ? 'Remove from wishlist' : 'Add to wishlist'}
    >
      <Heart 
        size={20} 
        fill={isWishlisted ? 'white' : 'none'}
      />
    </button>
  );
};
2. Fix Backend API Endpoints:
javascript// Wishlist routes - ensure they work
// POST /api/wishlist - Add item
app.post('/api/wishlist', requireAuth, async (req, res) => {
  try {
    const { productId } = req.body;
    const userId = req.userId; // From auth middleware
    
    console.log('Adding to wishlist:', { userId, productId });
    
    // Check if already wishlisted
    const existing = await db
      .select()
      .from(wishlist)
      .where(and(
        eq(wishlist.userId, userId),
        eq(wishlist.productId, productId)
      ))
      .limit(1);
      
    if (existing.length > 0) {
      return res.json({ message: 'Already in wishlist', isWishlisted: true });
    }
    
    // Add to wishlist
    await db.insert(wishlist).values({
      id: generateId(),
      userId,
      productId,
      createdAt: new Date()
    });
    
    res.json({ success: true, message: 'Added to wishlist' });
  } catch (error) {
    console.error('Wishlist add error:', error);
    res.status(500).json({ error: 'Failed to add to wishlist' });
  }
});

// DELETE /api/wishlist - Remove item
app.delete('/api/wishlist', requireAuth, async (req, res) => {
  try {
    const { productId } = req.body;
    const userId = req.userId;
    
    await db
      .delete(wishlist)
      .where(and(
        eq(wishlist.userId, userId),
        eq(wishlist.productId, productId)
      ));
      
    res.json({ success: true, message: 'Removed from wishlist' });
  } catch (error) {
    console.error('Wishlist remove error:', error);
    res.status(500).json({ error: 'Failed to remove from wishlist' });
  }
});

// GET /api/users/me/wishlist - Get user's wishlist
app.get('/api/users/me/wishlist', requireAuth, async (req, res) => {
  try {
    const userId = req.userId;
    
    const wishlistItems = await db
      .select({
        id: wishlist.id,
        productId: wishlist.productId,
        createdAt: wishlist.createdAt,
        product: products
      })
      .from(wishlist)
      .leftJoin(products, eq(wishlist.productId, products.id))
      .where(eq(wishlist.userId, userId))
      .orderBy(desc(wishlist.createdAt));
      
    res.json(wishlistItems);
  } catch (error) {
    console.error('Get wishlist error:', error);
    res.status(500).json({ error: 'Failed to fetch wishlist' });
  }
});

// POST /api/wishlist/check - Check if item is wishlisted
app.post('/api/wishlist/check', requireAuth, async (req, res) => {
  try {
    const { productId } = req.body;
    const userId = req.userId;
    
    const item = await db
      .select()
      .from(wishlist)
      .where(and(
        eq(wishlist.userId, userId),
        eq(wishlist.productId, productId)
      ))
      .limit(1);
      
    res.json({ isWishlisted: item.length > 0 });
  } catch (error) {
    console.error('Check wishlist error:', error);
    res.status(500).json({ error: 'Failed to check wishlist' });
  }
});
3. Fix User Profile Wishlist Display:
javascript// UserProfile.jsx - Wishlist section
const UserWishlist = () => {
  const { token } = useAuth();
  const [wishlistItems, setWishlistItems] = useState([]);
  const [loading, setLoading] = useState(true);
  
  useEffect(() => {
    fetchWishlist();
    
    // Listen for wishlist updates
    const handleWishlistUpdate = () => {
      fetchWishlist();
    };
    
    window.addEventListener('wishlistUpdated', handleWishlistUpdate);
    return () => window.removeEventListener('wishlistUpdated', handleWishlistUpdate);
  }, []);
  
  const fetchWishlist = async () => {
    try {
      const response = await fetch('/api/users/me/wishlist', {
        headers: {
          'Authorization': `Bearer ${token}`
        }
      });
      
      if (response.ok) {
        const data = await response.json();
        setWishlistItems(data);
      }
    } catch (error) {
      console.error('Error fetching wishlist:', error);
    } finally {
      setLoading(false);
    }
  };
  
  const removeFromWishlist = async (productId) => {
    try {
      await fetch('/api/wishlist', {
        method: 'DELETE',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ productId })
      });
      
      // Update local state
      setWishlistItems(items => items.filter(item => item.productId !== productId));
      
      // Trigger global update
      window.dispatchEvent(new CustomEvent('wishlistUpdated', { 
        detail: { productId, action: 'remove' } 
      }));
    } catch (error) {
      console.error('Error removing from wishlist:', error);
    }
  };
  
  if (loading) return <div>Loading wishlist...</div>;
  
  return (
    <div>
      <h2 className="text-2xl font-bold mb-4">My Wishlist ({wishlistItems.length})</h2>
      
      {wishlistItems.length === 0 ? (
        <p className="text-gray-500">No items in your wishlist yet.</p>
      ) : (
        <div className="grid grid-cols-2 md:grid-cols-3 gap-4">
          {wishlistItems.map(item => (
            <div key={item.id} className="relative">
              <ProductCard product={item.product} />
              <button
                onClick={() => removeFromWishlist(item.productId)}
                className="absolute top-2 right-2 bg-white rounded-full p-2 shadow"
              >
                <X size={16} />
              </button>
            </div>
          ))}
        </div>
      )}
    </div>
  );
};
4. Fix Developer Dashboard Analytics:
javascript// Admin dashboard wishlist analytics
app.get('/api/admin/wishlist-analytics', requireAdmin, async (req, res) => {
  try {
    // Most wishlisted products
    const topWishlisted = await db
      .select({
        productId: wishlist.productId,
        productName: products.name,
        productImage: products.images,
        count: sql`count(distinct ${wishlist.userId})`.as('count')
      })
      .from(wishlist)
      .leftJoin(products, eq(wishlist.productId, products.id))
      .groupBy(wishlist.productId, products.name, products.images)
      .orderBy(desc(sql`count(distinct ${wishlist.userId})`))
      .limit(10);
    
    // Users with wishlist items
    const wishlistUsers = await db
      .select({
        userId: users.id,
        userName: users.name,
        userEmail: users.email,
        itemCount: sql`count(${wishlist.id})`.as('itemCount'),
        lastAdded: sql`max(${wishlist.createdAt})`.as('lastAdded')
      })
      .from(users)
      .leftJoin(wishlist, eq(users.id, wishlist.userId))
      .where(isNotNull(wishlist.id))
      .groupBy(users.id, users.name, users.email)
      .orderBy(desc(sql`count(${wishlist.id})`));
    
    // Total wishlist stats
    const stats = await db
      .select({
        totalItems: sql`count(*)`.as('totalItems'),
        uniqueUsers: sql`count(distinct ${wishlist.userId})`.as('uniqueUsers'),
        uniqueProducts: sql`count(distinct ${wishlist.productId})`.as('uniqueProducts')
      })
      .from(wishlist);
    
    res.json({
      topWishlisted,
      wishlistUsers,
      stats: stats[0]
    });
  } catch (error) {
    console.error('Wishlist analytics error:', error);
    res.status(500).json({ error: 'Failed to fetch wishlist analytics' });
  }
});

// Admin Dashboard Component
const WishlistAnalyticsDashboard = () => {
  const { data, loading } = useQuery({
    queryKey: ['admin', 'wishlist-analytics'],
    queryFn: () => fetch('/api/admin/wishlist-analytics').then(r => r.json())
  });
  
  if (loading) return <div>Loading...</div>;
  
  return (
    <div className="space-y-6">
      {/* Summary Stats */}
      <div className="grid grid-cols-3 gap-4">
        <div className="bg-white p-6 rounded-lg">
          <h3 className="text-sm text-gray-600">Total Wishlist Items</h3>
          <p className="text-2xl font-bold">{data.stats.totalItems}</p>
        </div>
        <div className="bg-white p-6 rounded-lg">
          <h3 className="text-sm text-gray-600">Users with Wishlists</h3>
          <p className="text-2xl font-bold">{data.stats.uniqueUsers}</p>
        </div>
        <div className="bg-white p-6 rounded-lg">
          <h3 className="text-sm text-gray-600">Products Wishlisted</h3>
          <p className="text-2xl font-bold">{data.stats.uniqueProducts}</p>
        </div>
      </div>
      
      {/* Most Wishlisted Products */}
      <div className="bg-white p-6 rounded-lg">
        <h3 className="text-lg font-semibold mb-4">Most Wishlisted Products</h3>
        {data.topWishlisted.map(item => (
          <div key={item.productId} className="flex items-center justify-between py-3 border-b">
            <div className="flex items-center gap-3">
              <img 
                src={item.productImage?.[0] || '/placeholder.jpg'} 
                className="w-12 h-12 object-cover rounded"
              />
              <span>{item.productName}</span>
            </div>
            <span className="font-medium">{item.count} users</span>
          </div>
        ))}
      </div>
      
      {/* Active Wishlist Users */}
      <div className="bg-white p-6 rounded-lg">
        <h3 className="text-lg font-semibold mb-4">Wishlist Users</h3>
        {data.wishlistUsers.map(user => (
          <div key={user.userId} className="py-3 border-b">
            <div className="flex justify-between">
              <div>
                <p className="font-medium">{user.userName}</p>
                <p className="text-sm text-gray-600">{user.userEmail}</p>
              </div>
              <div className="text-right">
                <p className="font-medium">{user.itemCount} items</p>
                <p className="text-sm text-gray-600">
                  Last added: {new Date(user.lastAdded).toLocaleDateString()}
                </p>
              </div>
            </div>
          </div>
        ))}
      </div>
    </div>
  );
};
5. Debug Logging:
javascript// Add to all wishlist operations
console.log('Wishlist Debug:', {
  action: 'add/remove/check',
  userId,
  productId,
  timestamp: new Date().toISOString()
});
Testing Checklist:

 User logs in successfully
 Click heart icon → Item saves to wishlist
 Heart icon shows filled state for wishlisted items
 Go to profile → See all wishlisted items
 Remove from wishlist → Updates everywhere
 Admin dashboard → Shows wishlist analytics
 Multiple users can wishlist same item
 Wishlist persists after logout/login

This is CRITICAL - users need working wishlists for the resale platform!