Here's a prompt for Replit to fix the edit product functionality:

Fix Edit Product - Not Loading Product Information
When clicking the edit button on a product, it should load that product's information into an editable form. Currently, this isn't working.
1. Fix the Edit Button Navigation
In the admin dashboard products table:
typescript// Make sure edit button navigates to correct URL with product ID
const handleEditProduct = (productId: string) => {
  navigate(`/admin/products/edit/${productId}`);
};

// In the table row actions:
<button onClick={() => handleEditProduct(product.id)}>
  <Edit className="h-4 w-4" />
</button>
2. Create/Fix the Product Edit Route
Add the route if missing:
typescript// In your main router
<Route path="/admin/products/edit/:id" component={ProductForm} />
<Route path="/admin/products/new" component={ProductForm} />
3. Fix ProductForm to Load Existing Product Data
typescriptimport { useParams, useLocation } from 'wouter';
import { useQuery, useMutation } from '@tanstack/react-query';
import { useEffect, useState } from 'react';

export function ProductForm() {
  const params = useParams();
  const productId = params?.id;
  const [, navigate] = useLocation();
  const isEditing = !!productId;
  
  // Form state
  const [formData, setFormData] = useState({
    name: '',
    description: '',
    price: '',
    category: '',
    quantity: 0,
    weight: '',
    images: [],
    status: 'active'
  });
  
  // Fetch existing product data if editing
  const { data: product, isLoading } = useQuery({
    queryKey: ['product', productId],
    queryFn: async () => {
      const res = await fetch(`/api/products/${productId}`, {
        credentials: 'include'
      });
      if (!res.ok) throw new Error('Failed to fetch product');
      return res.json();
    },
    enabled: isEditing // Only fetch if we have an ID
  });
  
  // Update form when product data loads
  useEffect(() => {
    if (product) {
      setFormData({
        name: product.name || '',
        description: product.description || '',
        price: product.price || '',
        category: product.category || '',
        quantity: product.quantity || 0,
        weight: product.weight || '',
        images: product.images || [],
        status: product.status || 'active'
      });
    }
  }, [product]);
  
  // Save mutation
  const saveMutation = useMutation({
    mutationFn: async (data) => {
      const url = isEditing 
        ? `/api/admin/products/${productId}` 
        : '/api/admin/products';
      const method = isEditing ? 'PUT' : 'POST';
      
      const res = await fetch(url, {
        method,
        headers: { 'Content-Type': 'application/json' },
        credentials: 'include',
        body: JSON.stringify(data)
      });
      
      if (!res.ok) throw new Error('Failed to save product');
      return res.json();
    },
    onSuccess: () => {
      alert(isEditing ? 'Product updated!' : 'Product created!');
      navigate('/admin');
    }
  });
  
  const handleSubmit = (e) => {
    e.preventDefault();
    saveMutation.mutate(formData);
  };
  
  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
  };
  
  if (isLoading) return <div>Loading product...</div>;
  
  return (
    <div className="max-w-2xl mx-auto p-6">
      <h1 className="text-2xl font-bold mb-6">
        {isEditing ? 'Edit Product' : 'Add New Product'}
      </h1>
      
      <form onSubmit={handleSubmit} className="space-y-4">
        <div>
          <label className="block text-sm font-medium mb-1">
            Product Name
          </label>
          <input
            type="text"
            name="name"
            value={formData.name}
            onChange={handleChange}
            className="w-full p-2 border rounded"
            required
          />
        </div>
        
        <div>
          <label className="block text-sm font-medium mb-1">
            Description
          </label>
          <textarea
            name="description"
            value={formData.description}
            onChange={handleChange}
            className="w-full p-2 border rounded"
            rows={4}
          />
        </div>
        
        <div className="grid grid-cols-2 gap-4">
          <div>
            <label className="block text-sm font-medium mb-1">
              Price
            </label>
            <input
              type="number"
              name="price"
              value={formData.price}
              onChange={handleChange}
              step="0.01"
              className="w-full p-2 border rounded"
              required
            />
          </div>
          
          <div>
            <label className="block text-sm font-medium mb-1">
              Quantity
            </label>
            <input
              type="number"
              name="quantity"
              value={formData.quantity}
              onChange={handleChange}
              className="w-full p-2 border rounded"
              required
            />
          </div>
        </div>
        
        <div className="grid grid-cols-2 gap-4">
          <div>
            <label className="block text-sm font-medium mb-1">
              Category
            </label>
            <select
              name="category"
              value={formData.category}
              onChange={handleChange}
              className="w-full p-2 border rounded"
              required
            >
              <option value="">Select Category</option>
              <option value="barbells">Barbells</option>
              <option value="plates">Plates</option>
              <option value="racks">Racks</option>
              <option value="benches">Benches</option>
              <option value="dumbbells">Dumbbells</option>
            </select>
          </div>
          
          <div>
            <label className="block text-sm font-medium mb-1">
              Weight (lbs)
            </label>
            <input
              type="number"
              name="weight"
              value={formData.weight}
              onChange={handleChange}
              step="0.1"
              className="w-full p-2 border rounded"
            />
          </div>
        </div>
        
        <div>
          <label className="block text-sm font-medium mb-1">
            Status
          </label>
          <select
            name="status"
            value={formData.status}
            onChange={handleChange}
            className="w-full p-2 border rounded"
          >
            <option value="active">Active</option>
            <option value="out_of_stock">Out of Stock</option>
            <option value="discontinued">Discontinued</option>
          </select>
        </div>
        
        <div className="flex gap-4 pt-6">
          <button
            type="submit"
            className="px-6 py-2 bg-blue-500 text-white rounded hover:bg-blue-600"
            disabled={saveMutation.isLoading}
          >
            {saveMutation.isLoading ? 'Saving...' : (isEditing ? 'Update Product' : 'Create Product')}
          </button>
          
          <button
            type="button"
            onClick={() => navigate('/admin')}
            className="px-6 py-2 bg-gray-500 text-white rounded hover:bg-gray-600"
          >
            Cancel
          </button>
        </div>
      </form>
    </div>
  );
}
4. Add Server Endpoint for Updating Products
javascript// Update product endpoint
app.put('/api/admin/products/:id', requireAdmin, async (req, res) => {
  try {
    const { id } = req.params;
    const {
      name,
      description,
      price,
      category,
      quantity,
      weight,
      status,
      images
    } = req.body;
    
    const result = await db.query(
      `UPDATE products 
       SET name = $1, description = $2, price = $3, category = $4, 
           quantity = $5, weight = $6, status = $7, images = $8,
           updated_at = NOW()
       WHERE id = $9
       RETURNING *`,
      [name, description, price, category, quantity, weight, status, images || [], id]
    );
    
    if (result.rows.length === 0) {
      return res.status(404).json({ error: 'Product not found' });
    }
    
    res.json(result.rows[0]);
  } catch (error) {
    console.error('Update product error:', error);
    res.status(500).json({ error: 'Failed to update product' });
  }
});
5. Ensure Navigation Works from Dashboard
In the admin dashboard where products are listed:
typescript// Make sure the edit button has correct onClick
<button
  onClick={() => navigate(`/admin/products/edit/${product.id}`)}
  className="p-2 hover:bg-gray-700 rounded"
  title="Edit product"
>
  <Edit className="h-4 w-4" />
</button>
Summary:

Edit button navigates to /admin/products/edit/{productId}
ProductForm component fetches product data when ID is present
Form populates with existing product data
Save button updates the product via PUT request
After save, redirects back to admin dashboard

Please implement these fixes to make the edit product functionality work properly.