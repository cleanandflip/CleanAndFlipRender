CRITICAL: Your Users Table is Missing the "street" Column
NEW ERROR DISCOVERED
[UserService] üî• Database error: error: column "street" does not exist
Your findUserByEmail function is trying to SELECT columns that don't exist in your database. This means your Drizzle schema file has address fields (street, city, state, zip) but your actual PostgreSQL database doesn't have these columns.
IMMEDIATE FIX REQUIRED
Step 1: Check What Columns You Actually Have
Run this SQL query RIGHT NOW to see what's in your users table:
sql-- This will show you ALL columns in your users table
SELECT column_name, data_type, is_nullable
FROM information_schema.columns 
WHERE table_name = 'users'
ORDER BY ordinal_position;
Step 2: Add ALL Missing Columns
Based on the error, your code expects these columns but they're missing. Add them:
sql-- Add address columns that your code is expecting
ALTER TABLE users ADD COLUMN IF NOT EXISTS street VARCHAR(255);
ALTER TABLE users ADD COLUMN IF NOT EXISTS city VARCHAR(255);
ALTER TABLE users ADD COLUMN IF NOT EXISTS state VARCHAR(100);
ALTER TABLE users ADD COLUMN IF NOT EXISTS zip VARCHAR(20);
ALTER TABLE users ADD COLUMN IF NOT EXISTS country VARCHAR(100);
ALTER TABLE users ADD COLUMN IF NOT EXISTS phone VARCHAR(50);
Step 3: Fix Your UserService.findUserByEmail Function
The problem is your findUserByEmail is doing SELECT * FROM users which tries to fetch ALL columns including ones that don't exist. You need to either:
OPTION A: Only select the columns you need (RECOMMENDED)
typescript// In your UserService.findUserByEmail function
const result = await db
  .select({
    id: users.id,
    email: users.email,
    password: users.password,
    name: users.name,
    role: users.role,
    createdAt: users.createdAt,
    // DON'T include address fields if you don't need them for password reset
  })
  .from(users)
  .where(sql`LOWER(TRIM(${users.email})) = ${normalizedEmail}`)
  .limit(1);
OPTION B: Fix your Drizzle schema to match your database
Check your server/db/schema.ts file. If it has these fields:
typescriptexport const users = pgTable('users', {
  id: serial('id').primaryKey(),
  email: text('email').notNull(),
  password: text('password'),
  name: text('name'),
  // THESE MIGHT BE CAUSING THE PROBLEM:
  street: text('street'),  // REMOVE or COMMENT OUT if not in database
  city: text('city'),      // REMOVE or COMMENT OUT if not in database
  state: text('state'),    // REMOVE or COMMENT OUT if not in database
  zip: text('zip'),        // REMOVE or COMMENT OUT if not in database
  // ... etc
});
Step 4: The CORRECT UserService for Password Reset
Here's what your UserService should look like to AVOID these errors:
typescriptexport class UserService {
  async findUserByEmail(email: string) {
    const normalizedEmail = email.trim().toLowerCase();
    console.log(`[UserService] Looking for: "${normalizedEmail}"`);
    
    try {
      // ONLY select fields that ACTUALLY EXIST
      const result = await db
        .select({
          id: users.id,
          email: users.email,
          password: users.password,
          name: users.name,
          role: users.role,
        })
        .from(users)
        .where(sql`LOWER(TRIM(${users.email})) = ${normalizedEmail}`)
        .limit(1);
      
      if (result.length > 0) {
        console.log(`[UserService] ‚úÖ Found user ID: ${result[0].id}`);
        return result[0];
      }
      
      console.log(`[UserService] ‚ùå No user found`);
      return null;
    } catch (error) {
      console.error('[UserService] Database error:', error);
      throw error;
    }
  }
}
Step 5: Complete Database Fix Script
Run this ENTIRE script to fix EVERYTHING at once:
sql-- 1. Add missing user columns (if your schema expects them)
ALTER TABLE users ADD COLUMN IF NOT EXISTS street VARCHAR(255);
ALTER TABLE users ADD COLUMN IF NOT EXISTS city VARCHAR(255);
ALTER TABLE users ADD COLUMN IF NOT EXISTS state VARCHAR(100);
ALTER TABLE users ADD COLUMN IF NOT EXISTS zip VARCHAR(20);
ALTER TABLE users ADD COLUMN IF NOT EXISTS country VARCHAR(100);
ALTER TABLE users ADD COLUMN IF NOT EXISTS phone VARCHAR(50);

-- 2. Fix products/categories columns from earlier errors
ALTER TABLE products ADD COLUMN IF NOT EXISTS subcategory VARCHAR(255);
ALTER TABLE categories ADD COLUMN IF NOT EXISTS image_url TEXT;

-- 3. Create/recreate password reset tokens table
DROP TABLE IF EXISTS password_reset_tokens CASCADE;
CREATE TABLE password_reset_tokens (
  id SERIAL PRIMARY KEY,
  user_id INTEGER NOT NULL REFERENCES users(id) ON DELETE CASCADE,
  token VARCHAR(255) NOT NULL UNIQUE,
  expires_at TIMESTAMP NOT NULL,
  used BOOLEAN DEFAULT FALSE,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  ip_address VARCHAR(45),
  user_agent TEXT
);

-- 4. Create all necessary indexes
CREATE INDEX IF NOT EXISTS idx_prt_token ON password_reset_tokens(token);
CREATE INDEX IF NOT EXISTS idx_prt_user_id ON password_reset_tokens(user_id);
CREATE UNIQUE INDEX IF NOT EXISTS idx_users_email_ci ON users(LOWER(TRIM(email)));

-- 5. Verify the user exists
SELECT id, email FROM users WHERE LOWER(email) = 'cleanandflipyt@gmail.com';
üéØ ROOT CAUSE ANALYSIS
Your problem is a SCHEMA MISMATCH:

Your Drizzle schema (server/db/schema.ts) defines columns that don't exist in your actual database
When you do SELECT * FROM users, it tries to select ALL columns defined in the schema
PostgreSQL throws an error because street column doesn't exist

QUICK FIX COMMAND
If you just want it to work RIGHT NOW without adding columns:
bash# Edit your schema file and comment out address fields:
# In server/db/schema.ts, comment out:
# // street: text('street'),
# // city: text('city'),
# // state: text('state'),
# // zip: text('zip'),
# // country: text('country'),
# // phone: text('phone'),

# Then rebuild your app
npm run build
VERIFICATION STEPS
After fixing, test with:
bash# 1. Check database structure
psql $DATABASE_URL -c "\\d users"

# 2. Test user lookup
psql $DATABASE_URL -c "SELECT id, email FROM users WHERE email ILIKE '%cleanandflip%'"

# 3. Test your password reset
curl -X POST http://localhost:3000/api/password-reset/request \
  -H "Content-Type: application/json" \
  -d '{"email":"cleanandflipyt@gmail.com"}'
The core issue is your code expects database columns that don't exist. Either add the columns to the database OR remove them from your schema file. Don't leave mismatched schemas!