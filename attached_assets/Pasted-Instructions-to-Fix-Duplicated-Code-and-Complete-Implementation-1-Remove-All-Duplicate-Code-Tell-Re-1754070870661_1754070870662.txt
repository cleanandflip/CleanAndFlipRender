Instructions to Fix Duplicated Code and Complete Implementation
1. Remove All Duplicate Code
Tell Replit to search for and remove these common duplication patterns:
bash# Search for duplicate function definitions
# Look for patterns like:
- Multiple definitions of the same route (e.g., two `/api/admin/submissions` endpoints)
- Duplicate component exports
- Repeated import statements
- Multiple instances of the same function/component
2. Clean Up Routes File
ts// server/routes.ts - Remove duplicates and organize

// At the TOP of the file, ensure imports are clean and not duplicated:
import { 
  eq, and, or, desc, asc, sql, count, ilike, inArray, between, gte, lte 
} from 'drizzle-orm';

// Remove any duplicate route definitions
// Keep only ONE instance of each route:
// ✅ KEEP: The most complete/recent version
// ❌ REMOVE: Older, simpler versions

// Example structure:
// 1. Authentication routes
// 2. Public routes  
// 3. User routes
// 4. Admin routes (including submissions)
// 5. Developer routes
// 6. Webhook routes

// At the END of the file, ensure there's only ONE:
export default app;
3. Fix Component Files
tsx// For any component file with duplicates:

// 1. Remove duplicate imports
// 2. Keep only ONE component definition
// 3. Remove any duplicate export statements
// 4. Clean up unused variables

// Example fix for SubmissionsManager.tsx:
// REMOVE any old implementations like:
// - Simple submission lists
// - Basic card displays
// - Old dashboard sections

// KEEP only the new comprehensive implementation
4. Specific Cleanup Instructions
bash# Tell Replit to execute these steps:

1. **In server/routes.ts:**
   - Search for "app.get('/api/admin/submissions'"
   - If found multiple times, keep ONLY the most complete version (with filtering, sorting, pagination)
   - Remove simpler versions

2. **In client/src/pages/admin/:**
   - Check for multiple submission-related components
   - Keep: SubmissionManager.tsx (the comprehensive one)
   - Remove: Any older/simpler submission components

3. **In client/src/pages/Dashboard.tsx:**
   - Remove any inline submission display code
   - Replace with link to the new SubmissionManager

4. **Check for duplicate helper functions:**
   - generateReferenceNumber
   - formatStatus
   - getStatusVariant
   - Keep only ONE instance of each

5. **Database queries:**
   - Remove any duplicate submission queries
   - Consolidate into the main endpoint
5. Complete Missing Implementations
tsx// Add these missing helper functions if not present:

// client/src/utils/submissionHelpers.ts
export function getStatusVariant(status: string) {
  const variants = {
    pending: 'warning',
    under_review: 'default', 
    accepted: 'success',
    declined: 'destructive',
    scheduled: 'secondary',
    completed: 'outline',
    cancelled: 'outline',
    rejected: 'destructive'
  };
  return variants[status] || 'default';
}

export function formatStatus(status: string) {
  return status
    .split('_')
    .map(word => word.charAt(0).toUpperCase() + word.slice(1))
    .join(' ');
}

export function getWeekStart() {
  const now = new Date();
  const dayOfWeek = now.getDay();
  const diff = now.getDate() - dayOfWeek + (dayOfWeek === 0 ? -6 : 1);
  return new Date(now.setDate(diff));
}

// server/utils/exportHelpers.ts
export function generateCSV(submissions: any[]) {
  const headers = [
    'Reference Number',
    'Equipment Name', 
    'Brand',
    'Condition',
    'Asking Price',
    'Status',
    'User Name',
    'Email',
    'Phone',
    'Created Date'
  ];
  
  const rows = submissions.map(s => [
    s.referenceNumber,
    s.equipmentName,
    s.brand,
    s.condition,
    s.askingPrice || 'Open',
    s.status,
    s.userName || '',
    s.userEmail || '',
    s.phoneNumber || '',
    new Date(s.createdAt).toLocaleDateString()
  ]);
  
  return [
    headers.join(','),
    ...rows.map(row => row.map(cell => `"${cell}"`).join(','))
  ].join('\n');
}
6. File Structure Cleanup
bash# Correct file structure:
client/
  src/
    pages/
      admin/
        SubmissionManager.tsx  # Main comprehensive component
        AdminDashboard.tsx     # Links to SubmissionManager
    components/
      admin/
        SubmissionsList.tsx    # List view component
        SubmissionsGrid.tsx    # Grid view component
        SubmissionDetailModal.tsx  # Detail modal
        SubmissionAnalytics.tsx    # Analytics component
    utils/
        submissionHelpers.ts   # Helper functions

server/
  routes.ts                    # ONE instance of each route
  utils/
    referenceGenerator.ts      # Reference number generation
    exportHelpers.ts          # CSV/PDF export functions
    emailService.ts           # Email notifications
7. Verification Steps
bash# Tell Replit to verify:

1. Search entire codebase for duplicate route definitions:
   grep -r "'/api/admin/submissions'" .

2. Check for multiple exports of the same component:
   grep -r "export.*SubmissionManager" .

3. Look for duplicate function definitions:
   grep -r "function generateReferenceNumber" .
   grep -r "function formatStatus" .

4. Ensure no conflicting imports:
   - Check that each file imports what it needs
   - Remove unused imports
8. Final Integration Check
tsx// In AdminDashboard.tsx, ensure it links to the new system:
import { Link } from 'wouter';

// In the dashboard
<Card className="p-6">
  <h3 className="text-lg font-semibold mb-4">Equipment Submissions</h3>
  <Link href="/admin/submissions">
    <Button className="w-full">
      Manage Submissions
    </Button>
  </Link>
</Card>

// In App.tsx, ensure route is defined:
<Route path="/admin/submissions" component={SubmissionManager} />
Instructions for Replit:

Start with routes.ts - Remove ALL duplicate route definitions
Clean component files - Keep only the latest implementations
Add missing helpers - Create the utility functions if they don't exist
Fix imports - Ensure no duplicate or missing imports
Test the flow - Navigate to admin dashboard → submissions to verify
Remove console.logs - Clean up any debug statements
Check for TypeScript errors - Fix any type issues

The goal is to have ONE clean implementation of the submission management system without any duplicate code or conflicting definitions.