Here's a prompt for Replit to add the Developer Dashboard:

Add Developer Dashboard to Navigation for Admin/Developer Users
Users with the "developer" or "admin" role need access to a Developer Dashboard. Currently, even users with the ADMIN badge can't see the developer dashboard option.
1. Add Developer Dashboard to Profile Dropdown
Update the profile dropdown to include the developer dashboard for authorized users:
jsx// In the navigation profile dropdown component
function ProfileDropdown({ user }) {
  const isAdmin = user.role === 'developer' || user.role === 'admin';
  
  return (
    <DropdownMenu>
      <DropdownMenuTrigger>
        <div className="flex items-center gap-2">
          <UserIcon />
          <span>{user.firstName} {user.lastName}</span>
          {isAdmin && <Badge>ADMIN</Badge>}
        </div>
      </DropdownMenuTrigger>
      
      <DropdownMenuContent>
        <DropdownMenuItem href="/dashboard">
          <UserIcon /> My Dashboard
        </DropdownMenuItem>
        
        <DropdownMenuItem href="/orders">
          <ShoppingBag /> Order History
        </DropdownMenuItem>
        
        {/* ADD THIS FOR ADMINS */}
        {isAdmin && (
          <>
            <DropdownMenuSeparator />
            <DropdownMenuItem href="/admin">
              <Settings /> Developer Dashboard
            </DropdownMenuItem>
          </>
        )}
        
        <DropdownMenuSeparator />
        
        <DropdownMenuItem onClick={signOut}>
          <LogOut /> Sign Out
        </DropdownMenuItem>
      </DropdownMenuContent>
    </DropdownMenu>
  );
}
2. Create the Developer Dashboard Page (/admin)
Create a comprehensive admin dashboard with all requested features:
jsx// pages/admin/index.jsx
function DeveloperDashboard() {
  return (
    <div className="admin-dashboard">
      <h1>Developer Dashboard</h1>
      
      {/* Quick Stats */}
      <div className="stats-grid">
        <StatCard title="Total Products" value={productCount} />
        <StatCard title="Total Users" value={userCount} />
        <StatCard title="Total Orders" value={orderCount} />
        <StatCard title="Revenue" value={revenue} />
      </div>
      
      {/* Navigation Tabs */}
      <Tabs defaultValue="products">
        <TabsList>
          <TabsTrigger value="products">Products</TabsTrigger>
          <TabsTrigger value="analytics">Analytics</TabsTrigger>
          <TabsTrigger value="users">Users</TabsTrigger>
          <TabsTrigger value="system">System</TabsTrigger>
        </TabsList>
        
        {/* Products Management */}
        <TabsContent value="products">
          <ProductManagement />
        </TabsContent>
        
        {/* Analytics */}
        <TabsContent value="analytics">
          <Analytics />
        </TabsContent>
        
        {/* User Management */}
        <TabsContent value="users">
          <UserManagement />
        </TabsContent>
        
        {/* System Settings */}
        <TabsContent value="system">
          <SystemSettings />
        </TabsContent>
      </Tabs>
    </div>
  );
}
3. Product Management Component
jsxfunction ProductManagement() {
  return (
    <div>
      <div className="flex justify-between mb-6">
        <h2>Product Management</h2>
        <Button onClick={() => navigate('/admin/products/new')}>
          + Add New Product
        </Button>
      </div>
      
      {/* Product List with Actions */}
      <Table>
        <TableHeader>
          <TableRow>
            <TableHead>Image</TableHead>
            <TableHead>Name</TableHead>
            <TableHead>Price</TableHead>
            <TableHead>Stock</TableHead>
            <TableHead>Status</TableHead>
            <TableHead>Actions</TableHead>
          </TableRow>
        </TableHeader>
        <TableBody>
          {products.map(product => (
            <TableRow key={product.id}>
              <TableCell>
                <img src={product.image} className="w-12 h-12" />
              </TableCell>
              <TableCell>{product.name}</TableCell>
              <TableCell>${product.price}</TableCell>
              <TableCell>{product.quantity}</TableCell>
              <TableCell>
                <Badge>{product.status}</Badge>
              </TableCell>
              <TableCell>
                <Button size="sm" onClick={() => editProduct(product.id)}>
                  Edit
                </Button>
                <Button size="sm" variant="destructive" onClick={() => deleteProduct(product.id)}>
                  Delete
                </Button>
              </TableCell>
            </TableRow>
          ))}
        </TableBody>
      </Table>
    </div>
  );
}
4. Analytics Component
jsxfunction Analytics() {
  return (
    <div>
      <h2>Website Analytics</h2>
      
      {/* Key Metrics */}
      <div className="metrics-grid">
        <MetricCard title="Page Views Today" value={pageViews} />
        <MetricCard title="Active Users" value={activeUsers} />
        <MetricCard title="Conversion Rate" value={conversionRate} />
        <MetricCard title="Avg Order Value" value={avgOrderValue} />
      </div>
      
      {/* Charts */}
      <div className="charts-grid">
        <Card>
          <CardHeader>Sales Over Time</CardHeader>
          <CardContent>
            <LineChart data={salesData} />
          </CardContent>
        </Card>
        
        <Card>
          <CardHeader>Top Products</CardHeader>
          <CardContent>
            <BarChart data={topProducts} />
          </CardContent>
        </Card>
      </div>
      
      {/* Recent Activity */}
      <Card>
        <CardHeader>Recent Activity</CardHeader>
        <CardContent>
          <ActivityFeed activities={recentActivities} />
        </CardContent>
      </Card>
    </div>
  );
}
5. User Management Component
jsxfunction UserManagement() {
  return (
    <div>
      <h2>User Management</h2>
      
      {/* User Search */}
      <SearchBar placeholder="Search users..." />
      
      {/* User List */}
      <Table>
        <TableHeader>
          <TableRow>
            <TableHead>Name</TableHead>
            <TableHead>Email</TableHead>
            <TableHead>Role</TableHead>
            <TableHead>Joined</TableHead>
            <TableHead>Orders</TableHead>
            <TableHead>Actions</TableHead>
          </TableRow>
        </TableHeader>
        <TableBody>
          {users.map(user => (
            <TableRow key={user.id}>
              <TableCell>{user.name}</TableCell>
              <TableCell>{user.email}</TableCell>
              <TableCell>
                <Select value={user.role} onChange={(role) => updateUserRole(user.id, role)}>
                  <SelectItem value="user">User</SelectItem>
                  <SelectItem value="developer">Developer</SelectItem>
                </Select>
              </TableCell>
              <TableCell>{formatDate(user.createdAt)}</TableCell>
              <TableCell>{user.orderCount}</TableCell>
              <TableCell>
                <Button size="sm">View</Button>
                <Button size="sm" variant="destructive">Block</Button>
              </TableCell>
            </TableRow>
          ))}
        </TableBody>
      </Table>
    </div>
  );
}
6. System Settings Component
jsxfunction SystemSettings() {
  return (
    <div>
      <h2>System Settings</h2>
      
      <div className="settings-sections">
        {/* Database Status */}
        <Card>
          <CardHeader>Database Status</CardHeader>
          <CardContent>
            <StatusIndicator status="healthy" />
            <p>Connected to Neon PostgreSQL</p>
            <p>Size: {dbSize} MB</p>
          </CardContent>
        </Card>
        
        {/* Error Logs */}
        <Card>
          <CardHeader>Recent Errors</CardHeader>
          <CardContent>
            <ErrorLog errors={recentErrors} />
          </CardContent>
        </Card>
        
        {/* Feature Flags */}
        <Card>
          <CardHeader>Feature Flags</CardHeader>
          <CardContent>
            <FeatureToggle name="SMS Notifications" enabled={features.sms} />
            <FeatureToggle name="Advanced Analytics" enabled={features.analytics} />
            <FeatureToggle name="AI Pricing" enabled={features.aiPricing} />
          </CardContent>
        </Card>
        
        {/* Backup */}
        <Card>
          <CardHeader>Backup & Export</CardHeader>
          <CardContent>
            <Button>Export Products CSV</Button>
            <Button>Export Users CSV</Button>
            <Button>Backup Database</Button>
          </CardContent>
        </Card>
      </div>
    </div>
  );
}
7. Protect Admin Routes
jsx// middleware or route protection
function AdminRoute({ children }) {
  const { user } = useAuth();
  
  if (!user || (user.role !== 'developer' && user.role !== 'admin')) {
    return <Navigate to="/" />;
  }
  
  return children;
}

// In routes
<Route path="/admin/*" element={
  <AdminRoute>
    <DeveloperDashboard />
  </AdminRoute>
} />
8. Add API Endpoints for Admin Functions
javascript// Admin-only API routes
app.get('/api/admin/stats', requireAdmin, async (req, res) => {
  const stats = await getAdminStats();
  res.json(stats);
});

app.get('/api/admin/users', requireAdmin, async (req, res) => {
  const users = await getAllUsers();
  res.json(users);
});

app.put('/api/admin/users/:id/role', requireAdmin, async (req, res) => {
  await updateUserRole(req.params.id, req.body.role);
  res.json({ success: true });
});

// Middleware
function requireAdmin(req, res, next) {
  if (!req.user || (req.user.role !== 'developer' && req.user.role !== 'admin')) {
    return res.status(403).json({ error: 'Admin access required' });
  }
  next();
}
Features to Include in Developer Dashboard:

✅ Product CRUD operations
✅ Real-time analytics
✅ User management with role assignment
✅ System health monitoring
✅ Error logs
✅ Database status
✅ Export functionality
✅ Feature flags
✅ Order management
✅ Revenue tracking

Please implement this complete developer dashboard accessible from the profile dropdown for admin users only