🚨 CRITICAL: The "street" Column Error is STILL HAPPENING!
THE REAL PROBLEM
Your compiled code (dist/index.js) is STILL using the OLD schema with address fields. Even if you added columns to the database, your BUILD IS OUTDATED.
IMMEDIATE FIX - DO THIS NOW!
Step 1: STOP THE SERVER
bash# Kill all Node processes
pkill node
# or press CTRL+C in your terminal
Step 2: Check Your Schema File RIGHT NOW
Open server/db/schema.ts (or shared/schema.ts) and look for the users table definition:
typescript// Find this section in your schema:
export const users = pgTable('users', {
  id: uuid('id').primaryKey(),
  email: text('email').notNull(),
  password: text('password'),
  firstName: text('first_name'),
  lastName: text('last_name'),
  
  // THESE ARE THE PROBLEM - COMMENT THEM OUT OR DELETE:
  street: text('street'),        // ← REMOVE OR COMMENT THIS
  city: text('city'),           // ← REMOVE OR COMMENT THIS  
  state: text('state'),         // ← REMOVE OR COMMENT THIS
  zipCode: text('zip_code'),    // ← REMOVE OR COMMENT THIS
  latitude: numeric('latitude'), // ← REMOVE OR COMMENT THIS
  longitude: numeric('longitude'), // ← REMOVE OR COMMENT THIS
  
  // Keep these:
  role: text('role'),
  createdAt: timestamp('created_at'),
  updatedAt: timestamp('updated_at'),
});
Step 3: OPTION A - Remove Address Fields (FASTEST FIX)
Edit your schema file and REMOVE or COMMENT OUT the address fields:
typescriptexport const users = pgTable('users', {
  id: uuid('id').primaryKey().defaultRandom(),
  email: text('email').notNull().unique(),
  password: text('password'),
  firstName: text('first_name'),
  lastName: text('last_name'),
  // street: text('street'),      // COMMENTED OUT
  // city: text('city'),          // COMMENTED OUT
  // state: text('state'),        // COMMENTED OUT
  // zipCode: text('zip_code'),   // COMMENTED OUT
  // latitude: numeric('latitude'), // COMMENTED OUT
  // longitude: numeric('longitude'), // COMMENTED OUT
  role: text('role').default('user'),
  createdAt: timestamp('created_at').defaultNow(),
  updatedAt: timestamp('updated_at').defaultNow(),
});
Step 3: OPTION B - Add Columns to Database (IF YOU NEED ADDRESSES)
If you actually NEED address fields, run this SQL:
sql-- Add all address columns
ALTER TABLE users ADD COLUMN IF NOT EXISTS street TEXT;
ALTER TABLE users ADD COLUMN IF NOT EXISTS city TEXT;
ALTER TABLE users ADD COLUMN IF NOT EXISTS state TEXT;
ALTER TABLE users ADD COLUMN IF NOT EXISTS zip_code TEXT;
ALTER TABLE users ADD COLUMN IF NOT EXISTS latitude NUMERIC(10,8);
ALTER TABLE users ADD COLUMN IF NOT EXISTS longitude NUMERIC(11,8);

-- Verify they were added
SELECT column_name FROM information_schema.columns 
WHERE table_name = 'users' AND column_name IN ('street', 'city', 'state', 'zip_code');
Step 4: REBUILD YOUR APPLICATION (CRITICAL!)
bash# DELETE the old build
rm -rf dist/

# Clear Node cache
rm -rf node_modules/.cache

# Rebuild the application
npm run build

# If no build script, try:
npx tsc
# or
npm run compile
Step 5: Fix Your UserService (Make it Bulletproof)
Edit server/services/user.service.ts and make the query EXPLICIT:
typescriptexport class UserService {
  async findUserByEmail(email: string) {
    const normalizedEmail = email.trim().toLowerCase();
    console.log(`[UserService] Looking for: "${normalizedEmail}"`);
    
    try {
      // EXPLICITLY select only columns that EXIST
      const result = await db
        .select({
          id: users.id,
          email: users.email,
          password: users.password,
          firstName: users.firstName,
          lastName: users.lastName,
          role: users.role,
          createdAt: users.createdAt,
          // DO NOT include address fields unless they exist!
        })
        .from(users)
        .where(sql`LOWER(TRIM(${users.email})) = ${normalizedEmail}`)
        .limit(1);
      
      if (result.length > 0) {
        console.log(`[UserService] ✅ Found user ID: ${result[0].id}`);
        return result[0];
      }
      
      return null;
    } catch (error) {
      console.error('[UserService] Database error:', error);
      throw error;
    }
  }
}
Step 6: RESTART THE SERVER
bash# Start fresh
npm run dev
# or
npm start
Step 7: TEST IMMEDIATELY
bashcurl -X POST http://localhost:5000/api/auth/forgot-password \
  -H "Content-Type: application/json" \
  -d '{"email":"cleanandflipyt@gmail.com"}'
🔥 EMERGENCY NUCLEAR OPTION
If NOTHING above works, do this:
bash# 1. Create a NEW simple users table
psql $DATABASE_URL << 'EOF'
-- Backup existing users
CREATE TABLE users_backup AS SELECT * FROM users;

-- Drop and recreate with ONLY essential columns
DROP TABLE users CASCADE;

CREATE TABLE users (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  email TEXT NOT NULL UNIQUE,
  password TEXT,
  first_name TEXT,
  last_name TEXT,
  role TEXT DEFAULT 'user',
  created_at TIMESTAMP DEFAULT NOW(),
  updated_at TIMESTAMP DEFAULT NOW()
);

-- Copy data back
INSERT INTO users (id, email, password, first_name, last_name, role, created_at, updated_at)
SELECT id, email, password, first_name, last_name, role, created_at, updated_at
FROM users_backup;

-- Create index
CREATE INDEX idx_users_email_lower ON users(LOWER(email));
EOF

# 2. Update your schema to match EXACTLY
# 3. Delete dist/ folder
# 4. Rebuild
# 5. Restart
WHY THIS IS STILL FAILING

Your dist/index.js is OUTDATED - It still has the old schema compiled in
Schema mismatch - Your TypeScript schema doesn't match your database
Build cache - Node/TypeScript might be using cached builds

VERIFICATION CHECKLIST
After fixing, confirm:
bash# 1. Check your compiled code no longer references 'street'
grep -n "street" dist/index.js

# 2. Verify database columns
psql $DATABASE_URL -c "\d users"

# 3. Test the lookup directly
psql $DATABASE_URL -c "SELECT id, email FROM users WHERE email = 'cleanandflipyt@gmail.com'"

# 4. Check if rebuild worked
ls -la dist/index.js
# Should show a recent timestamp
The key issue is your BUILD is outdated. You MUST rebuild after schema changes!