What the logs mean

GET /api/user 401 … userId: undefined → your request is hitting the API without a valid session. The route can’t see req.session.userId (or req.user), so it returns 401.

The 29-byte contentLength is just your JSON error ({"error":"Not authenticated"}), not a separate issue.

You’re seeing lots of rows in sessions because the server is creating a new session for anonymous hits (and/or the browser isn’t keeping the cookie), so every request looks like a new visitor.

Most likely root causes (ordered by likelihood)

Secure cookie not being set behind a proxy

If you set cookie.secure: true and don’t app.set('trust proxy', 1), Express won’t set the cookie → the browser never stores it → every request is “new” → 401 + tons of session rows.

Cookie not sent by the client

Your frontend calls /api/user without credentials:
fetch('/api/user', { credentials: 'include' }) or axios.get(..., { withCredentials: true }).

Cross-site cookie flags wrong (different web/API hosts)

Need sameSite: 'none', secure: true, and a shared domain: '.your-domain.com'.

Different SESSION_SECRET across instances

Each server rejects cookies from the others → endless new sessions + random 401s.

Session middleware not mounted (or mounted after the route) on the API server.

saveUninitialized: true

Creates a DB row for every anonymous request (bots, health checks). Not fatal by itself, but causes the “ton of sessions” symptom.

Quick fixes (minimum you should do)

Before routes:

app.set('trust proxy', 1); // required behind Vercel/Cloudflare/Nginx


Session config:

app.use(session({
  store: new PgSession({ pool, tableName: 'sessions', createTableIfMissing: true, ttl: 7*24*60*60 }),
  secret: process.env.SESSION_SECRET!,
  name: 'cf.sid',
  resave: false,
  saveUninitialized: false,         // <-- stop creating sessions for anonymous hits
  cookie: {
    httpOnly: true,
    secure: process.env.NODE_ENV === 'production',
    sameSite: process.env.NODE_ENV === 'production' ? 'none' : 'lax',
    domain: process.env.NODE_ENV === 'production' ? '.your-domain.com' : undefined,
    maxAge: 7*24*60*60*1000,
    path: '/'
  }
}));


Client calls must include credentials:

fetch('/api/user', { credentials: 'include' });
// or
axios.get('/api/user', { withCredentials: true });


Ensure one SESSION_SECRET everywhere.

Sanity checks (do these now)

Open DevTools → Network → your login response. Do you see Set-Cookie: cf.sid=…?

If it’s missing or flagged as “blocked”, it’s your cookie flags (secure/sameSite/domain) or missing trust proxy.

Call a tiny debug route:

app.get('/api/_debug/session', (req,res)=>res.json({
  id: req.sessionID,
  hasSession: !!req.session,
  userId: req.session?.userId ?? null,
  cookieHeader: req.headers.cookie ?? null
}));


If cookieHeader is null → client isn’t sending cookies.

If cookieHeader is present but userId null → you never set it on login or secrets don’t match.

Bottom line: the “issue” is session cookie flow. Fix trust proxy + cookie flags + saveUninitialized: false, make sure the client includes credentials, and use one SESSION_SECRET. That will stop the 401s and the explosion of session rows.