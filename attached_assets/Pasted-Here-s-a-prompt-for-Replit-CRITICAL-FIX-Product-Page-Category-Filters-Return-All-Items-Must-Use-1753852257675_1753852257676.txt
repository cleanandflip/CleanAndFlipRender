Here's a prompt for Replit:

CRITICAL FIX: Product Page Category Filters Return All Items - Must Use Same Categories as Homepage
Issue: Clicking category filters on /products page shows ALL products instead of filtering. The filters don't work.
Root Cause: Category filters on products page aren't connected to the actual filtering logic, and may be using a different category system than homepage.
Required Fix:
1. Use SINGLE Category Source:
javascript// DELETE any separate filter category lists
// BAD - Remove this:
const filterCategories = ['Footwear', 'Apparel', 'Equipment']; // ❌ DELETE

// GOOD - Use same categories as homepage:
const { data: categories } = useQuery({
  queryKey: ['categories'],
  queryFn: () => fetch('/api/categories').then(r => r.json())
});
2. Fix Products Page Filter Sidebar:
javascript// ProductFilters component
const ProductFilters = ({ currentFilters, onFilterChange }) => {
  // Use SAME categories as homepage
  const { data: categories } = useQuery({
    queryKey: ['categories', 'active'],
    queryFn: () => fetch('/api/categories?active=true').then(r => r.json())
  });
  
  const handleCategoryClick = (category) => {
    // CRITICAL: Update the filter state properly
    onFilterChange({
      ...currentFilters,
      categoryId: category.id, // Use category ID
      categorySlug: category.slug // Or slug, but be consistent!
    });
  };
  
  return (
    <div className="space-y-4">
      <div>
        <h3 className="font-semibold mb-2">Categories</h3>
        <div className="space-y-1">
          {/* "All" option */}
          <button
            onClick={() => handleCategoryClick({ id: null, slug: 'all' })}
            className={`block w-full text-left px-3 py-2 rounded ${
              !currentFilters.categoryId ? 'bg-black text-white' : 'hover:bg-gray-100'
            }`}
          >
            All Products
          </button>
          
          {/* Category options - SAME as homepage */}
          {categories?.map(category => (
            <button
              key={category.id}
              onClick={() => handleCategoryClick(category)}
              className={`block w-full text-left px-3 py-2 rounded ${
                currentFilters.categoryId === category.id 
                  ? 'bg-black text-white' 
                  : 'hover:bg-gray-100'
              }`}
            >
              {category.name}
              <span className="text-sm text-gray-500 ml-2">
                ({category.product_count})
              </span>
            </button>
          ))}
        </div>
      </div>
    </div>
  );
};
3. Fix Products Page Main Component:
javascriptconst ProductsPage = () => {
  const searchParams = useSearchParams();
  
  // Initialize filters from URL
  const [filters, setFilters] = useState({
    categoryId: searchParams.get('categoryId') || null,
    categorySlug: searchParams.get('category') || null,
    // other filters...
  });
  
  // Update URL when filters change
  useEffect(() => {
    const params = new URLSearchParams();
    
    // Only add non-null filters to URL
    Object.entries(filters).forEach(([key, value]) => {
      if (value !== null && value !== undefined && value !== '') {
        if (Array.isArray(value) && value.length > 0) {
          params.set(key, value.join(','));
        } else if (value) {
          params.set(key, value);
        }
      }
    });
    
    // Update URL without page reload
    window.history.pushState({}, '', `/products?${params.toString()}`);
  }, [filters]);
  
  // Fetch products with current filters
  const { data: products, isLoading } = useQuery({
    queryKey: ['products', filters],
    queryFn: async () => {
      const params = new URLSearchParams();
      
      // Add all active filters
      Object.entries(filters).forEach(([key, value]) => {
        if (value) params.set(key, value);
      });
      
      const response = await fetch(`/api/products?${params.toString()}`);
      return response.json();
    },
    staleTime: 0
  });
  
  return (
    <div className="flex gap-8">
      {/* Sidebar Filters */}
      <aside className="w-64">
        <ProductFilters 
          currentFilters={filters}
          onFilterChange={setFilters}
        />
      </aside>
      
      {/* Products Grid */}
      <main className="flex-1">
        {isLoading ? (
          <div>Loading...</div>
        ) : (
          <div className="grid grid-cols-3 gap-6">
            {products?.map(product => (
              <ProductCard key={product.id} product={product} />
            ))}
          </div>
        )}
        
        {products?.length === 0 && (
          <p className="text-center text-gray-500 mt-8">
            No products found in this category.
          </p>
        )}
      </main>
    </div>
  );
};
4. Fix API to Actually Filter:
javascriptapp.get('/api/products', async (req, res) => {
  try {
    const { categoryId, categorySlug, ...otherFilters } = req.query;
    
    // Start with base query
    let query = db.select().from(products).where(eq(products.isActive, true));
    
    // CRITICAL: Apply category filter
    if (categoryId && categoryId !== 'null') {
      console.log('Filtering by categoryId:', categoryId);
      query = query.where(eq(products.categoryId, categoryId));
    } else if (categorySlug && categorySlug !== 'all') {
      // Find category by slug
      const category = await db
        .select()
        .from(categories)
        .where(eq(categories.slug, categorySlug))
        .limit(1);
        
      if (category[0]) {
        console.log('Filtering by category slug:', categorySlug, '-> ID:', category[0].id);
        query = query.where(eq(products.categoryId, category[0].id));
      }
    }
    
    // Execute query
    const filteredProducts = await query;
    
    console.log(`Found ${filteredProducts.length} products for filters:`, req.query);
    
    res.json(filteredProducts);
  } catch (error) {
    console.error('Products API error:', error);
    res.status(500).json({ error: 'Failed to fetch products' });
  }
});
5. Remove Duplicate Category Systems:
javascript// Search for and DELETE:
// - Any hardcoded category arrays
// - Separate "filterCategories" or "productCategories"
// - Any category data not from the main categories table

// Everything should use:
const categories = await db.select().from(categories).where(eq(categories.isActive, true));
6. Debug Logging (temporary):
javascript// Add to help debug
console.log('Filter Debug:', {
  currentCategoryId: filters.categoryId,
  currentCategorySlug: filters.categorySlug,
  productCount: products?.length,
  rawFilters: filters
});
Testing Steps:

Go to /products - should show ALL products
Click "Footwear" in filters - should show ONLY footwear
Check URL changes to /products?categoryId=xxx
Click "Apparel" - should show ONLY apparel
Click "All Products" - should show everything again

The fix is making sure:

Same categories everywhere (homepage = products page filters)
Filter clicks actually update the query
API actually uses the category filter in the WHERE clause
No separate/duplicate category lists

This MUST work - customers need to filter products by category!