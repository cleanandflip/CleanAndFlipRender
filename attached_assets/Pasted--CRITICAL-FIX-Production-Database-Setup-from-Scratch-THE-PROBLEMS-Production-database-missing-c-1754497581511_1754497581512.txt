üö® CRITICAL FIX: Production Database Setup from Scratch
THE PROBLEMS:

Production database missing columns (street, city, state, etc.)
No users in production = Can't login
Address search broken = API configuration issue


üîß IMMEDIATE FIX: Complete Production Database Setup
STEP 1: Add ALL Missing Columns to Production Database
Run this SQL directly in your Neon Console ‚Üí SQL Editor on the PRODUCTION (neondb) database:
sql-- 1. ADD ALL ADDRESS COLUMNS TO USERS TABLE
ALTER TABLE users 
ADD COLUMN IF NOT EXISTS street VARCHAR(255),
ADD COLUMN IF NOT EXISTS city VARCHAR(100),
ADD COLUMN IF NOT EXISTS state VARCHAR(2),
ADD COLUMN IF NOT EXISTS zip_code VARCHAR(10),
ADD COLUMN IF NOT EXISTS latitude NUMERIC(10, 8),
ADD COLUMN IF NOT EXISTS longitude NUMERIC(11, 8),
ADD COLUMN IF NOT EXISTS phone VARCHAR(20),
ADD COLUMN IF NOT EXISTS country VARCHAR(100);

-- 2. ADD MISSING COLUMNS TO OTHER TABLES
ALTER TABLE products 
ADD COLUMN IF NOT EXISTS subcategory VARCHAR(255);

ALTER TABLE categories 
ADD COLUMN IF NOT EXISTS image_url TEXT;

-- 3. CREATE PASSWORD RESET TOKENS TABLE
CREATE TABLE IF NOT EXISTS password_reset_tokens (
  id SERIAL PRIMARY KEY,
  user_id UUID NOT NULL,
  token VARCHAR(255) UNIQUE,
  expires_at TIMESTAMP,
  used BOOLEAN DEFAULT FALSE,
  created_at TIMESTAMP DEFAULT NOW()
);

-- 4. CREATE INDEXES FOR PERFORMANCE
CREATE INDEX IF NOT EXISTS idx_users_email_lower ON users(LOWER(email));
CREATE INDEX IF NOT EXISTS idx_prt_token ON password_reset_tokens(token);
CREATE INDEX IF NOT EXISTS idx_prt_user_id ON password_reset_tokens(user_id);

-- 5. VERIFY COLUMNS WERE ADDED
SELECT column_name, data_type 
FROM information_schema.columns 
WHERE table_name = 'users' 
ORDER BY ordinal_position;

STEP 2: Create Initial Admin User
Run this in Neon SQL Editor on PRODUCTION database:
sql-- Create admin user with known password
-- Password: Admin123! (hashed with bcrypt)
INSERT INTO users (
  id,
  email,
  password,
  first_name,
  last_name,
  role,
  street,
  city,
  state,
  zip_code,
  created_at,
  updated_at
) VALUES (
  gen_random_uuid(),
  'cleanandflipyt@gmail.com',
  '$2b$12$YKxH5pPZtPy3FONm5vwJPO8MQNwpJhYbRr5dJh5pfPzRzE9nDcCGq', -- Admin123!
  'Admin',
  'User',
  'admin',
  '123 Main St',
  'Asheville',
  'NC',
  '28801',
  NOW(),
  NOW()
) ON CONFLICT (email) DO NOTHING;

-- Create a test user
INSERT INTO users (
  id,
  email,
  password,
  first_name,
  last_name,
  role,
  created_at,
  updated_at
) VALUES (
  gen_random_uuid(),
  'test@test.com',
  '$2b$12$YKxH5pPZtPy3FONm5vwJPO8MQNwpJhYbRr5dJh5pfPzRzE9nDcCGq', -- Admin123!
  'Test',
  'User',
  'user',
  NOW(),
  NOW()
) ON CONFLICT (email) DO NOTHING;

-- Verify users were created
SELECT id, email, role FROM users;

STEP 3: Add Initial Categories and Products
sql-- Add basic categories
INSERT INTO categories (id, name, slug, description, is_active, created_at)
VALUES 
  (gen_random_uuid(), 'Sports Equipment', 'sports-equipment', 'Athletic and fitness gear', true, NOW()),
  (gen_random_uuid(), 'Apparel', 'apparel', 'Clothing and accessories', true, NOW()),
  (gen_random_uuid(), 'Electronics', 'electronics', 'Electronic devices and accessories', true, NOW())
ON CONFLICT DO NOTHING;

-- Add sample products (optional)
INSERT INTO products (
  id, name, description, price, category_id, 
  quantity, is_active, slug, created_at
)
SELECT 
  gen_random_uuid(),
  'Sample Product - ' || c.name,
  'This is a sample product for testing',
  29.99,
  c.id,
  10,
  true,
  'sample-' || c.slug,
  NOW()
FROM categories c
LIMIT 3;

-- Verify
SELECT COUNT(*) as products FROM products;
SELECT COUNT(*) as categories FROM categories;

STEP 4: Fix Address Search (Geoapify)
In Replit, make sure your Secrets include:
env# Add this if missing
GEOAPIFY_API_KEY=your_geoapify_key_here

# Or if you're not using Geoapify anymore, disable it
DISABLE_ADDRESS_SEARCH=true
Update client/src/components/AddressAutocomplete.tsx (if it exists):
typescript// Check if API key exists
const GEOAPIFY_KEY = import.meta.env.VITE_GEOAPIFY_API_KEY;

if (!GEOAPIFY_KEY) {
  console.warn('Geoapify API key not configured');
  // Return a simple input instead of autocomplete
  return <input {...props} />;
}

STEP 5: Create Quick Fix Script
Create scripts/fix-production-completely.ts:
typescriptimport { neon } from '@neondatabase/serverless';
import bcrypt from 'bcryptjs';

async function fixProduction() {
  console.log('üîß FIXING PRODUCTION DATABASE COMPLETELY\n');
  
  // Use production database
  const prodUrl = process.env.DATABASE_URL?.replace('/development', '/neondb') || 
                  process.env.DATABASE_URL;
  
  const sql = neon(prodUrl!);
  
  try {
    // 1. Add all columns
    console.log('üìù Adding missing columns...');
    await sql`
      ALTER TABLE users 
      ADD COLUMN IF NOT EXISTS street VARCHAR(255),
      ADD COLUMN IF NOT EXISTS city VARCHAR(100),
      ADD COLUMN IF NOT EXISTS state VARCHAR(2),
      ADD COLUMN IF NOT EXISTS zip_code VARCHAR(10),
      ADD COLUMN IF NOT EXISTS latitude NUMERIC(10, 8),
      ADD COLUMN IF NOT EXISTS longitude NUMERIC(11, 8)
    `;
    console.log('‚úÖ Columns added');
    
    // 2. Create admin user
    console.log('\nüë§ Creating admin user...');
    const hashedPassword = await bcrypt.hash('Admin123!', 12);
    
    await sql`
      INSERT INTO users (
        id, email, password, first_name, last_name, role, created_at
      ) VALUES (
        gen_random_uuid(),
        'cleanandflipyt@gmail.com',
        ${hashedPassword},
        'Admin',
        'User',
        'admin',
        NOW()
      ) ON CONFLICT (email) DO UPDATE SET
        password = ${hashedPassword},
        role = 'admin'
    `;
    console.log('‚úÖ Admin user created/updated');
    console.log('   Email: cleanandflipyt@gmail.com');
    console.log('   Password: Admin123!');
    
    // 3. Verify
    const users = await sql`SELECT email, role FROM users`;
    console.log(`\n‚úÖ Production has ${users.length} users:`);
    users.forEach(u => console.log(`   - ${u.email} (${u.role})`));
    
  } catch (error) {
    console.error('‚ùå Error:', error);
  }
  
  process.exit(0);
}

fixProduction();
Run it:
bashnpx tsx scripts/fix-production-completely.ts

STEP 6: Update Your Schema File
Make sure server/db/schema.ts includes ALL columns:
typescriptexport const users = pgTable('users', {
  id: uuid('id').primaryKey().defaultRandom(),
  email: text('email').notNull().unique(),
  password: text('password'),
  firstName: text('first_name'),
  lastName: text('last_name'),
  role: text('role').default('user'),
  
  // ADDRESS FIELDS - MAKE SURE THESE EXIST
  street: text('street'),
  city: text('city'),
  state: text('state'),
  zipCode: text('zip_code'),
  latitude: numeric('latitude', { precision: 10, scale: 8 }),
  longitude: numeric('longitude', { precision: 11, scale: 8 }),
  phone: text('phone'),
  country: text('country'),
  
  createdAt: timestamp('created_at').defaultNow(),
  updatedAt: timestamp('updated_at').defaultNow(),
});

STEP 7: Restart and Test
bash# 1. Rebuild
npm run build

# 2. Restart server
# Server should restart automatically

# 3. Test login on production
# Go to cleanandflip.com/login
# Email: cleanandflipyt@gmail.com
# Password: Admin123!

‚úÖ VERIFICATION CHECKLIST
After running these fixes:

 Can login with cleanandflipyt@gmail.com / Admin123!
 Registration form doesn't error on address fields
 Password reset works
 No more "column does not exist" errors


üéØ KEY POINTS

Production database needs ALL columns that your code expects
You need at least one user to login
Address fields are optional but columns must exist
Password is Admin123! for the created admin user

Run the SQL commands in Step 1 & 2 RIGHT NOW in your Neon console to fix immediately!