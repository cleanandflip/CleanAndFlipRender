You’re getting ReferenceError: useWebSocketState is not defined because some admin components call the hook (and its members like subscribe) without importing/destructuring it. Below are precise, surgical edits Replit should apply — no new files, no new libs — only fixing current code.

1) Ensure the canonical hook exposes both APIs
File: client/src/hooks/useWebSocketState.tsx
(Append at the end if it’s not already there.)

ts
Copy
Edit
// Back-compat wrapper for legacy imports
export function useWebSocketReady(): boolean {
  const { ready } = useWebSocketState();
  return ready;
}
Do not add a default export. Keep the named export useWebSocketState.

2) Fix each component that uses the socket without importing/destructuring it
A) EnhancedProductModal (the error you reported)
File: client/src/components/admin/modals/EnhancedProductModal.tsx

Imports (top of file)

diff
Copy
Edit
- // remove any old socket imports like useSocket/useSingletonSocket/useWebSocket
- // e.g.  import { useSocket } from "@/hooks/useSingletonSocket";
- // or   import { useWebSocket } from "@/hooks/useWebSocket";
+ import { useWebSocketState, useWebSocketReady } from "@/hooks/useWebSocketState";
Inside the component function (near the top) add the destructure:

diff
Copy
Edit
- // nothing here previously or a legacy const { isConnected } = useSocket();
+ const { ready, subscribe, lastMessage, send } = useWebSocketState();
If the UI checks a connection flag, replace it:

diff
Copy
Edit
- isConnected
+ ready
If subscribe(...) is used anywhere, leave calls as-is now that it’s defined from the hook.
(If you had a bare subscribe(...) before, this fixes ReferenceError: subscribe is not defined.)

B) ProductsTab
File: client/src/pages/admin/ProductsTab.tsx

diff
Copy
Edit
- import { useSocket } from "@/hooks/useSingletonSocket"; // or any legacy import
+ import { useWebSocketState, useWebSocketReady } from "@/hooks/useWebSocketState";

- // legacy usage
- // subscribe("products", handler);
+ const { ready, subscribe, lastMessage, send } = useWebSocketState();

- isConnected
+ ready
This removes the earlier ReferenceError: subscribe is not defined you saw here.

C) UsersTab
File: client/src/pages/admin/UsersTab.tsx

diff
Copy
Edit
+ import { useWebSocketState, useWebSocketReady } from "@/hooks/useWebSocketState";

- // legacy: const { lastMessage } = ??? (or no import at all)
+ const { lastMessage, ready, subscribe, send } = useWebSocketState();

- lastMessage.data  // (keep your logic)
+ lastMessage?.data // optional, only if you were crashing on undefined (safe)
D) CategoriesTab
File: client/src/pages/admin/CategoriesTab.tsx

diff
Copy
Edit
+ import { useWebSocketState, useWebSocketReady } from "@/hooks/useWebSocketState";
+ const { ready, subscribe, lastMessage, send } = useWebSocketState();

- isConnected
+ ready
E) EnhancedCategoryModal / EnhancedUserModal
Files:

client/src/components/admin/modals/EnhancedCategoryModal.tsx

client/src/components/admin/modals/EnhancedUserModal.tsx

diff
Copy
Edit
+ import { useWebSocketState, useWebSocketReady } from "@/hooks/useWebSocketState";
+ const { ready, subscribe, lastMessage, send } = useWebSocketState();

- isConnected
+ ready
F) SubmissionsTab (remove dead import that Vite complained about)
File: client/src/pages/admin/SubmissionsTab.tsx

diff
Copy
Edit
- import { useSocket } from "@/hooks/useSingletonSocket.tsx";
- import { useWebSocketReady } from "@/hooks/useWebSocketState";
+ import { useWebSocketState, useWebSocketReady } from "@/hooks/useWebSocketState";

+ const { ready, subscribe, lastMessage, send } = useWebSocketState();
- isConnected
+ ready
3) One-time sanity sweep (Replit can run these)
Find any remaining legacy imports and fix them to the single source of truth:

bash
Copy
Edit
# Legacy socket imports
grep -RIn --include="*.ts*" -E "@/hooks/useSingletonSocket|@/hooks/useWebSocket([^S]|$)|useSocket\(" client/src

# Any file calling subscribe(...) without destructuring from our hook
grep -RIn --include="*.ts*" -E "([^.\w]|^)subscribe\(" client/src
For every hit:

Ensure the file has
import { useWebSocketState, useWebSocketReady } from "@/hooks/useWebSocketState";

Ensure inside the component you have
const { ready, subscribe, lastMessage, send } = useWebSocketState();

Replace isConnected → ready.

Do not add new providers or context. We’re only aligning all callers to the current hook.

4) What not to touch
404 page: leave your current 404 style and component exactly as-is (unchanged).

Routes / providers: don’t introduce new ones; keep the app structure intact.

5) Verify
Hard refresh (to clear Vite/HMR cache).

Open Admin → Products, Users, Categories, and open EnhancedProductModal.

Confirm there are no errors like:

useWebSocketState is not defined

subscribe is not defined

does not provide an export named 'useWebSocketReady'

If anything persists, it means one file still uses a legacy import or didn’t destructure the hook; re-run the two grep checks and fix the remaining hit(s).

That’s it — all current code uses the single modern hook, and the modal error goes away.