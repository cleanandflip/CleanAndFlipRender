Comprehensive Address System Verification Request for Replit
Overview
Please conduct a thorough review of all recent address system changes and ensure complete end-to-end functionality. Multiple fixes have been applied, but addresses are still not displaying in the user dashboard.
1. Database Verification
sql-- Check current database schema
SELECT column_name, data_type 
FROM information_schema.columns 
WHERE table_name = 'users' 
ORDER BY ordinal_position;

-- Verify test user has address data
SELECT id, email, street, city, state, zip_code, is_local_customer 
FROM users 
WHERE email IN ('test3@gmail.com', 'cleanandflipyt@gmail.com');

-- Check for any legacy columns that should be removed
SELECT column_name 
FROM information_schema.columns 
WHERE table_name = 'users' 
AND column_name IN ('address', 'cityStateZip', 'city_state_zip');
2. Backend Route Verification
Check for duplicate endpoints:
bash# Find ALL address-related endpoints
grep -rn "api/addresses" server/ --include="*.ts" --include="*.js"
grep -rn "api/user" server/ --include="*.ts" --include="*.js"

# Check for legacy address references
grep -rn "cityStateZip\|city_state_zip" server/ --include="*.ts"
Verify these endpoints exist and work:

GET /api/user - Returns user with address fields
GET /api/addresses - Returns array of addresses
POST /api/addresses - Creates new address
PUT /api/addresses/:id - Updates address
DELETE /api/addresses/:id - Deletes address

3. Authentication Flow Test
bash# Test complete authentication flow
# 1. Login
curl -X POST http://localhost:5000/api/login \
  -H "Content-Type: application/json" \
  -d '{"email":"test3@gmail.com","password":"password123"}' \
  -c cookies.txt -v

# 2. Check if authenticated
curl -X GET http://localhost:5000/api/user \
  -b cookies.txt -v

# 3. Fetch addresses
curl -X GET http://localhost:5000/api/addresses \
  -b cookies.txt -v
4. Frontend Integration Check
Verify these files are correctly updated:

Address Autocomplete Component (src/components/ui/address-autocomplete.tsx):

Geoapify API key is set in .env
Component properly parses addresses
Local customer detection works for Asheville zips


Dashboard Addresses Tab (src/pages/dashboard.tsx):

Correct API endpoint usage
Proper error handling
Loading states work
Empty state displays when no addresses


Registration Form (src/pages/auth.tsx):

AddressAutocomplete integrated
Form submission includes all address fields
Address saves to database on registration


API Client (src/lib/queryClient.ts):

Fix parameter order issue (method before URL)
Ensure credentials: 'include' is set



5. End-to-End Test Checklist

 New User Registration

Register new user with address autocomplete
Verify address saves to database
Check all fields (street, city, state, zip_code) are populated
Confirm is_local_customer flag is set for Asheville zips


 Existing User Address Display

Login as existing user with saved address
Navigate to dashboard â†’ Addresses tab
Verify address displays correctly
Check local customer badge shows if applicable


 Address Management

Add new address from dashboard
Edit existing address
Delete address
Set default address (if multiple)



6. Debug Logging Points
Add console.logs at these critical points:
typescript// server/routes.ts - GET /api/addresses
console.log("=== /api/addresses DEBUG ===");
console.log("1. Request user:", req.user);
console.log("2. Session:", req.session);
console.log("3. Is authenticated:", req.isAuthenticated?.());

// After database query
console.log("4. DB query result:", userWithAddress);
console.log("5. Formatted addresses:", addresses);

// Frontend - dashboard addresses tab
console.log("=== Frontend Address Fetch ===");
console.log("1. API response:", response);
console.log("2. Parsed data:", data);
console.log("3. State addresses:", addresses);
7. Common Issues to Check

Session/Cookie Issues:

Ensure credentials: 'include' in all fetch requests
Check session middleware is configured correctly
Verify cookies are being set and sent


Database Column Names:

Frontend uses zipCode but database might use zip_code
Ensure Drizzle schema matches actual database


Authentication Middleware:

requireAuth middleware is properly checking session
User object is attached to request


React Query Cache:

Clear cache if testing: queryClient.clear()
Check query keys are consistent



8. Final Verification Steps

Clear all browser data (cookies, localStorage)
Restart the server to ensure clean state
Run the test user flow:
bash# Create fresh test user
curl -X POST http://localhost:5000/api/auth/register \
  -H "Content-Type: application/json" \
  -d '{
    "email": "addresstest@example.com",
    "password": "Test123!",
    "firstName": "Address",
    "lastName": "Test",
    "street": "456 Test Street",
    "city": "Asheville",
    "state": "NC",
    "zipCode": "28806"
  }' -v

Check if address appears in dashboard

Expected Results

User can register with address autocomplete
Addresses save to database with all fields
Dashboard displays saved addresses
Local customer detection works for Asheville area
No errors in console or network tab

Please run through this complete verification and report which specific step fails. Include any error messages, console logs, and network responses for debugging.