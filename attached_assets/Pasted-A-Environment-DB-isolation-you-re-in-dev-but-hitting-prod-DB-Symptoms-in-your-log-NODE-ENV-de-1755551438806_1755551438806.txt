A) Environment & DB isolation (you’re in dev but hitting prod DB)

Symptoms in your log

NODE_ENV=development but [ENV] app=production

dbHost=ep-muddy-moon-... (prod) while running dev script

That means your env loader is letting dev connect to prod

A1) Replace the env loader with a single source of truth

File: server/config/env.ts (create/replace)

// server/config/env.ts
import * as dotenv from "dotenv";
dotenv.config();

const NODE_ENV = (process.env.NODE_ENV || "development").toLowerCase() as
  | "production" | "development" | "test";

// If APP_ENV is not set, derive it strictly from NODE_ENV.
// NO hostname magic; NO auto-detection.
const APP_ENV = (process.env.APP_ENV ||
  (NODE_ENV === "production" ? "production" : "development")) as
  | "production" | "development";

// Require both URLs, but we’ll pick by APP_ENV
const DEV_DATABASE_URL  = process.env.DEV_DATABASE_URL  || "";
const PROD_DATABASE_URL = process.env.PROD_DATABASE_URL || "";

if (!DEV_DATABASE_URL)  throw new Error("DEV_DATABASE_URL is required");
if (!PROD_DATABASE_URL) throw new Error("PROD_DATABASE_URL is required");

export const DATABASE_URL =
  APP_ENV === "production" ? PROD_DATABASE_URL : DEV_DATABASE_URL;

// Robust host extractor for postgres DSNs
export function dbHostFromUrl(dsn: string): string {
  try {
    const normalized = dsn.replace(/^postgresql:/, "postgres:");
    return new URL(normalized).hostname;
  } catch {
    const m = dsn.match(/@([^/?#:]+)[/:]/);
    return m?.[1] || "unknown";
  }
}

export const DEV_DB_HOST  = dbHostFromUrl(DEV_DATABASE_URL);
export const PROD_DB_HOST = dbHostFromUrl(PROD_DATABASE_URL);

// Optional: explicit hosts to assert at boot (else we assert from URLs)
export const EXPECTED_DB_HOST_DEV  =
  process.env.EXPECTED_DB_HOST_DEV  || DEV_DB_HOST;
export const EXPECTED_DB_HOST_PROD =
  process.env.EXPECTED_DB_HOST_PROD || PROD_DB_HOST;

export { NODE_ENV, APP_ENV };

A2) Enforce safety at boot

File: server/config/env-guard.ts (create/replace)

// server/config/env-guard.ts
import { APP_ENV, DATABASE_URL, DEV_DB_HOST, PROD_DB_HOST, dbHostFromUrl } from "./env";

export function assertEnvSafety() {
  const host = dbHostFromUrl(DATABASE_URL);
  console.log(`[ENV_GUARD] app=${APP_ENV} node=${process.env.NODE_ENV} dbHost=${host}`);

  if (APP_ENV === "development" && host === PROD_DB_HOST) {
    throw new Error(
      `ENV_GUARD: dev app is pointing at PROD DB (${host}). Refusing to start.`
    );
  }
  if (APP_ENV === "production" && host !== PROD_DB_HOST) {
    throw new Error(
      `ENV_GUARD: production app must point at PROD DB (${PROD_DB_HOST}) but got ${host}`
    );
  }
  console.log("✅ ENV_GUARD: ok");
}

A3) Call the guard before creating the DB pool / server

File: server/index.ts (near the top, before DB init)

import { assertEnvSafety } from "./config/env-guard";
assertEnvSafety();
// ... then import/init your DB client using DATABASE_URL from env.ts

A4) Package scripts must set APP_ENV explicitly

File: package.json

{
  "scripts": {
    "dev":   "APP_ENV=development NODE_ENV=development tsx server/index.ts",
    "build": "tsc -p tsconfig.json && vite build",
    "start": "APP_ENV=production  NODE_ENV=production  node dist/index.js"
  }
}

A5) Replit secrets (set these)

APP_ENV (leave blank in dev shell; script sets it)

DEV_DATABASE_URL=postgresql://neondb_owner:npg_AP5jRXLtS2mi@ep-lucky-poetry-aetqlg65-pooler.c-2.us-east-2.aws.neon.tech/neondb?sslmode=require&channel_binding=require

PROD_DATABASE_URL=postgresql://neondb_owner:npg_AP5jRXLtS2mi@ep-muddy-moon-aeggx6le-pooler.c-2.us-east-2.aws.neon.tech/neondb?sslmode=require

(optional) EXPECTED_DB_HOST_DEV=ep-lucky-poetry-aetqlg65-pooler.c-2.us-east-2.aws.neon.tech

(optional) EXPECTED_DB_HOST_PROD=ep-muddy-moon-aeggx6le-pooler.c-2.us-east-2.aws.neon.tech

Result: running npm run dev will always connect to lucky-poetry; npm start will always connect to muddy-moon. If someone mispoints, the app refuses to start.

B) Frontend build errors and warnings
B1) Vite pre-transform error: @/components/ui/select not found

You’re importing shadcn’s Select but the file isn’t present. Add it.

File: client/src/components/ui/select.tsx

import * as React from "react";
import * as SelectPrimitive from "@radix-ui/react-select";
import { Check, ChevronDown } from "lucide-react";
import { cn } from "@/lib/utils";

export const Select = SelectPrimitive.Root;
export const SelectGroup = SelectPrimitive.Group;
export const SelectValue = SelectPrimitive.Value;

export const SelectTrigger = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Trigger
    ref={ref}
    className={cn(
      "inline-flex h-10 w-full items-center justify-between rounded-md border px-3 py-2 text-sm shadow-sm focus:outline-none focus:ring-1 disabled:cursor-not-allowed disabled:opacity-50",
      className
    )}
    {...props}
  >
    {children}
    <SelectPrimitive.Icon asChild>
      <ChevronDown className="h-4 w-4 opacity-60" />
    </SelectPrimitive.Icon>
  </SelectPrimitive.Trigger>
));
SelectTrigger.displayName = SelectPrimitive.Trigger.displayName;

export const SelectContent = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Portal>
    <SelectPrimitive.Content
      ref={ref}
      className={cn(
        "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md",
        className
      )}
      {...props}
    >
      <SelectPrimitive.Viewport className="p-1">
        {children}
      </SelectPrimitive.Viewport>
    </SelectPrimitive.Content>
  </SelectPrimitive.Portal>
));
SelectContent.displayName = SelectPrimitive.Content.displayName;

export const SelectItem = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <SelectPrimitive.ItemIndicator>
        <Check className="h-3.5 w-3.5" />
      </SelectPrimitive.ItemIndicator>
    </span>
    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
  </SelectPrimitive.Item>
));
SelectItem.displayName = SelectPrimitive.Item.displayName;

export const SelectLabel = SelectPrimitive.Label;
export const SelectSeparator = SelectPrimitive.Separator;
export const SelectPortal = SelectPrimitive.Portal;
export const SelectScrollUpButton = SelectPrimitive.ScrollUpButton;
export const SelectScrollDownButton = SelectPrimitive.ScrollDownButton;
export const SelectArrow = SelectPrimitive.Arrow;


Dependencies (ensure installed):

npm i @radix-ui/react-select


If you already have shadcn/ui in the repo, the missing file was the issue; the alias @ is working (other imports resolve).

B2) Duplicate key warning in use-auth.tsx

Your log: Duplicate key "refetchOnWindowFocus" in object literal.

Open client/src/hooks/use-auth.tsx and make sure the options object passed to useQuery (or to your queryClient) sets each key once. Example:

useQuery({
  queryKey: ['user'],
  queryFn: fetchUser,
  staleTime: 2 * 60 * 1000,
  gcTime: 10 * 60 * 1000,
  refetchOnWindowFocus: false,  // keep only ONE of these
  refetchOnReconnect: false,
  refetchOnMount: true,
});


Search that file for another refetchOnWindowFocus: in the same object and remove it.

C) Noise & performance polish (optional but recommended)
C1) Slow-request “WARN” during dev

Your dev server is flagging first-load Vite requests as slow. Make the threshold configurable and higher in dev.

File: wherever you log slow requests (middleware)

const SLOW_MS = Number(process.env.SLOW_REQUEST_MS || (process.env.NODE_ENV === "production" ? 1200 : 4000));
// use SLOW_MS instead of a hard-coded 2000ms


Set SLOW_REQUEST_MS=4000 in your Replit dev Secrets if needed.

C2) Vite dev speed on Replit

Add a few prebundles so first-load is snappier.

File: client/vite.config.ts

import { defineConfig } from "vite";
import react from "@vitejs/plugin-react";

export default defineConfig({
  plugins: [react()],
  resolve: {
    alias: { "@": "/home/runner/workspace/client/src" }
  },
  optimizeDeps: {
    include: [
      "react",
      "react-dom",
      "@tanstack/react-query",
      "wouter",
      "lucide-react",
      "framer-motion"
    ]
  },
  server: {
    // helpful in some Replit workspaces
    host: "0.0.0.0",
    port: 5000
  }
});

C3) Cut log spam from “activity tracker” in dev

Change the activity endpoint log to debug in dev:

const logActivity = process.env.APP_ENV === "production" ? console.info : console.debug;
// use logActivity(...) instead of console.info in /api/track-activity handler

Final “Do this now” list for Replit

Replace server/config/env.ts and add server/config/env-guard.ts above.

Call assertEnvSafety() at the top of server/index.ts before DB init.

Set Replit Secrets: DEV_DATABASE_URL, PROD_DATABASE_URL (given), and optionally EXPECTED_DB_HOST_DEV, EXPECTED_DB_HOST_PROD.

Update package.json scripts as shown. Use npm run dev for preview; npm start for deploy.

Create client/src/components/ui/select.tsx and npm i @radix-ui/react-select.

Fix duplicate key in client/src/hooks/use-auth.tsx (only one refetchOnWindowFocus).

(Optional) Raise slow-request threshold and add Vite optimizeDeps.

Once (1–4) are in, dev will never talk to prod DB again; if anyone tries, boot will fail with a clear guard error. The frontend errors will clear after (5–6).