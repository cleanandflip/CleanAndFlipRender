Instructions to Implement Scalability Across All Developer Dashboard Tabs
1. Create a Unified Dashboard Layout Component
tsx// client/src/components/admin/DashboardLayout.tsx

import { ReactNode } from 'react';
import { Card } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Select } from '@/components/ui/select';
import { Search, Filter, Download, RefreshCw, Grid, List, ArrowUpDown } from 'lucide-react';

interface DashboardLayoutProps {
  title: string;
  description?: string;
  totalCount: number;
  searchPlaceholder: string;
  onSearch: (query: string) => void;
  onRefresh: () => void;
  onExport: (format: 'csv' | 'pdf') => void;
  filters: ReactNode;
  actions?: ReactNode;
  viewMode?: 'list' | 'grid' | 'both';
  currentView?: 'list' | 'grid';
  onViewChange?: (view: 'list' | 'grid') => void;
  sortOptions?: Array<{ value: string; label: string }>;
  onSort?: (sort: string) => void;
  children: ReactNode;
}

export function DashboardLayout({
  title,
  description,
  totalCount,
  searchPlaceholder,
  onSearch,
  onRefresh,
  onExport,
  filters,
  actions,
  viewMode = 'list',
  currentView = 'list',
  onViewChange,
  sortOptions,
  onSort,
  children
}: DashboardLayoutProps) {
  const [showFilters, setShowFilters] = useState(false);
  const [searchQuery, setSearchQuery] = useState('');

  return (
    <div className="min-h-screen bg-gray-900">
      {/* Header */}
      <div className="border-b border-gray-800 bg-gray-900/50 backdrop-blur sticky top-0 z-40">
        <div className="px-6 py-4">
          <div className="flex items-center justify-between">
            <div>
              <h1 className="text-2xl font-bold">{title}</h1>
              {description && (
                <p className="text-gray-400 mt-1">{description}</p>
              )}
            </div>
            
            <div className="flex items-center gap-3">
              {actions}
              <Button
                variant="outline"
                size="sm"
                onClick={onRefresh}
                className="gap-2"
              >
                <RefreshCw className="w-4 h-4" />
                Refresh
              </Button>
              
              <DropdownMenu>
                <DropdownMenuTrigger asChild>
                  <Button variant="outline" size="sm" className="gap-2">
                    <Download className="w-4 h-4" />
                    Export
                  </Button>
                </DropdownMenuTrigger>
                <DropdownMenuContent>
                  <DropdownMenuItem onClick={() => onExport('csv')}>
                    Export as CSV
                  </DropdownMenuItem>
                  <DropdownMenuItem onClick={() => onExport('pdf')}>
                    Export as PDF
                  </DropdownMenuItem>
                </DropdownMenuContent>
              </DropdownMenu>
            </div>
          </div>
          
          {/* Search and Filters Bar */}
          <div className="flex items-center gap-4 mt-4">
            <div className="relative flex-1 max-w-md">
              <Search className="absolute left-3 top-1/2 -translate-y-1/2 w-4 h-4 text-gray-400" />
              <Input
                placeholder={searchPlaceholder}
                value={searchQuery}
                onChange={(e) => {
                  setSearchQuery(e.target.value);
                  onSearch(e.target.value);
                }}
                className="pl-10"
              />
            </div>
            
            <Button
              variant="outline"
              onClick={() => setShowFilters(!showFilters)}
              className="gap-2"
            >
              <Filter className="w-4 h-4" />
              Filters
              {/* Add active filter indicator */}
            </Button>
            
            {/* View Toggle */}
            {viewMode === 'both' && (
              <div className="flex items-center gap-1 bg-gray-800 rounded-lg p-1">
                <Button
                  variant={currentView === 'list' ? 'secondary' : 'ghost'}
                  size="sm"
                  onClick={() => onViewChange?.('list')}
                >
                  <List className="w-4 h-4" />
                </Button>
                <Button
                  variant={currentView === 'grid' ? 'secondary' : 'ghost'}
                  size="sm"
                  onClick={() => onViewChange?.('grid')}
                >
                  <Grid className="w-4 h-4" />
                </Button>
              </div>
            )}
            
            {/* Sort Options */}
            {sortOptions && (
              <Select onValueChange={onSort}>
                <SelectTrigger className="w-[180px]">
                  <ArrowUpDown className="w-4 h-4 mr-2" />
                  <SelectValue placeholder="Sort by..." />
                </SelectTrigger>
                <SelectContent>
                  {sortOptions.map((option) => (
                    <SelectItem key={option.value} value={option.value}>
                      {option.label}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            )}
          </div>
          
          {/* Filters Section */}
          {showFilters && (
            <div className="mt-4 p-4 bg-gray-800/50 rounded-lg">
              {filters}
            </div>
          )}
        </div>
      </div>
      
      {/* Main Content */}
      <div className="p-6">
        {children}
      </div>
    </div>
  );
}
2. Scalable Products Management
tsx// client/src/pages/admin/ProductsManager.tsx

export function ProductsManager() {
  const [filters, setFilters] = useState({
    search: '',
    category: 'all',
    status: 'all',
    priceRange: { min: 0, max: 10000 },
    sortBy: 'name',
    sortOrder: 'asc',
    page: 1,
    limit: 20
  });
  
  const [selectedProducts, setSelectedProducts] = useState<Set<string>>(new Set());
  const [viewMode, setViewMode] = useState<'list' | 'grid'>('list');
  
  const { data: products, isLoading, refetch } = useQuery({
    queryKey: ['admin-products', filters],
    queryFn: async () => {
      const params = new URLSearchParams({
        ...filters,
        priceMin: filters.priceRange.min.toString(),
        priceMax: filters.priceRange.max.toString()
      });
      const res = await fetch(`/api/admin/products?${params}`);
      return res.json();
    }
  });
  
  const handleBulkAction = async (action: string) => {
    const confirmActions = {
      delete: 'delete these products',
      deactivate: 'deactivate these products',
      duplicate: 'duplicate these products',
      export: 'export these products'
    };
    
    if (confirm(`Are you sure you want to ${confirmActions[action]}?`)) {
      await fetch('/api/admin/products/bulk', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ action, productIds: Array.from(selectedProducts) })
      });
      refetch();
    }
  };
  
  return (
    <DashboardLayout
      title="Product Management"
      description="Manage your Clean & Flip inventory"
      totalCount={products?.total || 0}
      searchPlaceholder="Search products by name, SKU, or category..."
      onSearch={(query) => setFilters({ ...filters, search: query, page: 1 })}
      onRefresh={refetch}
      onExport={handleExport}
      viewMode="both"
      currentView={viewMode}
      onViewChange={setViewMode}
      sortOptions={[
        { value: 'name-asc', label: 'Name A-Z' },
        { value: 'name-desc', label: 'Name Z-A' },
        { value: 'price-asc', label: 'Price Low to High' },
        { value: 'price-desc', label: 'Price High to Low' },
        { value: 'stock-asc', label: 'Stock Low to High' },
        { value: 'created-desc', label: 'Newest First' }
      ]}
      onSort={(value) => {
        const [sortBy, sortOrder] = value.split('-');
        setFilters({ ...filters, sortBy, sortOrder });
      }}
      filters={
        <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
          <Select
            value={filters.category}
            onValueChange={(v) => setFilters({ ...filters, category: v })}
          >
            <SelectTrigger>
              <SelectValue placeholder="All Categories" />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="all">All Categories</SelectItem>
              <SelectItem value="barbells">Barbells</SelectItem>
              <SelectItem value="plates">Plates</SelectItem>
              <SelectItem value="dumbbells">Dumbbells</SelectItem>
              {/* Add more categories */}
            </SelectContent>
          </Select>
          
          <Select
            value={filters.status}
            onValueChange={(v) => setFilters({ ...filters, status: v })}
          >
            <SelectTrigger>
              <SelectValue placeholder="All Statuses" />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="all">All Statuses</SelectItem>
              <SelectItem value="in-stock">In Stock</SelectItem>
              <SelectItem value="low-stock">Low Stock</SelectItem>
              <SelectItem value="out-of-stock">Out of Stock</SelectItem>
            </SelectContent>
          </Select>
          
          <div className="flex gap-2">
            <Input
              type="number"
              placeholder="Min price"
              value={filters.priceRange.min}
              onChange={(e) => setFilters({
                ...filters,
                priceRange: { ...filters.priceRange, min: Number(e.target.value) }
              })}
            />
            <Input
              type="number"
              placeholder="Max price"
              value={filters.priceRange.max}
              onChange={(e) => setFilters({
                ...filters,
                priceRange: { ...filters.priceRange, max: Number(e.target.value) }
              })}
            />
          </div>
          
          <Button variant="outline" onClick={() => setFilters(defaultFilters)}>
            Clear Filters
          </Button>
        </div>
      }
      actions={
        <Button className="gap-2">
          <Plus className="w-4 h-4" />
          Add Product
        </Button>
      }
    >
      {/* Bulk Actions */}
      {selectedProducts.size > 0 && (
        <div className="mb-4 p-4 bg-blue-900/20 border border-blue-700 rounded-lg flex items-center justify-between">
          <p className="text-blue-300">
            {selectedProducts.size} product{selectedProducts.size > 1 ? 's' : ''} selected
          </p>
          <div className="flex gap-2">
            <Button
              variant="outline"
              size="sm"
              onClick={() => handleBulkAction('duplicate')}
            >
              Duplicate
            </Button>
            <Button
              variant="outline"
              size="sm"
              onClick={() => handleBulkAction('deactivate')}
            >
              Deactivate
            </Button>
            <Button
              variant="destructive"
              size="sm"
              onClick={() => handleBulkAction('delete')}
            >
              Delete
            </Button>
          </div>
        </div>
      )}
      
      {/* Products Display */}
      {viewMode === 'list' ? (
        <ProductsList
          products={products?.data || []}
          selectedProducts={selectedProducts}
          onSelectProduct={(id) => {
            const newSelected = new Set(selectedProducts);
            if (newSelected.has(id)) {
              newSelected.delete(id);
            } else {
              newSelected.add(id);
            }
            setSelectedProducts(newSelected);
          }}
        />
      ) : (
        <ProductsGrid
          products={products?.data || []}
          selectedProducts={selectedProducts}
          onSelectProduct={(id) => {
            const newSelected = new Set(selectedProducts);
            if (newSelected.has(id)) {
              newSelected.delete(id);
            } else {
              newSelected.add(id);
            }
            setSelectedProducts(newSelected);
          }}
        />
      )}
      
      {/* Pagination Component */}
      <Pagination
        currentPage={filters.page}
        totalPages={Math.ceil((products?.total || 0) / filters.limit)}
        onPageChange={(page) => setFilters({ ...filters, page })}
      />
    </DashboardLayout>
  );
}
3. Scalable Category Management
tsx// client/src/pages/admin/CategoryManager.tsx

export function CategoryManager() {
  const [filters, setFilters] = useState({
    search: '',
    sortBy: 'order',
    sortOrder: 'asc'
  });
  
  const { data: categories, refetch } = useQuery({
    queryKey: ['admin-categories', filters],
    queryFn: async () => {
      const res = await fetch('/api/admin/categories');
      return res.json();
    }
  });
  
  const reorderCategories = useMutation({
    mutationFn: async (reorderedCategories) => {
      const res = await fetch('/api/admin/categories/reorder', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ categories: reorderedCategories })
      });
      return res.json();
    },
    onSuccess: () => refetch()
  });
  
  return (
    <DashboardLayout
      title="Category Management"
      description="Organize your product categories"
      totalCount={categories?.length || 0}
      searchPlaceholder="Search categories..."
      onSearch={(query) => setFilters({ ...filters, search: query })}
      onRefresh={refetch}
      onExport={handleExport}
      filters={
        <div className="flex items-center justify-between">
          <p className="text-sm text-gray-400">
            Drag and drop categories to reorder them
          </p>
          <Button
            variant="outline"
            size="sm"
            onClick={() => setFilters({ ...filters, search: '' })}
          >
            Clear Search
          </Button>
        </div>
      }
      actions={
        <Button className="gap-2">
          <Plus className="w-4 h-4" />
          Add Category
        </Button>
      }
    >
      <DndContext
        sensors={sensors}
        collisionDetection={closestCenter}
        onDragEnd={handleDragEnd}
      >
        <SortableContext
          items={categories?.map(c => c.id) || []}
          strategy={verticalListSortingStrategy}
        >
          <div className="space-y-2">
            {categories?.map((category) => (
              <SortableCategoryItem
                key={category.id}
                category={category}
                onEdit={handleEdit}
                onDelete={handleDelete}
              />
            ))}
          </div>
        </SortableContext>
      </DndContext>
    </DashboardLayout>
  );
}
4. Enhanced Analytics Dashboard
tsx// client/src/pages/admin/AnalyticsManager.tsx

export function AnalyticsManager() {
  const [dateRange, setDateRange] = useState({
    from: subDays(new Date(), 30),
    to: new Date()
  });
  const [metric, setMetric] = useState('revenue');
  const [groupBy, setGroupBy] = useState('day');
  
  const { data: analytics } = useQuery({
    queryKey: ['admin-analytics', dateRange, metric, groupBy],
    queryFn: async () => {
      const params = new URLSearchParams({
        from: dateRange.from.toISOString(),
        to: dateRange.to.toISOString(),
        metric,
        groupBy
      });
      const res = await fetch(`/api/admin/analytics?${params}`);
      return res.json();
    }
  });
  
  return (
    <DashboardLayout
      title="Analytics"
      description="Track your business performance"
      totalCount={0}
      searchPlaceholder="Search metrics..."
      onSearch={() => {}}
      onRefresh={() => {}}
      onExport={handleExport}
      filters={
        <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
          <DateRangePicker
            value={dateRange}
            onChange={setDateRange}
          />
          
          <Select value={metric} onValueChange={setMetric}>
            <SelectTrigger>
              <SelectValue />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="revenue">Revenue</SelectItem>
              <SelectItem value="orders">Orders</SelectItem>
              <SelectItem value="users">New Users</SelectItem>
              <SelectItem value="conversion">Conversion Rate</SelectItem>
              <SelectItem value="submissions">Submissions</SelectItem>
            </SelectContent>
          </Select>
          
          <Select value={groupBy} onValueChange={setGroupBy}>
            <SelectTrigger>
              <SelectValue />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="hour">Hourly</SelectItem>
              <SelectItem value="day">Daily</SelectItem>
              <SelectItem value="week">Weekly</SelectItem>
              <SelectItem value="month">Monthly</SelectItem>
            </SelectContent>
          </Select>
          
          <Button variant="outline">
            Compare Period
          </Button>
        </div>
      }
    >
      {/* Key Metrics Cards */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-4 mb-6">
        <MetricCard
          title="Total Revenue"
          value={`$${analytics?.totalRevenue || 0}`}
          change={analytics?.revenueChange}
          icon={DollarSign}
        />
        <MetricCard
          title="Total Orders"
          value={analytics?.totalOrders || 0}
          change={analytics?.ordersChange}
          icon={ShoppingCart}
        />
        <MetricCard
          title="Conversion Rate"
          value={`${analytics?.conversionRate || 0}%`}
          change={analytics?.conversionChange}
          icon={TrendingUp}
        />
        <MetricCard
          title="Avg Order Value"
          value={`$${analytics?.avgOrderValue || 0}`}
          change={analytics?.aovChange}
          icon={Calculator}
        />
      </div>
      
      {/* Charts */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        <Card className="p-6">
          <h3 className="text-lg font-semibold mb-4">Revenue Trend</h3>
          <LineChart data={analytics?.revenueData} />
        </Card>
        
        <Card className="p-6">
          <h3 className="text-lg font-semibold mb-4">Top Products</h3>
          <BarChart data={analytics?.topProducts} />
        </Card>
        
        <Card className="p-6">
          <h3 className="text-lg font-semibold mb-4">Traffic Sources</h3>
          <PieChart data={analytics?.trafficSources} />
        </Card>
        
        <Card className="p-6">
          <h3 className="text-lg font-semibold mb-4">Recent Activity</h3>
          <ActivityFeed activities={analytics?.recentActivity} />
        </Card>
      </div>
    </DashboardLayout>
  );
}
5. Scalable User Management
tsx// client/src/pages/admin/UserManager.tsx

export function UserManager() {
  const [filters, setFilters] = useState({
    search: '',
    role: 'all',
    status: 'all',
    dateRange: null,
    sortBy: 'created',
    sortOrder: 'desc',
    page: 1,
    limit: 20
  });
  
  const columns = [
    { key: 'select', label: '', width: '50px' },
    { key: 'name', label: 'Name', sortable: true },
    { key: 'email', label: 'Email', sortable: true },
    { key: 'role', label: 'Role', sortable: true },
    { key: 'orders', label: 'Orders', sortable: true },
    { key: 'spent', label: 'Total Spent', sortable: true },
    { key: 'joined', label: 'Joined', sortable: true },
    { key: 'lastActive', label: 'Last Active', sortable: true },
    { key: 'actions', label: 'Actions', width: '100px' }
  ];
  
  return (
    <DashboardLayout
      title="User Management"
      description="Manage customer accounts and permissions"
      totalCount={users?.total || 0}
      searchPlaceholder="Search users by name, email, or location..."
      onSearch={(query) => setFilters({ ...filters, search: query, page: 1 })}
      onRefresh={refetch}
      onExport={handleExport}
      sortOptions={[
        { value: 'name-asc', label: 'Name A-Z' },
        { value: 'name-desc', label: 'Name Z-A' },
        { value: 'created-desc', label: 'Newest First' },
        { value: 'created-asc', label: 'Oldest First' },
        { value: 'spent-desc', label: 'Highest Spent' },
        { value: 'orders-desc', label: 'Most Orders' }
      ]}
      filters={
        <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
          <Select
            value={filters.role}
            onValueChange={(v) => setFilters({ ...filters, role: v })}
          >
            <SelectTrigger>
              <SelectValue placeholder="All Roles" />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="all">All Roles</SelectItem>
              <SelectItem value="user">Customers</SelectItem>
              <SelectItem value="developer">Developers</SelectItem>
              <SelectItem value="admin">Admins</SelectItem>
            </SelectContent>
          </Select>
          
          <Select
            value={filters.status}
            onValueChange={(v) => setFilters({ ...filters, status: v })}
          >
            <SelectTrigger>
              <SelectValue placeholder="All Statuses" />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="all">All Statuses</SelectItem>
              <SelectItem value="active">Active</SelectItem>
              <SelectItem value="inactive">Inactive</SelectItem>
              <SelectItem value="suspended">Suspended</SelectItem>
            </SelectContent>
          </Select>
          
          <DateRangePicker
            value={filters.dateRange}
            onChange={(range) => setFilters({ ...filters, dateRange: range })}
            placeholder="Joined date"
          />
          
          <Button variant="outline" onClick={() => setFilters(defaultFilters)}>
            Clear Filters
          </Button>
        </div>
      }
      actions={
        <Button className="gap-2">
          <UserPlus className="w-4 h-4" />
          Invite User
        </Button>
      }
    >
      <DataTable
        columns={columns}
        data={users?.data || []}
        selectedRows={selectedUsers}
        onSelectRow={handleSelectUser}
        onSort={handleSort}
        actions={(user) => (
          <DropdownMenu>
            <DropdownMenuTrigger asChild>
              <Button variant="ghost" size="icon">
                <MoreVertical className="w-4 h-4" />
              </Button>
            </DropdownMenuTrigger>
            <DropdownMenuContent>
              <DropdownMenuItem onClick={() => handleViewUser(user)}>
                View Profile
              </DropdownMenuItem>
              <DropdownMenuItem onClick={() => handleEditUser(user)}>
                Edit User
              </DropdownMenuItem>
              <DropdownMenuItem onClick={() => handleResetPassword(user)}>
                Reset Password
              </DropdownMenuItem>
              <DropdownMenuSeparator />
              <DropdownMenuItem 
                onClick={() => handleSuspendUser(user)}
                className="text-red-400"
              >
                Suspend User
              </DropdownMenuItem>
            </DropdownMenuContent>
          </DropdownMenu>
        )}
      />
      
      <Pagination
        currentPage={filters.page}
        totalPages={Math.ceil((users?.total || 0) / filters.limit)}
        onPageChange={(page) => setFilters({ ...filters, page })}
      />
    </DashboardLayout>
  );
}
6. Enhanced System Settings
tsx// client/src/pages/admin/SystemManager.tsx

export function SystemManager() {
  const [activeSection, setActiveSection] = useState('general');
  
  const sections = [
    { id: 'general', label: 'General Settings', icon: Settings },
    { id: 'database', label: 'Database', icon: Database },
    { id: 'email', label: 'Email Configuration', icon: Mail },
    { id: 'payment', label: 'Payment Settings', icon: CreditCard },
    { id: 'security', label: 'Security', icon: Shield },
    { id: 'backup', label: 'Backup & Export', icon: Download },
    { id: 'logs', label: 'System Logs', icon: FileText },
    { id: 'cache', label: 'Cache Management', icon: Zap }
  ];
  
  return (
    <div className="min-h-screen bg-gray-900">
      <div className="flex">
        {/* Sidebar */}
        <div className="w-64 border-r border-gray-800 p-6">
          <h2 className="text-lg font-semibold mb-4">System Settings</h2>
          <nav className="space-y-1">
            {sections.map((section) => {
              const Icon = section.icon;
              return (
                <button
                  key={section.id}
                  onClick={() => setActiveSection(section.id)}
                  className={`w-full flex items-center gap-3 px-3 py-2 rounded-lg transition-colors ${
                    activeSection === section.id
                      ? 'bg-gray-800 text-white'
                      : 'text-gray-400 hover:text-white hover:bg-gray-800/50'
                  }`}
                >
                  <Icon className="w-4 h-4" />
                  {section.label}
                </button>
              );
            })}
          </nav>
        </div>
        
        {/* Main Content */}
        <div className="flex-1 p-6">
          {activeSection === 'database' && <DatabaseSettings />}
          {activeSection === 'logs' && <SystemLogs />}
          {activeSection === 'backup' && <BackupSettings />}
          {/* Add other sections */}
        </div>
      </div>
    </div>
  );
}
7. Reusable Components
tsx// client/src/components/admin/DataTable.tsx

interface DataTableProps<T> {
  columns: Column[];
  data: T[];
  selectedRows: Set<string>;
  onSelectRow: (id: string) => void;
  onSort: (column: string, order: 'asc' | 'desc') => void;
  actions?: (row: T) => ReactNode;
  onRowClick?: (row: T) => void;
}

export function DataTable<T extends { id: string }>({
  columns,
  data,
  selectedRows,
  onSelectRow,
  onSort,
  actions,
  onRowClick
}: DataTableProps<T>) {
  const [sortColumn, setSortColumn] = useState<string | null>(null);
  const [sortOrder, setSortOrder] = useState<'asc' | 'desc'>('asc');
  
  const handleSort = (column: string) => {
    const newOrder = sortColumn === column && sortOrder === 'asc' ? 'desc' : 'asc';
    setSortColumn(column);
    setSortOrder(newOrder);
    onSort(column, newOrder);
  };
  
  return (
    <div className="overflow-x-auto">
      <table className="w-full">
        <thead>
          <tr className="border-b border-gray-800">
            {columns.map((column) => (
              <th
                key={column.key}
                className={`px-4 py-3 text-left text-sm font-medium text-gray-400 ${
                  column.sortable ? 'cursor-pointer hover:text-white' : ''
                }`}
                style={{ width: column.width }}
                onClick={() => column.sortable && handleSort(column.key)}
              >
                <div className="flex items-center gap-2">
                  {column.label}
                  {column.sortable && (
                    <ArrowUpDown className="w-3 h-3" />
                  )}
                </div>
              </th>
            ))}
          </tr>
        </thead>
        <tbody>
          {data.map((row) => (
            <tr
              key={row.id}
              className={`border-b border-gray-800 hover:bg-gray-800/50 transition-colors ${
                selectedRows.has(row.id) ? 'bg-gray-800/30' : ''
              }`}
              onClick={() => onRowClick?.(row)}
            >
              {columns.map((column) => (
                <td key={column.key} className="px-4 py-3">
                  {column.key === 'select' ? (
                    <input
                      type="checkbox"
                      checked={selectedRows.has(row.id)}
                      onChange={() => onSelectRow(row.id)}
                      onClick={(e) => e.stopPropagation()}
                    />
                  ) : column.key === 'actions' ? (
                    <div onClick={(e) => e.stopPropagation()}>
                      {actions?.(row)}
                    </div>
                  ) : (
                    column.render ? column.render(row) : row[column.key]
                  )}
                </td>
              ))}
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
}

// client/src/components/admin/Pagination.tsx

interface PaginationProps {
  currentPage: number;
  totalPages: number;
  onPageChange: (page: number) => void;
  className?: string;
}

export function Pagination({
  currentPage,
  totalPages,
  onPageChange,
  className
}: PaginationProps) {
  const pages = [];
  const maxVisible = 5;
  
  let start = Math.max(1, currentPage - Math.floor(maxVisible / 2));
  let end = Math.min(totalPages, start + maxVisible - 1);
  
  if (end - start + 1 < maxVisible) {
    start = Math.max(1, end - maxVisible + 1);
  }
  
  for (let i = start; i <= end; i++) {
    pages.push(i);
  }
  
  return (
    <div className={`flex items-center justify-center gap-2 ${className}`}>
      <Button
        variant="outline"
        size="sm"
        onClick={() => onPageChange(currentPage - 1)}
        disabled={currentPage === 1}
      >
        <ChevronLeft className="w-4 h-4" />
      </Button>
      
      {start > 1 && (
        <>
          <Button
            variant="outline"
            size="sm"
            onClick={() => onPageChange(1)}
          >
            1
          </Button>
          {start > 2 && <span className="text-gray-400">...</span>}
        </>
      )}
      
      {pages.map((page) => (
        <Button
          key={page}
          variant={page === currentPage ? 'default' : 'outline'}
          size="sm"
          onClick={() => onPageChange(page)}
          className="w-10"
        >
          {page}
        </Button>
      ))}
      
      {end < totalPages && (
        <>
          {end < totalPages - 1 && <span className="text-gray-400">...</span>}
          <Button
            variant="outline"
            size="sm"
            onClick={() => onPageChange(totalPages)}
          >
            {totalPages}
          </Button>
        </>
      )}
      
      <Button
        variant="outline"
        size="sm"
        onClick={() => onPageChange(currentPage + 1)}
        disabled={currentPage === totalPages}
      >
        <ChevronRight className="w-4 h-4" />
      </Button>
    </div>
  );
}
8. Backend API Updates
ts// server/routes.ts - Add enhanced endpoints for all sections

// Products with advanced filtering
app.get('/api/admin/products', requireAdmin, async (req, res) => {
  const { 
    search, category, status, priceMin, priceMax, 
    sortBy, sortOrder, page, limit 
  } = req.query;
  
  const conditions = [];
  if (search) {
    conditions.push(
      or(
        ilike(products.name, `%${search}%`),
        ilike(products.sku, `%${search}%`)
      )
    );
  }
  if (category !== 'all') conditions.push(eq(products.categoryId, category));
  if (status !== 'all') conditions.push(eq(products.status, status));
  if (priceMin) conditions.push(gte(products.price, priceMin));
  if (priceMax) conditions.push(lte(products.price, priceMax));
  
  // Apply sorting and pagination
  const orderColumn = {
    name: products.name,
    price: products.price,
    stock: products.stock,
    created: products.createdAt
  }[sortBy] || products.createdAt;
  
  const [data, total] = await Promise.all([
    db.select()
      .from(products)
      .where(conditions.length > 0 ? and(...conditions) : undefined)
      .orderBy(sortOrder === 'desc' ? desc(orderColumn) : asc(orderColumn))
      .limit(Number(limit))
      .offset((Number(page) - 1) * Number(limit)),
    
    db.select({ count: count() })
      .from(products)
      .where(conditions.length > 0 ? and(...conditions) : undefined)
  ]);
  
  res.json({ data, total: total[0]?.count || 0 });
});

// Bulk operations
app.post('/api/admin/:resource/bulk', requireAdmin, async (req, res) => {
  const { resource } = req.params;
  const { action, ids } = req.body;
  
  const handlers = {
    products: handleProductBulkAction,
    users: handleUserBulkAction,
    orders: handleOrderBulkAction
  };
  
  const handler = handlers[resource];
  if (!handler) {
    return res.status(400).json({ error: 'Invalid resource' });
  }
  
  const result = await handler(action, ids);
  res.json(result);
});

// Export functionality
app.get('/api/admin/:resource/export', requireAdmin, async (req, res) => {
  const { resource } = req.params;
  const { format = 'csv', ...filters } = req.query;
  
  const data = await getResourceData(resource, filters);
  
  if (format === 'csv') {
    const csv = generateCSV(data, resource);
    res.setHeader('Content-Type', 'text/csv');
    res.setHeader('Content-Disposition', `attachment; filename=${resource}-export.csv`);
    res.send(csv);
  } else if (format === 'pdf') {
    const pdf = await generatePDF(data, resource);
    res.setHeader('Content-Type', 'application/pdf');
    res.setHeader('Content-Disposition', `attachment; filename=${resource}-export.pdf`);
    res.send(pdf);
  }
});
Instructions for Replit:

Create the DashboardLayout component as the base for all dashboard tabs
Update each tab to use the new scalable structure:

Products → ProductsManager
Categories → CategoryManager
Analytics → AnalyticsManager
Users → UserManager
System → SystemManager


Implement reusable components:

DataTable for tabular data
Pagination for all lists
MetricCard for analytics
FilterBar for consistent filtering


Update backend endpoints to support:

Advanced filtering
Sorting
Pagination
Bulk operations
Export functionality


Maintain consistent theming:

Dark background (gray-900)
Glass morphism cards
Blue accent colors
Consistent spacing and typography


Add keyboard shortcuts:

Cmd/Ctrl + K for search
Cmd/Ctrl + N for new item
Cmd/Ctrl + E for export


Implement caching for better performance:

Cache filter preferences
Cache sort preferences
Remember view modes



This scalable system will handle thousands of items across all tabs while maintaining a consistent, professional appearance and excellent performance.