Here's a prompt for Replit:

CRITICAL FIX: Cart Still Shows Deleted Images + Add "In Cart" Button State
Issues:

Cart showing cached/deleted images - images deleted in admin still appear in cart
Need "Add to Cart" button to change to "In Cart" when item is already in cart

1. FIX CART IMAGE CACHING - Force Fresh Images:
javascript// Update Cart API to return current product data
app.get('/api/cart', async (req, res) => {
  const userId = req.user?.id || null;
  const sessionId = req.sessionID;
  
  try {
    const cartItems = await storage.getCartWithProducts(userId, sessionId);
    
    // Map cart items with CURRENT product data
    const cartWithFreshData = cartItems.map(item => ({
      id: item.id,
      quantity: item.quantity,
      product: {
        id: item.product.id,
        name: item.product.name,
        price: item.product.price,
        brand: item.product.brand,
        // IMPORTANT: Return current images, not cached
        images: item.product.images || [],
        stock: item.product.stock,
        status: item.product.status
      }
    }));
    
    res.json(cartWithFreshData);
  } catch (error) {
    console.error('Get cart error:', error);
    res.status(500).json({ error: 'Failed to fetch cart' });
  }
});

// Storage method - Join with products table
async getCartWithProducts(userId: string | null, sessionId: string) {
  const conditions = userId 
    ? eq(cart.userId, userId)
    : and(eq(cart.sessionId, sessionId), isNull(cart.userId));
    
  // JOIN with products to get CURRENT data
  return await this.db
    .select({
      id: cart.id,
      quantity: cart.quantity,
      product: products // Get ALL current product data
    })
    .from(cart)
    .innerJoin(products, eq(cart.productId, products.id))
    .where(conditions);
}
2. CART COMPONENT - No Image Fallback:
javascript// components/CartItem.jsx
const CartItem = ({ item }) => {
  const imageUrl = item.product.images?.[0];
  
  return (
    <div className="flex items-center gap-4 p-4">
      {/* Image with fallback */}
      <div className="w-24 h-24 bg-gray-800 rounded-lg overflow-hidden">
        {imageUrl ? (
          <img 
            src={imageUrl}
            alt={item.product.name}
            className="w-full h-full object-cover"
            onError={(e) => {
              // If image fails to load, show placeholder
              e.target.style.display = 'none';
              e.target.nextSibling.style.display = 'flex';
            }}
          />
        ) : null}
        <div className={`flex items-center justify-center h-full ${imageUrl ? 'hidden' : ''}`}>
          <Package className="w-12 h-12 text-gray-600" />
        </div>
      </div>
      {/* Rest of cart item */}
    </div>
  );
};
3. ADD TO CART BUTTON WITH STATE:
javascript// components/ui/AddToCartButton.jsx
export const AddToCartButton = ({ productId, stock, variant = 'default' }) => {
  const [isInCart, setIsInCart] = useState(false);
  const [loading, setLoading] = useState(false);
  const { cartItems, addToCart, removeFromCart } = useCart();
  
  // Check if item is in cart
  useEffect(() => {
    const inCart = cartItems?.some(item => item.productId === productId);
    setIsInCart(inCart);
  }, [cartItems, productId]);
  
  const handleClick = async () => {
    if (loading) return;
    
    setLoading(true);
    try {
      if (isInCart) {
        // Go to cart instead of removing
        router.push('/cart');
      } else {
        await addToCart(productId, 1);
        setIsInCart(true);
      }
    } catch (error) {
      console.error('Cart action failed:', error);
    } finally {
      setLoading(false);
    }
  };
  
  // Different states
  if (stock === 0) {
    return (
      <button disabled className="bg-gray-700 text-gray-400 px-4 py-2 rounded-lg cursor-not-allowed">
        Out of Stock
      </button>
    );
  }
  
  if (isInCart) {
    return (
      <button 
        onClick={handleClick}
        className="bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded-lg flex items-center gap-2 transition-all"
      >
        <Check className="w-4 h-4" />
        In Cart - View Cart
      </button>
    );
  }
  
  return (
    <button 
      onClick={handleClick}
      disabled={loading}
      className="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg flex items-center gap-2 transition-all disabled:opacity-50"
    >
      <ShoppingCart className="w-4 h-4" />
      {loading ? 'Adding...' : 'Add to Cart'}
    </button>
  );
};
4. CART CONTEXT FOR GLOBAL STATE:
javascript// contexts/CartContext.jsx
export const CartProvider = ({ children }) => {
  const [cartItems, setCartItems] = useState([]);
  
  // Fetch cart on mount
  useEffect(() => {
    fetchCart();
  }, []);
  
  const fetchCart = async () => {
    try {
      const response = await fetch('/api/cart', { credentials: 'include' });
      const data = await response.json();
      setCartItems(data);
    } catch (error) {
      console.error('Failed to fetch cart:', error);
    }
  };
  
  const addToCart = async (productId, quantity) => {
    const response = await fetch('/api/cart', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      credentials: 'include',
      body: JSON.stringify({ productId, quantity })
    });
    
    if (response.ok) {
      await fetchCart(); // Refresh cart
    }
  };
  
  const isInCart = (productId) => {
    return cartItems.some(item => item.product.id === productId);
  };
  
  return (
    <CartContext.Provider value={{ 
      cartItems, 
      addToCart, 
      isInCart,
      fetchCart 
    }}>
      {children}
    </CartContext.Provider>
  );
};
5. PRODUCT CARD UPDATE:
javascript// In ProductCard component
const ProductCard = ({ product }) => {
  const { isInCart } = useCart();
  const inCart = isInCart(product.id);
  
  return (
    <div className="product-card">
      {/* ... product info ... */}
      
      {/* Hover overlay with cart status */}
      <div className="hover-overlay">
        {inCart ? (
          <Link href="/cart" className="bg-green-600 text-white px-4 py-2 rounded-lg">
            <Check className="w-4 h-4 inline mr-2" />
            View in Cart
          </Link>
        ) : (
          <AddToCartButton productId={product.id} stock={product.stock} />
        )}
      </div>
    </div>
  );
};
6. CLEAR IMAGE CACHE ON DELETE:
javascript// When deleting images in admin
app.delete('/api/admin/products/:id/images', async (req, res) => {
  const { imagesToDelete } = req.body;
  
  // Delete from Cloudinary
  for (const imageUrl of imagesToDelete) {
    await cloudinary.uploader.destroy(getPublicId(imageUrl));
  }
  
  // Update product
  await storage.updateProduct(productId, { 
    images: updatedImages 
  });
  
  // IMPORTANT: Invalidate any caches
  res.setHeader('Cache-Control', 'no-cache, no-store, must-revalidate');
  
  // Broadcast update
  io.emit('productUpdated', { productId });
  
  res.json({ success: true });
});
KEY IMPROVEMENTS:

✅ Cart always shows current product images from database
✅ Fallback to placeholder when image missing
✅ "Add to Cart" changes to "In Cart - View Cart"
✅ Global cart state tracks what's in cart
✅ Different button states: Add/In Cart/Out of Stock
✅ Click "In Cart" goes to cart page
✅ No image caching issues

This provides better UX and ensures data consistency!