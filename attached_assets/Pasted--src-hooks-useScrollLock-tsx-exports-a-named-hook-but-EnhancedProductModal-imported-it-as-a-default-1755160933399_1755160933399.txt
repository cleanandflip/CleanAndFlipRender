/src/hooks/useScrollLock.tsx exports a named hook, but EnhancedProductModal imported it as a default. Vite throws:

javascript
Copy
Edit
SyntaxError: The requested module '/src/hooks/useScrollLock.tsx' does not provide an export named 'default'
1) One-line fix in EnhancedProductModal.tsx
Change the import to a named import:

diff
Copy
Edit
- import useScrollLock from '@/hooks/useScrollLock';
+ import { useScrollLock } from '@/hooks/useScrollLock';
(Leave the call useScrollLock(true); as-is.)

Alternative (only if you prefer default imports): add export default useScrollLock; at the bottom of hooks/useScrollLock.tsx. But the clean fix is the diff above.

2) While you’re in the modal, lock in the Featured + Fulfillment sync (prevents the “featured showing when unchecked” issue)
Initialize from the product correctly

ts
Copy
Edit
const [formData, setFormData] = useState({
  // ...
  isFeatured: product?.isFeatured ?? product?.is_featured ?? false,
  // legacy booleans for fulfillment (for initial mode calc if you need it)
  isLocalDeliveryAvailable: product?.isLocalDeliveryAvailable ?? product?.is_local_delivery_available ?? false,
  isShippingAvailable: product?.isShippingAvailable ?? product?.is_shipping_available ?? true,
});
Submit payload — send both key styles to be safe

ts
Copy
Edit
const fulfillment = booleansFromMode(mode); // returns { isLocalDeliveryAvailable, isShippingAvailable }

const submitData = {
  // …other fields
  // Featured
  isFeatured: formData.isFeatured,
  is_featured: formData.isFeatured,
  // Fulfillment (both styles)
  isLocalDeliveryAvailable: fulfillment.isLocalDeliveryAvailable,
  is_local_delivery_available: fulfillment.isLocalDeliveryAvailable,
  isShippingAvailable: fulfillment.isShippingAvailable,
  is_shipping_available: fulfillment.isShippingAvailable,
};
await fetch(url, { method, headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(submitData) });
After success, invalidate everything that surfaces these flags

ts
Copy
Edit
await Promise.all([
  queryClient.invalidateQueries({ queryKey: ['adminProducts'] }),
  queryClient.invalidateQueries({ queryKey: ['products'] }),
  queryClient.invalidateQueries({ queryKey: ['products','featured'] }),
  product?.id ? queryClient.invalidateQueries({ queryKey: ['product', product.id] }) : Promise.resolve(),
]);
That’s it. The import fix will clear the runtime error, and the featured/fulfillment snippets ensure the modal’s controls truly reflect in the DB and all product lists (including Featured) right after saving.