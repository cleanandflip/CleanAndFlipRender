Address System Database Sync Issues - Fix Request
Problem Summary
The new Geoapify address autocomplete is working on the frontend, but addresses are not:

Saving to the database properly
Showing up in the user's saved addresses
Live-syncing after form submission

Debugging Steps for Replit
1. Check Database Schema
First, verify the database has the correct columns:
sql-- Run this query to check if columns exist
SELECT column_name, data_type 
FROM information_schema.columns 
WHERE table_name = 'users' 
AND column_name IN ('street', 'city', 'state', 'zip_code', 'latitude', 'longitude', 'is_local_customer');

-- Check if there's a separate addresses table
SELECT * FROM information_schema.tables 
WHERE table_name LIKE '%address%';
2. Verify API Endpoints
Check Registration/Profile Update:
typescript// In server/routes/auth.ts or user.ts
console.log('Received address data:', {
  street: req.body.street,
  city: req.body.city,
  state: req.body.state,
  zipCode: req.body.zipCode
});

// Make sure it's being saved
const updated = await db.users.update({
  where: { id: userId },
  data: {
    street: req.body.street,
    city: req.body.city,
    state: req.body.state,
    zip_code: req.body.zipCode, // Note: might be zip_code not zipCode in DB
    latitude: req.body.latitude,
    longitude: req.body.longitude
  }
});

console.log('Updated user:', updated);
3. Fix Address Saving
Option A: If addresses should be in users table:
typescript// server/routes/user.ts
router.put('/profile', requireAuth, async (req, res) => {
  try {
    const { street, city, state, zipCode, latitude, longitude } = req.body;
    
    // Determine if local
    const ashevilleZips = ['28801', '28802', '28803', '28804', '28805', '28806'];
    const isLocalCustomer = ashevilleZips.includes(zipCode);
    
    const updatedUser = await db.users.update({
      where: { id: req.user.id },
      data: {
        street,
        city,
        state,
        zip_code: zipCode, // Check column name
        latitude,
        longitude,
        is_local_customer: isLocalCustomer
      }
    });
    
    res.json(updatedUser);
  } catch (error) {
    console.error('Address update error:', error);
    res.status(500).json({ error: 'Failed to update address' });
  }
});
Option B: If there's a separate addresses table:
typescript// Create addresses table if it doesn't exist
CREATE TABLE IF NOT EXISTS addresses (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id UUID REFERENCES users(id) ON DELETE CASCADE,
  street VARCHAR(255) NOT NULL,
  city VARCHAR(100) NOT NULL,
  state VARCHAR(2) NOT NULL,
  zip_code VARCHAR(10) NOT NULL,
  latitude DECIMAL(10, 8),
  longitude DECIMAL(11, 8),
  is_default BOOLEAN DEFAULT false,
  is_local BOOLEAN DEFAULT false,
  created_at TIMESTAMP DEFAULT NOW()
);

// API endpoint to save address
router.post('/addresses', requireAuth, async (req, res) => {
  const { street, city, state, zipCode, latitude, longitude } = req.body;
  
  const address = await db.addresses.create({
    user_id: req.user.id,
    street,
    city,
    state,
    zip_code: zipCode,
    latitude,
    longitude,
    is_local: isLocalCustomer(zipCode),
    is_default: true // Set as default if first address
  });
  
  res.json(address);
});
4. Fix Address Display
Update the addresses fetch endpoint:
typescript// server/routes/user.ts
router.get('/addresses', requireAuth, async (req, res) => {
  try {
    // If addresses are in users table
    const user = await db.users.findUnique({
      where: { id: req.user.id },
      select: {
        street: true,
        city: true,
        state: true,
        zip_code: true,
        is_local_customer: true
      }
    });
    
    // Format as array for consistency
    const addresses = user.street ? [{
      id: req.user.id,
      street: user.street,
      city: user.city,
      state: user.state,
      zipCode: user.zip_code,
      isLocal: user.is_local_customer,
      isDefault: true
    }] : [];
    
    res.json(addresses);
  } catch (error) {
    console.error('Fetch addresses error:', error);
    res.status(500).json({ error: 'Failed to fetch addresses' });
  }
});
5. Update Frontend Address Display
In the dashboard addresses tab:
tsx// src/pages/dashboard.tsx or addresses component
import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';

function AddressesTab() {
  const queryClient = useQueryClient();
  
  // Fetch addresses
  const { data: addresses, isLoading } = useQuery({
    queryKey: ['addresses'],
    queryFn: async () => {
      const res = await fetch('/api/addresses', {
        credentials: 'include'
      });
      if (!res.ok) throw new Error('Failed to fetch addresses');
      return res.json();
    }
  });
  
  // Add address mutation
  const addAddress = useMutation({
    mutationFn: async (addressData) => {
      const res = await fetch('/api/addresses', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        credentials: 'include',
        body: JSON.stringify(addressData)
      });
      if (!res.ok) throw new Error('Failed to save address');
      return res.json();
    },
    onSuccess: () => {
      // Invalidate and refetch
      queryClient.invalidateQueries(['addresses']);
    }
  });
  
  if (isLoading) return <div>Loading addresses...</div>;
  
  return (
    <div>
      {addresses && addresses.length > 0 ? (
        <div className="space-y-4">
          {addresses.map((addr) => (
            <div key={addr.id} className="bg-gray-800 p-4 rounded-lg">
              <p className="text-white">{addr.street}</p>
              <p className="text-gray-400">
                {addr.city}, {addr.state} {addr.zipCode}
              </p>
              {addr.isLocal && (
                <span className="text-green-500 text-sm">
                  âœ“ Local pickup available
                </span>
              )}
            </div>
          ))}
        </div>
      ) : (
        <div className="text-center py-8">
          <MapPin className="w-12 h-12 text-gray-600 mx-auto mb-4" />
          <p className="text-gray-400">No saved addresses</p>
          <p className="text-gray-500 text-sm mb-4">
            Add addresses to make checkout faster.
          </p>
          <AddAddressModal onSave={addAddress.mutate} />
        </div>
      )}
    </div>
  );
}
6. Fix Registration Form Save
Ensure registration saves address:
tsx// In registration form submit
const handleSubmit = async (e) => {
  e.preventDefault();
  
  const registrationData = {
    email: formData.email,
    password: formData.password,
    firstName: formData.firstName,
    lastName: formData.lastName,
    // Make sure these match backend expectations
    street: formData.street,
    city: formData.city,
    state: formData.state,
    zipCode: formData.zipCode, // or zip_code
    latitude: formData.latitude,
    longitude: formData.longitude
  };
  
  console.log('Sending registration data:', registrationData);
  
  const res = await fetch('/api/auth/register', {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify(registrationData)
  });
};
7. Add Live Sync After Updates
typescript// After any address update, invalidate queries
import { useQueryClient } from '@tanstack/react-query';

const queryClient = useQueryClient();

// After successful address save
queryClient.invalidateQueries(['addresses']);
queryClient.invalidateQueries(['user']); // If address is part of user data
Testing Checklist

 Register new user with address - check if saved in DB
 Update profile address - verify it updates in DB
 Check addresses tab - should show saved address
 Verify local customer detection works
 Test address edit/update functionality
 Ensure proper error handling

Quick Debug Commands
bash# Check if addresses are being saved
SELECT id, email, street, city, state, zip_code FROM users WHERE email = 'test@example.com';

# Check API logs
tail -f server.log | grep -i address

# Test API directly
curl -X GET http://localhost:5000/api/addresses \
  -H "Cookie: your-session-cookie"
Please investigate these areas and implement the necessary fixes to ensure addresses are properly saved and displayed across the platform!