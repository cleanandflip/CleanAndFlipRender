the old “Error Dashboard” UI is still mounted. Here’s exactly how Replit should remove every trace of the legacy error tab and wire the new local Sentry-style (LETS) dashboard you asked for. This is surgical and end-to-end.

1) Remove legacy Error UI and routes
A. Kill old components
Search and delete the legacy files (names may vary—use ripgrep patterns):

bash
Copy
Edit
rg -n "Error Dashboard|Codebase Security Scanner|Advanced Codebase" src/pages src/components
rg -n "ErrorLogs|ErrorDashboard|CodebaseDoctor|scan codebase|Run Analysis" src
Delete these (or whatever matches in your repo):

src/pages/admin/errors/index.tsx (legacy)

src/pages/admin/errors/* (cards, charts, fake scanners)

src/components/admin/errors/*

Any “Codebase Security Scanner / Codebase Doctor” UI/components

Any client code calling old error APIs (search for /api/error-log, /api/codebase-scan, /api/diagnostics)

B. Remove legacy server endpoints
bash
Copy
Edit
rg -n "api/error-log|api/error-logs|api/scan|codebase|doctor|diagnostic" server
Delete route handlers and their imports (common files):

server/routes/error-logs.ts

server/routes/codebase-scan.ts

server/routes/diagnostics.ts

Any cron jobs writing to those tables/files

If you had a file logger for the dashboard, delete it.

C. Remove nav bindings to legacy page
Find the admin nav:

bash
Copy
Edit
rg -n "Error Logs|/admin/errors" src
Replace the route to point to the new page path (see §2):

tsx
Copy
Edit
// before
<Link to="/admin/errors">Error Logs</Link>

// after
<Link to="/admin/observability">Errors</Link>
2) Mount the new LETS dashboard UI
Create a clean page and point the admin nav to it.

A. Route
File: src/routes/admin.tsx (or your admin router)

tsx
Copy
Edit
// add
import ObservabilityPage from "@/pages/admin/observability";

// route
<Route path="/admin/observability" element={<ObservabilityPage />} />
B. Page shell
File: src/pages/admin/observability/index.tsx

Wire to the LETS endpoints you already added (/api/observability/*). Keep it simple: toolbar (search, level, env, status), issues table, details drawer, and a small time-series chart.

tsx
Copy
Edit
import { useQuery } from "@tanstack/react-query";
import { useState } from "react";
import { obsApi } from "@/api/observability";

export default function ObservabilityPage() {
  const [q, setQ] = useState("");
  const [level, setLevel] = useState<string|undefined>();
  const [env, setEnv] = useState<string|undefined>();
  const [resolved, setResolved] = useState(false);
  const [page, setPage] = useState(1);
  const limit = 20;

  const { data, isLoading } = useQuery({
    queryKey: ["issues", q, level, env, resolved, page, limit],
    queryFn: () => obsApi.issues({ q, level, env, resolved, page, limit }),
    keepPreviousData: true,
  });

  // …render header filters…
  // …render issues table: data.items…
  // …on row click → fetch obsApi.issue(fp) and open a drawer with latest events…
  // …Resolve/Ignore actions call obsApi.resolve/ignore then invalidate ["issues"]…
  // …Top right: small select (1d/7d/30d) → obsApi.series(days) → tiny line chart…
  return (/* your themed UI here using data */);
}
Do not reuse any legacy “scanner/doctor” components. They must be gone.

3) Remove legacy persistence and migrate data
If you had old tables/collections:

bash
Copy
Edit
# Mongo examples – run in mongo shell or your migration
db.legacy_error_logs?.drop();
db.codebase_scans?.drop();
db.error_metrics?.drop();
Only keep the new LETS collections:

errors_raw

issues

issue_events

Add indexes (Mongo examples):

js
Copy
Edit
db.errors_raw.createIndex({ createdAt: -1 });
db.errors_raw.createIndex({ fingerprint: 1 });

db.issues.createIndex({ lastSeen: -1 });
db.issues.createIndex({ resolved: 1 });
db.issues.createIndex({ title: "text" });

db.issue_events.createIndex({ hour: 1, fingerprint: 1 });
4) Ensure the ingest and capture pipeline is alive
Client: installGlobalErrorHandlers() called once in src/main.tsx.

React: Wrap app with <ErrorBoundary>.

Server: captureErrors middleware is the last middleware.

Sanitizer: allow /api/observability/errors through (or place sanitizer after JSON parse and before routes but with allowlist entry). Verify order:

ts
Copy
Edit
app.use(express.json());
app.use(cookieParser());
app.use(sanitizeRequest);            // has allowlist including /api/observability/errors
app.use("/api", apiRouter);
app.use(captureErrors);              // last
5) Replace any old client fetchers with new API
Create one client module:

File: src/api/observability.ts

ts
Copy
Edit
export const obsApi = {
  issues: async (params: Record<string, any> = {}) => {
    const qs = new URLSearchParams(Object.entries(params).filter(([,v]) => v !== undefined) as any);
    const r = await fetch(`/api/observability/issues?${qs}`, { credentials: "include" });
    if (!r.ok) throw new Error(await r.text());
    return r.json();
  },
  issue: async (fp: string) => (await fetch(`/api/observability/issues/${fp}`, { credentials: "include" })).json(),
  resolve: async (fp: string) => (await fetch(`/api/observability/issues/${fp}/resolve`, { method: "PUT", credentials: "include" })).json(),
  reopen: async (fp: string) => (await fetch(`/api/observability/issues/${fp}/reopen`, { method: "PUT", credentials: "include" })).json(),
  ignore: async (fp: string) => (await fetch(`/api/observability/issues/${fp}/ignore`, { method: "PUT", credentials: "include" })).json(),
  series: async (days=1) => (await fetch(`/api/observability/series?days=${days}`, { credentials: "include" })).json(),
};
Delete any previous error-log API modules.

6) Guardrails to prevent regressions
ESLint rule to block legacy endpoints:

js
Copy
Edit
"no-restricted-syntax": [
  "error",
  { "selector": "Literal[value='/admin/errors']", "message": "Use /admin/observability" },
  { "selector": "Literal[value=/\\/api\\/(error-log|scan|doctor)/]", "message": "Use /api/observability/* only" }
]
CI grep check:

bash
Copy
Edit
rg -n "/admin/errors|/api/error-log|/api/scan|Codebase Security|Codebase Doctor" src server && exit 1 || true
7) Quick QA checklist (what I expect to see after you push)
Admin navbar item “Errors” links to /admin/observability.

No “Codebase Security Scanner / Advanced Codebase Doctor” anywhere.

New issues list renders with columns: Title, Level, Last Seen, Count, Affected Users, Status (Resolved/Unresolved), Env(s).

Clicking an issue opens a drawer with the last 50 raw events (message, stack excerpt, URL, user id, tags).

Resolve/Ignore/Reopen buttons work and the list updates without refresh.

Mini chart (errors/hour) updates when time range changes.

DevTools network shows calls only to /api/observability/*.

rg finds zero references to the old pages/routes.

If the old page still appears after this…
You’re still importing the legacy component somewhere. Run:

bash
Copy
Edit
rg -n "Error Logs|Codebase Security|/admin/errors" src
Your router has a catch-all mapping the old path. Remove it.

Vite cache: stop dev server and restart. If needed, delete .vite/node_modules/.vite cache.

If you want me to supply a prebuilt React table + drawer skeleton for ObservabilityPage, I’ll drop that next; but the key first step is deleting the old files and re-pointing the route as above.