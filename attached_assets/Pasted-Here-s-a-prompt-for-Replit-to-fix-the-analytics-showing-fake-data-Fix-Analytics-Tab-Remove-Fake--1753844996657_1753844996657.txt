Here's a prompt for Replit to fix the analytics showing fake data:

Fix Analytics Tab - Remove Fake Data and Show Real Analytics
The analytics tab is showing fake numbers (1,250 page views, 45 active users) that aren't real. Please replace with actual data from the database.
1. Find and Remove Mock Analytics Data
Search for these fake numbers and remove them:

Look for "1,250" or "1250" (fake page views)
Look for "45" (fake active users)
Look for "+12%" (fake percentage)

These are probably in /client/src/pages/admin.tsx or a similar file.
2. Create Real Analytics Tracking
First, check if you have an analytics/activity tracking table. If not, create one:
sql-- Create activity_logs table if it doesn't exist
CREATE TABLE IF NOT EXISTS activity_logs (
  id TEXT PRIMARY KEY DEFAULT gen_random_uuid(),
  event_type TEXT NOT NULL, -- 'page_view', 'user_action', 'purchase'
  user_id TEXT REFERENCES users(id),
  session_id TEXT,
  page_url TEXT,
  created_at TIMESTAMP DEFAULT NOW()
);

-- Index for fast queries
CREATE INDEX idx_activity_logs_created ON activity_logs(created_at);
CREATE INDEX idx_activity_logs_type ON activity_logs(event_type);
3. Fix the Analytics API Endpoint
In /server/routes.ts or wherever the analytics endpoint is:
typescriptapp.get('/api/admin/analytics', requireAdmin, async (req, res) => {
  try {
    const db = await getDb();
    
    // Get REAL page views from last 7 days
    const pageViewsResult = await db.execute(sql`
      SELECT COUNT(*) as count 
      FROM activity_logs 
      WHERE event_type = 'page_view' 
      AND created_at > NOW() - INTERVAL '7 days'
    `);
    
    // Get REAL active users (unique users in last hour)
    const activeUsersResult = await db.execute(sql`
      SELECT COUNT(DISTINCT user_id) as count 
      FROM activity_logs 
      WHERE created_at > NOW() - INTERVAL '1 hour'
      AND user_id IS NOT NULL
    `);
    
    // Calculate REAL conversion rate
    const visitsResult = await db.execute(sql`
      SELECT COUNT(DISTINCT session_id) as count 
      FROM activity_logs 
      WHERE event_type = 'page_view'
      AND created_at > NOW() - INTERVAL '7 days'
    `);
    
    const ordersResult = await db.execute(sql`
      SELECT COUNT(*) as count 
      FROM orders 
      WHERE created_at > NOW() - INTERVAL '7 days'
    `);
    
    const visits = Number(visitsResult.rows[0]?.count || 1);
    const orderCount = Number(ordersResult.rows[0]?.count || 0);
    const conversionRate = (orderCount / visits * 100).toFixed(1);
    
    // Get average order value
    const avgOrderResult = await db.execute(sql`
      SELECT AVG(total)::numeric as avg_value 
      FROM orders 
      WHERE status = 'completed'
    `);
    
    // Get top products (if any orders exist)
    const topProductsResult = await db.execute(sql`
      SELECT p.name, COUNT(oi.id) as sales_count
      FROM order_items oi
      JOIN products p ON p.id = oi.product_id
      GROUP BY p.id, p.name
      ORDER BY sales_count DESC
      LIMIT 5
    `);
    
    // Get recent activity
    const recentActivityResult = await db.execute(sql`
      SELECT event_type, created_at 
      FROM activity_logs 
      ORDER BY created_at DESC 
      LIMIT 10
    `);
    
    res.json({
      pageViews: {
        current: Number(pageViewsResult.rows[0]?.count || 0),
        change: 0 // Calculate real change if you track historical data
      },
      activeUsers: {
        current: Number(activeUsersResult.rows[0]?.count || 0),
        change: 0
      },
      conversionRate: {
        current: parseFloat(conversionRate) || 0,
        change: 0
      },
      avgOrderValue: {
        current: parseFloat(avgOrderResult.rows[0]?.avg_value || '0'),
        change: 0
      },
      topProducts: topProductsResult.rows || [],
      recentActivity: recentActivityResult.rows || []
    });
    
  } catch (error) {
    console.error('Analytics error:', error);
    res.status(500).json({ error: 'Failed to fetch analytics' });
  }
});
4. Remove Hardcoded Values from Frontend
In /client/src/pages/admin.tsx, find and replace:
typescript// REMOVE any hardcoded analytics like:
const mockAnalytics = {
  pageViews: { current: 1250, change: 12 },
  activeUsers: { current: 45, change: 8 },
  // ...
};

// REPLACE with real API call:
const { data: analytics, isLoading } = useQuery({
  queryKey: ['admin', 'analytics'],
  queryFn: async () => {
    const res = await fetch('/api/admin/analytics', { 
      credentials: 'include' 
    });
    if (!res.ok) throw new Error('Failed to fetch analytics');
    return res.json();
  },
  refetchInterval: 60000 // Refresh every minute
});

// Show real data or 0 if no data:
<div>
  <h3>Page Views</h3>
  <p>{analytics?.pageViews?.current || 0}</p>
  {analytics?.pageViews?.current === 0 && (
    <small>Start tracking to see data</small>
  )}
</div>
5. Start Tracking Real Page Views
Add this to track real user activity:
typescript// In your main app or layout component
useEffect(() => {
  // Track page view
  fetch('/api/track', {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({
      event: 'page_view',
      page: window.location.pathname
    }),
    credentials: 'include'
  });
}, [pathname]); // Track on route change

// Create tracking endpoint
app.post('/api/track', async (req, res) => {
  const { event, page } = req.body;
  const userId = req.session?.userId;
  const sessionId = req.sessionID;
  
  await db.insert(activity_logs).values({
    event_type: event,
    user_id: userId,
    session_id: sessionId,
    page_url: page
  });
  
  res.json({ success: true });
});
6. What the Analytics Should Show
Since you just started:

Page Views: 0 (or very low number)
Active Users: 0-3 (based on who's currently using)
Conversion Rate: 0% (no orders yet)
Avg Order Value: $0 (no completed orders)

This is CORRECT for a new site. The numbers will grow as people use the site.
Summary:

Remove all hardcoded numbers (1,250, 45, etc.)
Create activity tracking if missing
Query real data from database
Show 0 or actual low numbers (which is correct for new site)
Start tracking real page views going forward

The analytics should show REAL data, even if it's all zeros initially