Instructions to Fix the "count is not defined" Error
The error shows that the count function from Drizzle ORM is not imported in the routes file. Here's how to fix it:
1. Add Missing Import
ts// server/routes.ts - Add this import at the top of the file

import { eq, and, desc, or, ilike, inArray, count, sql } from 'drizzle-orm';
// Make sure 'count' is included in the imports
2. Fix the Admin Submissions Endpoint
Replace the problematic endpoint with this corrected version:
ts// server/routes.ts - Fixed admin submissions endpoint

app.get('/api/admin/submissions', requireAdmin, async (req, res) => {
  try {
    console.log('Admin submissions endpoint called');
    const { status, search, isLocal, page = 1, limit = 20 } = req.query;
    
    // Get total count - Fixed syntax
    const totalResult = await db
      .select({ total: count() })
      .from(equipmentSubmissions);
    
    const totalCount = totalResult[0]?.total || 0;
    console.log('Total submissions in DB:', totalCount);
    
    // Build main query
    let conditions = [];
    if (status && status !== 'all') {
      conditions.push(eq(equipmentSubmissions.status, status as string));
    }
    if (search) {
      conditions.push(
        or(
          ilike(equipmentSubmissions.referenceNumber, `%${search}%`),
          ilike(equipmentSubmissions.equipmentName, `%${search}%`)
        )
      );
    }
    if (isLocal !== undefined && isLocal !== null) {
      conditions.push(eq(equipmentSubmissions.isLocal, isLocal === 'true'));
    }
    
    // Main query with joins
    const query = db
      .select({
        submission: equipmentSubmissions,
        user: {
          name: sql<string>`${users.firstName} || ' ' || ${users.lastName}`,
          email: users.email
        }
      })
      .from(equipmentSubmissions)
      .leftJoin(users, eq(equipmentSubmissions.userId, users.id))
      .orderBy(desc(equipmentSubmissions.createdAt))
      .limit(Number(limit))
      .offset((Number(page) - 1) * Number(limit));
    
    // Apply conditions if any
    const submissions = conditions.length > 0 
      ? await query.where(and(...conditions))
      : await query;
    
    console.log('Fetched submissions:', submissions.length);
    
    // Get status counts
    const statusCounts = await db
      .select({
        status: equipmentSubmissions.status,
        count: count()
      })
      .from(equipmentSubmissions)
      .groupBy(equipmentSubmissions.status);
    
    console.log('Status counts:', statusCounts);
    
    // Format response
    const response = {
      data: submissions.map(s => ({
        id: s.submission.id,
        referenceNumber: s.submission.referenceNumber || 'N/A',
        equipmentName: s.submission.equipmentName,
        brand: s.submission.brand,
        condition: s.submission.condition,
        askingPrice: s.submission.askingPrice,
        status: s.submission.status,
        createdAt: s.submission.createdAt,
        phoneNumber: s.submission.phoneNumber,
        email: s.submission.email,
        isLocal: s.submission.isLocal,
        distance: s.submission.distance,
        viewedByAdmin: s.submission.viewedByAdmin,
        userName: s.user?.name || 'Unknown User',
        userEmail: s.user?.email,
        images: s.submission.images || []
      })),
      total: Number(totalCount),
      // Convert status counts to object
      ...Object.fromEntries(
        statusCounts.map(sc => [sc.status || 'unknown', Number(sc.count)])
      )
    };
    
    console.log('Sending response with', response.data.length, 'submissions');
    res.json(response);
    
  } catch (error) {
    console.error('Error in admin submissions endpoint:', error);
    res.status(500).json({ 
      error: 'Failed to fetch submissions',
      details: error.message,
      data: [],
      total: 0
    });
  }
});
3. Alternative: Use SQL for Count if Import Issues Persist
If the import continues to cause issues, use raw SQL:
ts// Alternative count method using SQL
const totalResult = await db.execute(
  sql`SELECT COUNT(*) as total FROM equipment_submissions`
);
const totalCount = totalResult.rows[0]?.total || 0;

// For status counts
const statusCountsResult = await db.execute(
  sql`SELECT status, COUNT(*) as count 
      FROM equipment_submissions 
      GROUP BY status`
);
4. Quick Test Script
Create a test endpoint to verify the fix:
ts// Add this temporary endpoint to test
app.get('/api/admin/test-submissions', requireAdmin, async (req, res) => {
  try {
    // Test 1: Simple count
    const total = await db.select({ count: count() }).from(equipmentSubmissions);
    
    // Test 2: Get first 5 submissions
    const submissions = await db
      .select()
      .from(equipmentSubmissions)
      .limit(5);
    
    res.json({
      totalCount: total[0]?.count || 0,
      sampleSubmissions: submissions,
      success: true
    });
  } catch (error) {
    res.status(500).json({ 
      error: error.message,
      success: false 
    });
  }
});
5. Verify All Drizzle Imports
Check that all necessary Drizzle functions are imported at the top of routes.ts:
ts// server/routes.ts - Complete import list
import { 
  eq, 
  and, 
  or, 
  desc, 
  asc,
  sql, 
  count,
  ilike,
  like,
  inArray,
  notInArray,
  isNull,
  isNotNull,
  between,
  gte,
  lte,
  gt,
  lt,
  ne
} from 'drizzle-orm';
Instructions for Replit:

First Priority: Add the missing import

Open server/routes.ts
Add count to the drizzle-orm imports at the top
Save the file


Test the fix

The error should be resolved immediately
The dashboard should start loading submissions


If issues persist

Use the SQL alternative method
Check for any TypeScript errors
Ensure database connection is stable


Verify the fix

Navigate to the admin dashboard
Check that submissions load without errors
Verify the retry button disappears



The main issue is simply the missing count import from drizzle-orm. Once added, the submissions should load correctly in the admin dashboard.