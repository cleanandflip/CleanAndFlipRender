ðŸ”§ FIX GEOAPIFY ADDRESS AUTOCOMPLETE - SIMPLIFIED
Instructions for Replit - Complete Address Autocomplete Fix:
ðŸ“Œ FIXED ADDRESS AUTOCOMPLETE COMPONENT
typescript// client/src/components/ui/address-autocomplete.tsx
// REPLACE ENTIRE COMPONENT WITH THIS:

import { useState, useEffect, useRef } from 'react';
import { Loader2 } from 'lucide-react';
import { useDebounce } from '@/hooks/use-debounce';

interface AddressData {
  street: string;
  city: string;
  state: string;
  zipCode: string;
}

interface AddressAutocompleteProps {
  onAddressSelect: (address: AddressData) => void;
  value?: string;
  placeholder?: string;
  className?: string;
}

export function AddressAutocomplete({ 
  onAddressSelect, 
  value = '', 
  placeholder = "Start typing your address...",
  className = ""
}: AddressAutocompleteProps) {
  const [input, setInput] = useState(value);
  const [suggestions, setSuggestions] = useState([]);
  const [isLoading, setIsLoading] = useState(false);
  const [showDropdown, setShowDropdown] = useState(false);
  const [justSelected, setJustSelected] = useState(false);
  const dropdownRef = useRef<HTMLDivElement>(null);
  const inputRef = useRef<HTMLInputElement>(null);
  
  // Debounce input for API calls
  const debouncedInput = useDebounce(input, 500);
  
  // Fetch address suggestions
  useEffect(() => {
    // Don't search if user just selected an address
    if (justSelected) {
      setJustSelected(false);
      return;
    }
    
    // Don't search for short inputs
    if (!debouncedInput || debouncedInput.length < 3) {
      setSuggestions([]);
      setShowDropdown(false);
      return;
    }
    
    const fetchSuggestions = async () => {
      setIsLoading(true);
      
      try {
        const apiKey = import.meta.env.VITE_GEOAPIFY_API_KEY;
        if (!apiKey) {
          console.error('Geoapify API key missing');
          return;
        }
        
        const response = await fetch(
          `https://api.geoapify.com/v1/geocode/autocomplete?` +
          `text=${encodeURIComponent(debouncedInput)}` +
          `&apiKey=${apiKey}` +
          `&filter=countrycode:us` +
          `&limit=5`
        );
        
        if (response.ok) {
          const data = await response.json();
          setSuggestions(data.features || []);
          setShowDropdown(data.features && data.features.length > 0);
        }
      } catch (error) {
        console.error('Address search failed:', error);
      } finally {
        setIsLoading(false);
      }
    };
    
    fetchSuggestions();
  }, [debouncedInput, justSelected]);
  
  // Handle address selection
  const handleSelect = (suggestion: any) => {
    const props = suggestion.properties;
    
    // Extract ONLY street, city, state, and ZIP
    // DO NOT include apartment/suite numbers - user adds those manually
    const streetNumber = props.housenumber || '';
    const streetName = props.street || '';
    const street = `${streetNumber} ${streetName}`.trim();
    
    const addressData: AddressData = {
      street: street,
      city: props.city || props.town || props.village || '',
      state: props.state_code || props.state || '',
      zipCode: props.postcode || ''
    };
    
    // Update input with formatted address (without apt)
    const displayAddress = `${street}, ${addressData.city}, ${addressData.state} ${addressData.zipCode}`;
    setInput(displayAddress);
    
    // Mark that we just selected to prevent re-searching
    setJustSelected(true);
    
    // Close dropdown immediately
    setShowDropdown(false);
    setSuggestions([]);
    
    // Send data to parent
    onAddressSelect(addressData);
  };
  
  // Close dropdown when clicking outside
  useEffect(() => {
    const handleClickOutside = (e: MouseEvent) => {
      if (dropdownRef.current && !dropdownRef.current.contains(e.target as Node)) {
        setShowDropdown(false);
      }
    };
    
    document.addEventListener('mousedown', handleClickOutside);
    return () => document.removeEventListener('mousedown', handleClickOutside);
  }, []);
  
  // Handle input changes
  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setInput(e.target.value);
    setJustSelected(false); // Reset flag when user types
  };
  
  // Handle input focus
  const handleFocus = () => {
    // Only show dropdown if we have suggestions and didn't just select
    if (suggestions.length > 0 && !justSelected) {
      setShowDropdown(true);
    }
  };
  
  return (
    <div className="relative w-full" ref={dropdownRef}>
      <div className="relative">
        <input
          ref={inputRef}
          type="text"
          value={input}
          onChange={handleInputChange}
          onFocus={handleFocus}
          placeholder={placeholder}
          className={`w-full px-3 py-2 pr-10 bg-gray-700 border border-gray-600 rounded-lg text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-500 ${className}`}
        />
        
        {/* Loading spinner on the right */}
        {isLoading && (
          <div className="absolute right-3 top-1/2 transform -translate-y-1/2">
            <Loader2 className="h-4 w-4 animate-spin text-gray-400" />
          </div>
        )}
      </div>
      
      {/* Suggestions dropdown */}
      {showDropdown && suggestions.length > 0 && (
        <div className="absolute z-50 w-full mt-1 bg-gray-800 border border-gray-700 rounded-lg shadow-lg max-h-60 overflow-auto">
          {suggestions.map((suggestion, index) => {
            const props = suggestion.properties;
            const streetNumber = props.housenumber || '';
            const streetName = props.street || '';
            const city = props.city || props.town || '';
            const state = props.state_code || '';
            const zip = props.postcode || '';
            
            // Display format: Street, City, State ZIP (no apt/suite)
            const displayText = `${streetNumber} ${streetName}, ${city}, ${state} ${zip}`.trim();
            
            return (
              <button
                key={index}
                type="button"
                onClick={() => handleSelect(suggestion)}
                className="w-full px-3 py-2 text-left text-sm text-gray-300 hover:bg-gray-700 hover:text-white transition-colors"
              >
                {displayText}
              </button>
            );
          })}
        </div>
      )}
    </div>
  );
}
ðŸ“Œ USAGE IN ONBOARDING/CHECKOUT FORMS
typescript// In your address form component:

const [formData, setFormData] = useState({
  street: '',
  apartment: '', // Separate field for apt/suite
  city: '',
  state: '',
  zipCode: ''
});

const handleAddressSelect = (addressData: AddressData) => {
  // Populate ONLY the 4 main fields
  setFormData(prev => ({
    ...prev,
    street: addressData.street,
    city: addressData.city,
    state: addressData.state,
    zipCode: addressData.zipCode,
    // apartment stays empty - user fills manually
  }));
};

return (
  <div className="space-y-4">
    {/* Address Autocomplete */}
    <AddressAutocomplete 
      onAddressSelect={handleAddressSelect}
      placeholder="Start typing your street address..."
    />
    
    {/* Individual fields that get populated */}
    <input
      type="text"
      value={formData.street}
      onChange={(e) => setFormData({...formData, street: e.target.value})}
      placeholder="Street Address"
      className="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-lg"
    />
    
    {/* Apartment field - USER FILLS MANUALLY */}
    <input
      type="text"
      value={formData.apartment}
      onChange={(e) => setFormData({...formData, apartment: e.target.value})}
      placeholder="Apartment, suite, etc. (optional)"
      className="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-lg"
    />
    
    <div className="grid grid-cols-2 gap-4">
      <input
        type="text"
        value={formData.city}
        onChange={(e) => setFormData({...formData, city: e.target.value})}
        placeholder="City"
        className="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-lg"
      />
      
      <input
        type="text"
        value={formData.state}
        onChange={(e) => setFormData({...formData, state: e.target.value})}
        placeholder="State"
        maxLength={2}
        className="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-lg"
      />
    </div>
    
    <input
      type="text"
      value={formData.zipCode}
      onChange={(e) => setFormData({...formData, zipCode: e.target.value})}
      placeholder="ZIP Code"
      className="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-lg"
    />
  </div>
);
ðŸ“Œ KEY FIXES IMPLEMENTED:

âœ… Only populates 4 fields: Street, City, State, ZIP
âœ… No apartment numbers: Users add apt/suite manually in separate field
âœ… Loading spinner: Shows on right side during search
âœ… Dropdown doesn't reopen: justSelected flag prevents reopening after selection
âœ… Clean address format: No extra data, just the essentials
âœ… Proper debouncing: 500ms delay to reduce API calls
âœ… Click outside closes: Dropdown closes when clicking elsewhere

ðŸ“Œ VERIFY ENVIRONMENT VARIABLE:
bash# In Replit Secrets, ensure you have:
VITE_GEOAPIFY_API_KEY=your-actual-api-key-here
# Must start with VITE_ for frontend access!
This implementation ensures the dropdown only shows when actively searching, closes properly after selection, and only populates the 4 main address fields!