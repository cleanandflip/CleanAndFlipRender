FIX SEARCH DROPDOWN CLICKS & NAVIGATION BEHAVIOR

REPLIT INSTRUCTIONS:
markdown## FIX SEARCH FUNCTIONALITY & NAVIGATION

### FILE: `/client/src/components/UnifiedSearch.tsx`

### ISSUES TO FIX:
1. Clicking recent/trending items does nothing
2. Need different behavior for navbar vs products page
3. X button should navigate correctly based on context

---

### FIX 1: UPDATE handleSearch FUNCTION

FIND the handleSearch function and REPLACE with:
```jsx
const handleSearch = useCallback((searchQuery: string) => {
  // Skip empty queries
  if (!searchQuery?.trim()) {
    return;
  }
  
  // Save to recent searches
  const recent = [searchQuery, ...recentSearches.filter(s => s !== searchQuery)].slice(0, 5);
  setRecentSearches(recent);
  localStorage.setItem('recentSearches', JSON.stringify(recent));
  
  // Set the query in input
  setQuery(searchQuery);
  
  // Navigate based on variant
  if (variant === 'navbar') {
    // From navbar: always go to products page with search
    navigate(`/products?search=${encodeURIComponent(searchQuery)}`);
  } else if (variant === 'page') {
    // From products page: trigger search callback
    if (onSearch) {
      onSearch(searchQuery);
    } else {
      // Update URL params without navigation
      const url = new URL(window.location.href);
      url.searchParams.set('search', searchQuery);
      window.history.pushState(null, '', url.toString());
    }
  }
  
  // Close dropdown and remove focus
  setIsOpen(false);
  inputRef.current?.blur();
}, [recentSearches, onSearch, navigate, variant]);

FIX 2: UPDATE handleTrendingClick FUNCTION
FIND and REPLACE:
jsxconst handleTrendingClick = (item: string) => {
  setQuery(item);  // Set the query first
  setTimeout(() => {
    handleSearch(item);  // Then search after state update
  }, 0);
};

FIX 3: FIX THE X BUTTON CLEAR HANDLER
FIND the X button onClick and REPLACE with:
jsxonClick={() => {
  // Clear query
  setQuery('');
  setResults([]);
  setIsOpen(false);
  
  if (variant === 'navbar') {
    // Navbar: go to home
    navigate('/');
  } else if (variant === 'page') {
    // Products page: clear search, show all products
    if (onSearch) {
      onSearch(''); // Trigger search with empty string
    }
    // Clear URL params
    const url = new URL(window.location.href);
    url.searchParams.delete('search');
    window.history.pushState(null, '', url.pathname);
  }
  
  inputRef.current?.blur();
}}

FIX 4: UPDATE RECENT SEARCHES CLICK HANDLER
FIND the recent searches button and ensure it has proper onClick:
jsx{recentSearches.map((search, idx) => (
  <button
    key={idx}
    onClick={(e) => {
      e.preventDefault();
      e.stopPropagation();
      handleTrendingClick(search);
    }}
    className="w-full px-4 py-2 text-left hover:bg-white hover:bg-opacity-5 transition-colors"
    style={{ color: theme.colors.textPrimary }}
  >
    {search}
  </button>
))}

FIX 5: UPDATE TRENDING ITEMS CLICK HANDLER
FIND trending items and ensure proper onClick:
jsx{trendingItems.map((item, idx) => (
  <button
    key={idx}
    onClick={(e) => {
      e.preventDefault();
      e.stopPropagation();
      handleTrendingClick(item);
    }}
    className="w-full px-4 py-2 text-left hover:bg-white hover:bg-opacity-5 transition-colors"
    style={{ color: theme.colors.textPrimary }}
  >
    {item}
  </button>
))}

FIX 6: UPDATE ENTER KEY HANDLER
FIND the onKeyDown handler and UPDATE:
jsxonKeyDown={(e) => {
  if (e.key === 'Enter') {
    e.preventDefault();
    if (query.trim()) {
      handleSearch(query);
    }
  } else if (e.key === 'Escape') {
    e.preventDefault();
    setQuery('');
    setResults([]);
    setIsOpen(false);
    inputRef.current?.blur();
  }
}}

FIX 7: ENSURE PRODUCTS PAGE USES CORRECT VARIANT
FILE: /client/src/pages/Products.tsx or wherever products page search is
ENSURE UnifiedSearch is called with correct props:
jsx// In navbar (Navigation.tsx)
<UnifiedSearch 
  variant="navbar"
  placeholder="Search equipment..."
  className="flex-1 max-w-md"
/>

// In products page
<UnifiedSearch 
  variant="page"
  placeholder="Search products..."
  onSearch={(query) => {
    // Filter products based on query
    setSearchQuery(query);
    // Fetch filtered products or filter existing ones
    if (query) {
      const filtered = products.filter(p => 
        p.name.toLowerCase().includes(query.toLowerCase()) ||
        p.description?.toLowerCase().includes(query.toLowerCase())
      );
      setFilteredProducts(filtered);
    } else {
      setFilteredProducts(products); // Show all when cleared
    }
  }}
/>

FIX 8: DEBUG - Add console logs temporarily
Add these to debug clicks:
jsxconst handleTrendingClick = (item: string) => {
  console.log('Trending clicked:', item);
  setQuery(item);
  setTimeout(() => {
    console.log('Executing search for:', item);
    handleSearch(item);
  }, 0);
};

// In handleSearch
console.log('handleSearch called:', searchQuery, 'variant:', variant);

COMPLETE WORKING FLOW:
NAVBAR SEARCH:
Type "dumbbells" → Navigate to /products?search=dumbbells
Click trending "Bench Press" → Navigate to /products?search=bench+press
Click X → Navigate to / (home)
PRODUCTS PAGE SEARCH:
Type "barbell" → Filter products on same page
Click recent "Dumbbells" → Filter to dumbbells
Click X → Show all products (clear filter)
KEY POINTS:

✅ Use setTimeout for state updates before navigation
✅ Add e.preventDefault() to all button clicks
✅ Different behavior based on variant prop
✅ Clear URL params appropriately
✅ Ensure onSearch callback is passed on products page


This will make all the dropdown buttons work and implement the correct navigation behavior!