What the logs are telling us
Telemetry spam

POST /api/observability/errors 400 is firing dozens of times per page load (dev + HeadlessChrome). That’s wasted traffic and noise.

Cart remove path normalization issue

We log “CART REQUEST BLOCKED” for /cart/remove/:id while the originalUrl is /api/cart/remove/:id.

Then we see both DELETE /remove/:id and DELETE /api/cart/remove/:id returning 200. This indicates conflicting mounts / path rewriting and a guard that’s logging false positives.

Track-activity is noisy

/api/track-activity is posted constantly. Throttle in client and accept fast in server.

Checkout/addresses still inconsistent

GET /api/addresses 200 is fine, but UI isn’t prefilling default, and there’s still legacy components in play.

🔥 Step 0 — Purge all legacy checkout/address files (and keep them purged)
Delete and git remove these paths (they’re causing regressions):

bash
Copy
Edit
src/pages/checkout.tsx            // old one
src/pages/checkout-new.tsx
src/pages/checkout.jsx
src/components/checkout/**        // anything not referenced below
src/pages/onboarding/legacy/**
src/hooks/useDefaultAddress.ts*
src/hooks/useCheckout.ts*
Keep and use only:

css
Copy
Edit
src/pages/checkout-simple.tsx   → rename to src/pages/checkout.tsx
src/components/checkout/AddressBlock.tsx
src/hooks/use-addresses.ts
src/components/addresses/AddressForm.tsx
src/components/AddToCartButton.tsx
Route swap (src/config/routes.ts): route /checkout to pages/checkout.tsx (the renamed simple page). Remove every import of the deleted pages.

Guard: add a denylist check that fails the build if any purged file reappears.

json
Copy
Edit
// package.json
"scripts": {
  "prebuild": "node scripts/denylist-check.js"
}
js
Copy
Edit
// scripts/denylist-check.js
const fs = require('fs'); const bad = [
  'src/pages/checkout.tsx',
  'src/pages/checkout-new.tsx',
  'src/pages/checkout.jsx',
  'src/components/checkout/',
  'src/pages/onboarding/legacy/',
  'src/hooks/useDefaultAddress.ts',
  'src/hooks/useCheckout.ts'
];
const found = bad.filter(p=>fs.existsSync(p));
if (found.length) { console.error('Denied paths present:\n', found.join('\n')); process.exit(1); }
🛒 Step 1 — Cart API: fix route mounts + remove false “blocked” logs
Root cause: the cart router is likely mounted twice (once under /api and once naked), or a guard inspects req.path instead of req.originalUrl, creating misleading “blocked” logs while the request still succeeds.

Server routing (normalize)

ts
Copy
Edit
// server/index.ts
import apiRouter from './routes/api';
app.use('/api', apiRouter);       // ✅ single API prefix
// DO NOT mount cartRouter anywhere else
ts
Copy
Edit
// server/routes/api.ts
import { Router } from 'express';
import cartRouter from './cart';
import addressRouter from './addresses';
const api = Router();
api.use('/cart', cartRouter);
api.use('/addresses', addressRouter);
export default api;
ts
Copy
Edit
// server/routes/cart.ts
import { Router } from 'express';
const r = Router();

// Add/update item (idempotent)
r.post('/upsert', requireAuth, upsertCartItem);

// Remove item by itemId
r.delete('/remove/:itemId', requireAuth, removeCartItem);

// Validate cart
r.post('/validate', requireAuthOptional, validateCart);

export default r;
Remove the noisy “CART REQUEST BLOCKED” logger or make it accurate:

ts
Copy
Edit
// If you must keep it:
if (!req.originalUrl.startsWith('/api/cart')) return next(); // don’t log noise
Client API wrapper must hit only the normalized paths

ts
Copy
Edit
// src/api/cart.ts
import http from './http';
export const addToCart     = (productId:string, qty=1)=> http.post('/api/cart/upsert', { productId, qty });
export const removeFromCart= (itemId:string)=>              http.delete(`/api/cart/remove/${itemId}`);
export const validateCart  = ()=>                           http.post('/api/cart/validate', {});
export const fetchCart     = ()=>                           http.get('/api/cart');
Return updated cart from every cart mutation so the UI can reconcile quickly.

⚡ Step 2 — Make Add/Remove instant (optimistic UI)
Replace src/components/AddToCartButton.tsx with an optimistic version (blue → green, hover ✖ remove). (We already provided a full component earlier; use that exact logic with TanStack Query, mutation onMutate + onSettled and an optimisticAdd/optimisticRemove helper.)

📬 Step 3 — Quiet the telemetry & throttle activity
Client: disable error reporting in dev & headless

ts
Copy
Edit
// src/lib/errorTracking.ts
export function reportError(payload:any) {
  if (import.meta.env.DEV) return;                      // skip in dev
  if (navigator.userAgent.includes('HeadlessChrome')) return;
  return fetch('/api/observability/errors', { method:'POST', headers:{'Content-Type':'application/json'}, body: JSON.stringify(payload) });
}
Server: guard the endpoint

ts
Copy
Edit
// server/routes/observability.ts
if (process.env.NODE_ENV !== 'production') return res.status(204).end();
// validate schema here, else 204
Track-activity debounce (client)

ts
Copy
Edit
// src/services/activity.ts
let last = 0;
export function trackActivity(event:string){
  const now = Date.now();
  if (now - last < 15000) return;  // 1 ping per 15s
  last = now;
  navigator.sendBeacon?.('/api/track-activity', JSON.stringify({event})) ||
    fetch('/api/track-activity',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({event})});
}
Server handler: always 202 fast, no heavy work.

🏠 Step 4 — Address rules (SSOT) + default + delete
DB & model
Ensure columns is_default (unique per user) and is_local exist; create the partial unique index (see earlier message). Auto-set first address as default on create.

Endpoints

GET /api/addresses → list (default first)

POST /api/addresses → create; if user has none, force isDefault=true; derive is_local

PATCH /api/addresses/:id → update; derive is_local

POST /api/addresses/:id/default → transactional flip (set others false)

DELETE /api/addresses/:id → reject if is_default=true (tell client to switch default first)

Dashboard UI

Default card shows “Default” badge; Delete hidden/disabled.

Non-default cards: Set default + Delete.

Add this missing Delete action now (wired to DELETE /api/addresses/:id).

🧾 Step 5 — Checkout that always works (prefill + read-only saved)
Hook (no null destructure)

ts
Copy
Edit
// src/hooks/use-addresses.ts
export function useAddresses(){
  const q = useQuery({ queryKey:['addresses','list'], queryFn: fetchAddresses });
  const list = q.data ?? [];
  const def = list.find(a=>a.isDefault) ?? null;
  return { addresses:list, defaultAddress:def, ...q };
}
Page logic (src/pages/checkout.tsx)

On mount:

Load cart + addresses.

If defaultAddress exists, set selectedAddressId = defaultAddress.id.

Saved address path → read-only card with “Change” & “Manage” buttons.

“Choose saved…” opens a modal list (all addresses) → selecting switches selectedAddressId.

“Use new address” reveals AddressForm (editable). Saving:

POST /api/addresses (optionally default via checkbox)

set it selected

invalidateQueries(['addresses','list'])

Shipping section

Hidden until an address is selected.

isLocal === true → show “Local Delivery (≤50 mi)”.

Else → show “Ground Shipping”.
(Recompute on address change; the server sets is_local during create/update using Geo coords and your 50-mile rule.)

🧭 Step 6 — Geoapify mapping (fills all fields)
Fix address-autocomplete onSelect mapping so we never end with half-filled forms (lat/lng too):

ts
Copy
Edit
setValue('line1', c.address_line1 || `${c.housenumber ?? ''} ${c.street ?? ''}`.trim());
setValue('line2', c.unit ?? '');
setValue('city', c.city || c.town || c.village || '');
setValue('state', c.state_code || '');
setValue('postalCode', c.postcode || '');
setValue('country', (c.country_code || 'US').toUpperCase());
setValue('lat', feature.geometry?.coordinates?.[1] ?? null);
setValue('lng', feature.geometry?.coordinates?.[0] ?? null);
🚀 Step 7 — Small performance wins
Enable gzip/deflate on /api/products/featured and /api/categories.

Add indexes:

CREATE INDEX IF NOT EXISTS cart_items_user_product ON cart_items(user_id, product_id);

CREATE INDEX IF NOT EXISTS addresses_user ON addresses(user_id);

Cache Geoapify server responses for 60s per text query.

✅ Acceptance checklist (please verify)
Cart

 Blue Add to Cart → instant green In Cart; hover shows ✖ Remove; works without jank.

 Only /api/cart/* endpoints are used; no more “CART REQUEST BLOCKED” logs.

 Every mutation returns the updated cart.

Addresses / Profile

 First address is auto-default on creation.

 Default badge visible; non-default entries can Set default and Delete.

 Attempting to delete default is blocked with a helpful toast.

Checkout

 Default address preselected and read-only on load.

 “Choose saved…” shows all saved addresses; selecting one updates shipping.

 “Use new address” opens editable form; saving adds it (and can set as default).

 Shipping options appear as soon as an address is selected (Local vs Ground).

Noise

 No POST /api/observability/errors 400 spam in dev/headless.

 /api/track-activity debounced (≤1 per 15s).

Make these exact changes and the behavior you asked for will be locked in: default/secondary addresses work end-to-end, checkout prefills correctly, shipping options show reliably, cart UX is instant, and logs are finally clean.









Ask ChatGPT
