Instructions for Replit - Fix Critical Authentication and Access Issues
Tell Replit:
"There are CRITICAL issues across the site. Users can't log in, products won't load, and error handling is broken. Fix these issues IMMEDIATELY:
CRITICAL ISSUES TO FIX:

LOGIN IS BROKEN - Users can't log in even with correct credentials
PRODUCTS PAGE ERROR - Shows "Failed to load products" instead of products
SUBMIT PAGE ERROR - Shows error instead of redirecting non-logged users
NO PUBLIC ACCESS - Site requires login for basic browsing

PHASE 1: FIX LOGIN FUNCTIONALITY
Check these issues:
bash# Find login endpoint
grep -rn "login" server/routes.ts

# Check session configuration
grep -rn "session\|express-session" server/

# Check password hashing
grep -rn "bcrypt\|password" server/

# Check CORS and credentials
grep -rn "cors\|credentials" server/
Common Login Issues to Fix:

Session not saving - Check session middleware configuration
CORS blocking cookies - Ensure credentials: true in CORS
Password comparison failing - Check bcrypt implementation
Session secret missing - Verify SESSION_SECRET env variable
Cookie settings - Check secure, sameSite, httpOnly settings

PHASE 2: FIX PRODUCTS PAGE PUBLIC ACCESS
The products page MUST work without login:
bash# Find products API endpoint
grep -rn "/api/products" server/

# Check for authentication middleware
grep -rn "requireAuth.*products" server/

# Find the error message source
grep -rn "Failed to load products" client/src/
Required Fixes:

Remove authentication requirement from GET /api/products
Make product browsing public - Only require auth for admin actions
Fix error handling - Show products, not errors
Check API response - Ensure it returns data for public users

PHASE 3: FIX SUBMIT PAGE ACCESS
Non-logged users should be redirected, not see errors:
bash# Find submit page component
find client/src -name "*ubmit*" -o -name "*ell*"

# Check route protection
grep -rn "useAuth\|requireAuth" client/src/pages/
Required Fixes:

Add authentication check before rendering submit form
Redirect to login if not authenticated
Show message "Please log in to sell equipment"
Remove error display for non-authenticated users

PHASE 4: IMPLEMENT PROPER PUBLIC/PRIVATE ROUTES
PUBLIC ROUTES (no login required):

GET /api/products
GET /api/products/:id
GET /api/categories
GET /api/search
Home page
Products page
Product details
About page

PRIVATE ROUTES (login required):

POST/PUT/DELETE /api/products (admin only)
/api/cart
/api/orders
/api/wishlist
/api/user
Submit equipment page
Dashboard
Checkout

PHASE 5: SPECIFIC FIXES
Fix Login API:
javascript// In server/routes.ts
app.post('/api/login', async (req, res) => {
  try {
    const { email, password } = req.body;
    
    // Find user
    const user = await db.select().from(users).where(eq(users.email, email)).limit(1);
    
    if (!user || !await bcrypt.compare(password, user.password)) {
      return res.status(401).json({ error: 'Invalid credentials' });
    }
    
    // Save session
    req.session.userId = user.id;
    req.session.save((err) => {
      if (err) {
        return res.status(500).json({ error: 'Session save failed' });
      }
      res.json({ success: true, user });
    });
  } catch (error) {
    console.error('Login error:', error);
    res.status(500).json({ error: 'Login failed' });
  }
});
Fix Products API:
javascript// Remove auth middleware from public endpoints
app.get('/api/products', async (req, res) => {
  // NO requireAuth middleware here!
  try {
    const products = await db.select().from(products);
    res.json({ products });
  } catch (error) {
    res.status(500).json({ error: 'Failed to fetch products' });
  }
});
Fix Submit Page:
javascript// In SubmitEquipment component
useEffect(() => {
  if (!user) {
    // Redirect to login with return URL
    navigate('/login?redirect=/submit');
  }
}, [user, navigate]);

// Show loading or redirect, not error
if (!user) {
  return (
    <div>
      <p>Please log in to sell equipment</p>
      <Button onClick={() => navigate('/login')}>Log In</Button>
    </div>
  );
}
PHASE 6: SESSION CONFIGURATION
Check and fix session setup:
javascript// In server/index.ts
app.use(session({
  secret: process.env.SESSION_SECRET || 'dev-secret',
  resave: false,
  saveUninitialized: false,
  cookie: {
    secure: process.env.NODE_ENV === 'production',
    httpOnly: true,
    sameSite: 'lax',
    maxAge: 7 * 24 * 60 * 60 * 1000 // 7 days
  },
  store: // PostgreSQL session store
}));

// CORS must include credentials
app.use(cors({
  origin: process.env.CLIENT_URL || 'http://localhost:5173',
  credentials: true
}));
PHASE 7: CLIENT-SIDE FIXES
Ensure fetch requests include credentials:
javascript// In api client
fetch(url, {
  method: 'POST',
  headers: { 'Content-Type': 'application/json' },
  credentials: 'include', // CRITICAL for cookies
  body: JSON.stringify(data)
});
PHASE 8: TESTING CHECKLIST
After fixes, verify:

 Can browse products without login
 Can search without login
 Can view product details without login
 Login works with correct credentials
 Submit page redirects non-logged users
 Session persists after login
 Logout works properly
 Protected routes require authentication

PRIORITY ORDER:

FIX LOGIN FIRST - Nothing works without this
Make products public - Core functionality
Fix submit page redirect - Better UX
Test everything - Ensure it works

COMMON MISTAKES TO AVOID:

Don't require auth for browsing products
Don't show errors instead of redirecting
Include credentials in all API calls
Ensure session middleware is properly configured
Check environment variables are set

Fix these issues NOW. The site is unusable without them."