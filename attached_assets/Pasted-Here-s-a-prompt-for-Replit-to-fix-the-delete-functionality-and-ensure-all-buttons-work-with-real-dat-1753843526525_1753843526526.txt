Here's a prompt for Replit to fix the delete functionality and ensure all buttons work with real data:

Fix Delete Product Error & Make All Dashboard Buttons Functional with Real Data
1. Fix the Delete Product Error
The error shows the URL is being passed as the HTTP method. Fix the API request function:
typescript// In /client/src/lib/queryClient.ts
async function apiRequest(
  url: string,
  method: string = 'GET', // Make sure method has a default
  data?: unknown
): Promise<Response> {
  const res = await fetch(url, {
    method: method, // Ensure method is properly passed
    headers: {
      'Content-Type': 'application/json',
      // Add any auth headers if needed
    },
    body: data ? JSON.stringify(data) : undefined,
  });
  
  if (!res.ok) {
    throw new Error(`API request failed: ${res.statusText}`);
  }
  
  return res;
}
2. Fix Delete Product Button Implementation
typescript// In /client/src/pages/admin.tsx
const deleteProductMutation = useMutation({
  mutationFn: async (productId: string) => {
    // Fix: Pass method as second parameter
    return apiRequest(`/api/admin/products/${productId}`, 'DELETE');
  },
  onSuccess: () => {
    // Refresh products list after deletion
    queryClient.invalidateQueries(['products']);
    toast.success('Product deleted successfully');
  },
  onError: (error) => {
    toast.error('Failed to delete product');
    console.error('Delete error:', error);
  }
});

const handleDeleteProduct = (productId: string) => {
  if (confirm('Are you sure you want to delete this product?')) {
    deleteProductMutation.mutate(productId);
  }
};
3. Remove ALL Mock Data - Use Real Database
Find and remove any mock data arrays like:
typescript// REMOVE THESE:
const mockProducts = [...];
const mockUsers = [...];
const mockAnalytics = {...};

// REPLACE WITH:
const { data: products, isLoading } = useQuery({
  queryKey: ['admin', 'products'],
  queryFn: () => fetch('/api/admin/products').then(r => r.json())
});

const { data: users } = useQuery({
  queryKey: ['admin', 'users'],  
  queryFn: () => fetch('/api/admin/users').then(r => r.json())
});

const { data: stats } = useQuery({
  queryKey: ['admin', 'stats'],
  queryFn: () => fetch('/api/admin/stats').then(r => r.json()),
  refetchInterval: 30000 // Refresh every 30 seconds
});
4. Implement ALL Button Functions
typescript// Product Management Buttons
const productActions = {
  // Add New Product
  handleAddProduct: () => {
    navigate('/admin/products/new');
  },
  
  // View Product
  handleViewProduct: (productId: string) => {
    window.open(`/products/${productId}`, '_blank');
  },
  
  // Edit Product  
  handleEditProduct: (productId: string) => {
    navigate(`/admin/products/edit/${productId}`);
  },
  
  // Toggle Stock Status
  handleToggleStock: async (productId: string, currentStatus: string) => {
    const newStatus = currentStatus === 'in_stock' ? 'out_of_stock' : 'in_stock';
    await apiRequest(`/api/admin/products/${productId}/status`, 'PUT', { status: newStatus });
    queryClient.invalidateQueries(['admin', 'products']);
  }
};

// User Management Actions
const userActions = {
  // Change User Role
  handleRoleChange: async (userId: string, newRole: string) => {
    await apiRequest(`/api/admin/users/${userId}/role`, 'PUT', { role: newRole });
    queryClient.invalidateQueries(['admin', 'users']);
  },
  
  // Block/Unblock User
  handleToggleBlock: async (userId: string, isBlocked: boolean) => {
    await apiRequest(`/api/admin/users/${userId}/block`, 'PUT', { blocked: !isBlocked });
    queryClient.invalidateQueries(['admin', 'users']);
  },
  
  // View User Details
  handleViewUser: (userId: string) => {
    navigate(`/admin/users/${userId}`);
  }
};

// Export Functions
const exportActions = {
  handleExportProducts: async () => {
    const response = await fetch('/api/admin/export/products');
    const blob = await response.blob();
    downloadFile(blob, 'products.csv');
  },
  
  handleExportUsers: async () => {
    const response = await fetch('/api/admin/export/users');
    const blob = await response.blob();
    downloadFile(blob, 'users.csv');
  },
  
  handleExportOrders: async () => {
    const response = await fetch('/api/admin/export/orders');
    const blob = await response.blob();
    downloadFile(blob, 'orders.csv');
  }
};

// Helper function for downloads
function downloadFile(blob: Blob, filename: string) {
  const url = window.URL.createObjectURL(blob);
  const a = document.createElement('a');
  a.href = url;
  a.download = filename;
  document.body.appendChild(a);
  a.click();
  document.body.removeChild(a);
  window.URL.revokeObjectURL(url);
}
5. Add Missing API Endpoints
typescript// Server-side endpoints needed
// In server/admin-routes.ts

// Get all products with details
app.get('/api/admin/products', requireAdmin, async (req, res) => {
  const products = await db.select().from(products).orderBy('created_at', 'desc');
  res.json(products);
});

// Delete product
app.delete('/api/admin/products/:id', requireAdmin, async (req, res) => {
  await db.delete(products).where({ id: req.params.id });
  res.json({ success: true });
});

// Update product status
app.put('/api/admin/products/:id/status', requireAdmin, async (req, res) => {
  await db.update(products)
    .set({ status: req.body.status })
    .where({ id: req.params.id });
  res.json({ success: true });
});

// Get dashboard stats
app.get('/api/admin/stats', requireAdmin, async (req, res) => {
  const [productCount, userCount, orderCount, revenue] = await Promise.all([
    db.select(count()).from(products),
    db.select(count()).from(users),
    db.select(count()).from(orders),
    db.select(sum('total')).from(orders).where({ status: 'completed' })
  ]);
  
  res.json({
    totalProducts: productCount[0].count,
    totalUsers: userCount[0].count,
    totalOrders: orderCount[0].count,
    totalRevenue: revenue[0].sum || 0
  });
});

// Get analytics data
app.get('/api/admin/analytics', requireAdmin, async (req, res) => {
  const now = new Date();
  const lastWeek = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);
  
  const analytics = {
    pageViews: await getPageViews(lastWeek, now),
    activeUsers: await getActiveUsers(),
    conversionRate: await getConversionRate(lastWeek, now),
    avgOrderValue: await getAverageOrderValue(lastWeek, now),
    recentActivity: await getRecentActivity(10),
    topProducts: await getTopProducts(5)
  };
  
  res.json(analytics);
});
6. Add Loading States & Error Handling
typescript// Show loading state while fetching
if (isLoading) {
  return <div className="loading-spinner">Loading...</div>;
}

// Show error state
if (error) {
  return <div className="error-message">Failed to load data</div>;
}

// Empty states
if (!products || products.length === 0) {
  return (
    <div className="empty-state">
      <p>No products yet</p>
      <Button onClick={handleAddProduct}>Add First Product</Button>
    </div>
  );
}
7. Auto-refresh Live Data
typescript// Use react-query's refetch intervals
const { data: liveStats } = useQuery({
  queryKey: ['admin', 'live-stats'],
  queryFn: fetchLiveStats,
  refetchInterval: 5000, // Update every 5 seconds
  refetchIntervalInBackground: true
});

// Activity feed that updates
const { data: activityFeed } = useQuery({
  queryKey: ['admin', 'activity'],
  queryFn: () => fetch('/api/admin/activity').then(r => r.json()),
  refetchInterval: 10000 // Update every 10 seconds
});
Summary:

Fix the apiRequest function to properly pass HTTP method
Remove ALL mock data - connect to real database
Implement all button click handlers
Add proper error handling and loading states
Set up auto-refresh for live data
Create all necessary API endpoints

Please implement these changes to make the developer dashboard fully functional with real data only.