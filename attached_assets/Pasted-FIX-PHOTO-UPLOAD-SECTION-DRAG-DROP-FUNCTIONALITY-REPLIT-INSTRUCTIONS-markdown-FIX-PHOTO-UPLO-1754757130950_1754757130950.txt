FIX PHOTO UPLOAD SECTION - DRAG & DROP FUNCTIONALITY

REPLIT INSTRUCTIONS:
markdown## FIX PHOTO UPLOAD IN SELL TO US PAGE

### FILE: `/client/src/pages/SellToUs.tsx`

### ISSUES TO FIX:
1. Drag and drop doesn't work - no handlers implemented
2. Border too dark - can't see the dashed border
3. No file input functionality
4. Upload button doesn't do anything

### FIXES:

#### 1. ADD FILE UPLOAD STATE AND HANDLERS
After the existing state declarations, ADD:
```jsx
const [isDragging, setIsDragging] = useState(false);
const [uploadedImages, setUploadedImages] = useState<string[]>([]);
const [imageFiles, setImageFiles] = useState<File[]>([]);
const fileInputRef = useRef<HTMLInputElement>(null);
2. ADD DRAG AND DROP HANDLERS
Add these functions before the onSubmit function:
jsxconst handleDragEnter = (e: React.DragEvent) => {
  e.preventDefault();
  e.stopPropagation();
  setIsDragging(true);
};

const handleDragLeave = (e: React.DragEvent) => {
  e.preventDefault();
  e.stopPropagation();
  setIsDragging(false);
};

const handleDragOver = (e: React.DragEvent) => {
  e.preventDefault();
  e.stopPropagation();
};

const handleDrop = (e: React.DragEvent) => {
  e.preventDefault();
  e.stopPropagation();
  setIsDragging(false);
  
  const files = Array.from(e.dataTransfer.files);
  handleFiles(files);
};

const handleFiles = (files: File[]) => {
  const imageFiles = files.filter(file => file.type.startsWith('image/'));
  
  if (imageFiles.length === 0) {
    toast({
      title: "Invalid files",
      description: "Please upload image files only",
      variant: "destructive"
    });
    return;
  }
  
  // Convert to base64 for preview
  imageFiles.forEach(file => {
    const reader = new FileReader();
    reader.onload = (e) => {
      const base64 = e.target?.result as string;
      setUploadedImages(prev => [...prev, base64]);
    };
    reader.readAsDataURL(file);
  });
  
  setImageFiles(prev => [...prev, ...imageFiles]);
  
  toast({
    title: "Photos uploaded",
    description: `${imageFiles.length} photo(s) added successfully`
  });
};

const handleFileSelect = (e: React.ChangeEvent<HTMLInputElement>) => {
  const files = Array.from(e.target.files || []);
  handleFiles(files);
};

const removeImage = (index: number) => {
  setUploadedImages(prev => prev.filter((_, i) => i !== index));
  setImageFiles(prev => prev.filter((_, i) => i !== index));
};
3. REPLACE THE PHOTO UPLOAD SECTION
FIND this section:
jsx{/* Photo Upload */}
<Card className="p-6">
  <h3 className="font-bebas text-2xl mb-4">PHOTOS</h3>
  ...
</Card>
REPLACE WITH:
jsx{/* Photo Upload */}
<Card className="p-6">
  <h3 className="font-bebas text-2xl mb-4">PHOTOS</h3>
  <p className="text-text-secondary mb-6">
    Upload clear photos showing the equipment from multiple angles. 
    Include any wear, damage, or unique features.
  </p>
  
  {/* Hidden file input */}
  <input
    ref={fileInputRef}
    type="file"
    multiple
    accept="image/*"
    onChange={handleFileSelect}
    className="hidden"
  />
  
  {/* Drop zone */}
  <div
    onDragEnter={handleDragEnter}
    onDragLeave={handleDragLeave}
    onDragOver={handleDragOver}
    onDrop={handleDrop}
    onClick={() => fileInputRef.current?.click()}
    className={`
      border-2 border-dashed rounded-lg p-8 text-center cursor-pointer
      transition-all duration-200
      ${isDragging 
        ? 'border-blue-500 bg-blue-500/10' 
        : 'border-gray-600 hover:border-gray-500 hover:bg-white/5'
      }
    `}
  >
    <Upload className="mx-auto mb-4 text-gray-400" size={48} />
    <h4 className="font-semibold mb-2 text-white">
      {isDragging ? 'Drop photos here' : 'Upload Photos'}
    </h4>
    <p className="text-gray-400 mb-4">
      Drag and drop photos here, or click to select
    </p>
    <Button 
      type="button"
      variant="outline" 
      className="border-gray-600 hover:border-gray-500"
      onClick={(e) => {
        e.stopPropagation();
        fileInputRef.current?.click();
      }}
    >
      Choose Files
    </Button>
  </div>
  
  {/* Image Preview Grid */}
  {uploadedImages.length > 0 && (
    <div className="mt-6 grid grid-cols-3 gap-4">
      {uploadedImages.map((image, index) => (
        <div key={index} className="relative group">
          <img 
            src={image} 
            alt={`Upload ${index + 1}`}
            className="w-full h-32 object-cover rounded-lg"
          />
          <button
            type="button"
            onClick={() => removeImage(index)}
            className="absolute top-2 right-2 p-1 bg-red-500 rounded-full 
                       opacity-0 group-hover:opacity-100 transition-opacity"
          >
            <X className="w-4 h-4 text-white" />
          </button>
        </div>
      ))}
    </div>
  )}
  
  {/* Upload hints */}
  <div className="mt-4 text-sm text-gray-400">
    <p>• Upload 3-8 photos for best results</p>
    <p>• Show front, back, and detail views</p>
    <p>• Highlight any wear or damage</p>
    <p className="text-xs mt-2">
      {uploadedImages.length} of 8 photos uploaded
    </p>
  </div>
</Card>
4. UPDATE FORM SUBMISSION
In the onSubmit function, make sure images are included:
jsxconst onSubmit = (data: SubmissionForm) => {
  const submissionData = {
    ...data,
    images: uploadedImages // Include uploaded images
  };
  submitMutation.mutate(submissionData);
};
5. ADD MISSING IMPORT
At the top of the file, ensure X icon is imported:
jsximport { 
  Upload, 
  DollarSign, 
  Camera, 
  CheckCircle, 
  Clock, 
  Truck,
  Star,
  MessageSquare,
  Copy,
  Eye,
  X  // Add this
} from "lucide-react";
KEY IMPROVEMENTS:

✅ Functional drag and drop
✅ Visible border (gray-600 instead of border-border)
✅ Click to upload works
✅ Image preview grid
✅ Remove image functionality
✅ Visual feedback when dragging
✅ File type validation
✅ Upload counter
✅ Hover states for better UX


This will make the photo upload section fully functional with proper drag & drop, visible borders, and image preview capabilities!