issue, i still do not receive password reset email when requested, also ensure password reset does not send email for reset to non-existing users, implement

Email Routing Configuration Instructions for Replit
Here are comprehensive instructions for Replit to ensure each email type is sent from the correct address:

REPLIT: IMPLEMENT PROPER EMAIL ROUTING
Please update the email service to ensure all emails are sent from the appropriate addresses based on their purpose:
1. Update Email Service Configuration
Update /server/services/email.service.ts:
typescriptimport { Resend } from 'resend';
import * as EmailTemplates from '../emails';

const resend = new Resend(process.env.RESEND_API_KEY);

// Email routing configuration
const EMAIL_ROUTING = {
  // Support emails (from support@cleanandflip.com)
  password_reset: {
    from: 'Clean & Flip Support <support@cleanandflip.com>',
    replyTo: 'support@cleanandflip.com',
    category: 'support'
  },
  password_reset_success: {
    from: 'Clean & Flip Support <support@cleanandflip.com>',
    replyTo: 'support@cleanandflip.com',
    category: 'support'
  },
  welcome: {
    from: 'Clean & Flip Support <support@cleanandflip.com>',
    replyTo: 'support@cleanandflip.com',
    category: 'support'
  },
  equipment_submission: {
    from: 'Clean & Flip Support <support@cleanandflip.com>',
    replyTo: 'support@cleanandflip.com',
    category: 'support'
  },
  newsletter: {
    from: 'Clean & Flip Support <support@cleanandflip.com>',
    replyTo: 'support@cleanandflip.com',
    category: 'marketing'
  },
  price_drop_alert: {
    from: 'Clean & Flip Support <support@cleanandflip.com>',
    replyTo: 'support@cleanandflip.com',
    category: 'marketing'
  },

  // Order emails (from orders@cleanandflip.com)
  order_confirmation: {
    from: 'Clean & Flip Orders <orders@cleanandflip.com>',
    replyTo: 'orders@cleanandflip.com',
    bcc: 'admin@cleanandflip.com', // Admin gets copies
    category: 'transactional'
  },
  order_status_update: {
    from: 'Clean & Flip Orders <orders@cleanandflip.com>',
    replyTo: 'orders@cleanandflip.com',
    category: 'transactional'
  },
  order_shipped: {
    from: 'Clean & Flip Orders <orders@cleanandflip.com>',
    replyTo: 'orders@cleanandflip.com',
    category: 'transactional'
  },
  order_ready_for_pickup: {
    from: 'Clean & Flip Orders <orders@cleanandflip.com>',
    replyTo: 'orders@cleanandflip.com',
    category: 'transactional'
  },
  return_request: {
    from: 'Clean & Flip Orders <orders@cleanandflip.com>',
    replyTo: 'orders@cleanandflip.com',
    bcc: 'admin@cleanandflip.com',
    category: 'transactional'
  },
  refund_processed: {
    from: 'Clean & Flip Orders <orders@cleanandflip.com>',
    replyTo: 'orders@cleanandflip.com',
    category: 'transactional'
  },

  // Admin emails (from admin@cleanandflip.com)
  admin_notification: {
    from: 'Clean & Flip Admin <admin@cleanandflip.com>',
    to: 'admin@cleanandflip.com', // Admin emails go to admin
    replyTo: 'admin@cleanandflip.com',
    category: 'admin'
  },
  new_order_alert: {
    from: 'Clean & Flip Admin <admin@cleanandflip.com>',
    to: 'admin@cleanandflip.com',
    replyTo: 'admin@cleanandflip.com',
    category: 'admin'
  },
  low_stock_alert: {
    from: 'Clean & Flip Admin <admin@cleanandflip.com>',
    to: 'admin@cleanandflip.com',
    replyTo: 'admin@cleanandflip.com',
    category: 'admin'
  },
  daily_summary: {
    from: 'Clean & Flip Admin <admin@cleanandflip.com>',
    to: 'admin@cleanandflip.com',
    replyTo: 'admin@cleanandflip.com',
    category: 'admin'
  },
  security_alert: {
    from: 'Clean & Flip Admin <admin@cleanandflip.com>',
    to: 'admin@cleanandflip.com',
    replyTo: 'admin@cleanandflip.com',
    priority: 'high',
    category: 'admin'
  }
};

export class EmailService {
  // Generic send method that uses routing configuration
  async send(templateType: string, data: any) {
    const routing = EMAIL_ROUTING[templateType];
    
    if (!routing) {
      throw new Error(`Unknown email template type: ${templateType}`);
    }

    try {
      // Log the email attempt
      console.log(`Sending ${templateType} email:`, {
        from: routing.from,
        to: data.to || routing.to,
        category: routing.category
      });

      const emailOptions = {
        from: routing.from,
        to: data.to || routing.to,
        replyTo: routing.replyTo,
        bcc: routing.bcc,
        subject: data.subject || this.getDefaultSubject(templateType),
        react: this.getTemplate(templateType, data),
        tags: [
          { name: 'category', value: routing.category },
          { name: 'type', value: templateType }
        ]
      };

      // Send via Resend
      const result = await resend.emails.send(emailOptions);

      // Log success
      await this.logEmail({
        to: emailOptions.to,
        from: emailOptions.from,
        subject: emailOptions.subject,
        templateType,
        status: 'sent',
        metadata: { 
          resendId: result.id,
          category: routing.category 
        }
      });

      return result;
    } catch (error) {
      console.error(`Failed to send ${templateType} email:`, error);
      
      // Log failure
      await this.logEmail({
        to: data.to || routing.to,
        from: routing.from,
        subject: data.subject || this.getDefaultSubject(templateType),
        templateType,
        status: 'failed',
        error: error.message,
        metadata: { category: routing.category }
      });

      throw error;
    }
  }

  // Specific methods for each email type
  async sendPasswordResetEmail(data: {
    to: string;
    userName: string;
    resetLink: string;
    ipAddress: string;
    userAgent: string;
  }) {
    return this.send('password_reset', {
      ...data,
      subject: 'Reset Your Clean & Flip Password'
    });
  }

  async sendOrderConfirmationEmail(data: {
    to: string;
    orderId: string;
    orderItems: any[];
    total: number;
    shippingAddress?: any;
    isPickup: boolean;
  }) {
    return this.send('order_confirmation', {
      ...data,
      subject: `Order Confirmation #${data.orderId}`
    });
  }

  async sendWelcomeEmail(data: {
    to: string;
    userName: string;
    discountCode?: string;
  }) {
    return this.send('welcome', {
      ...data,
      subject: 'Welcome to Clean & Flip!'
    });
  }

  async sendAdminNotification(data: {
    type: string;
    message: string;
    metadata?: any;
  }) {
    return this.send('admin_notification', {
      ...data,
      subject: `Admin Alert: ${data.type}`
    });
  }

  async sendOrderStatusUpdate(data: {
    to: string;
    orderId: string;
    status: string;
    trackingNumber?: string;
    estimatedDelivery?: string;
  }) {
    const statusMessages = {
      processing: 'Your order is being processed',
      shipped: 'Your order has been shipped!',
      ready_for_pickup: 'Your order is ready for pickup!',
      delivered: 'Your order has been delivered',
      cancelled: 'Your order has been cancelled'
    };

    return this.send('order_status_update', {
      ...data,
      subject: statusMessages[data.status] || `Order #${data.orderId} Update`
    });
  }

  async sendLowStockAlert(data: {
    productName: string;
    currentStock: number;
    productId: number;
  }) {
    return this.send('low_stock_alert', {
      ...data,
      subject: `Low Stock Alert: ${data.productName}`
    });
  }

  async sendEquipmentSubmissionConfirmation(data: {
    to: string;
    referenceNumber: string;
    items: any[];
    estimatedResponse: string;
  }) {
    return this.send('equipment_submission', {
      ...data,
      subject: `Equipment Submission Received - Ref: ${data.referenceNumber}`
    });
  }

  async sendPriceDropAlert(data: {
    to: string;
    userName: string;
    products: Array<{
      name: string;
      oldPrice: number;
      newPrice: number;
      link: string;
    }>;
  }) {
    return this.send('price_drop_alert', {
      ...data,
      subject: 'Price Drop Alert: Items in your wishlist are on sale!'
    });
  }

  async sendReturnRequestConfirmation(data: {
    to: string;
    orderId: string;
    returnId: string;
    items: any[];
    returnInstructions: string;
  }) {
    return this.send('return_request', {
      ...data,
      subject: `Return Request Confirmed - Order #${data.orderId}`
    });
  }

  // Helper methods
  private getTemplate(templateType: string, data: any) {
    const templateMap = {
      password_reset: EmailTemplates.PasswordResetEmail,
      password_reset_success: EmailTemplates.PasswordResetSuccessEmail,
      welcome: EmailTemplates.WelcomeEmail,
      order_confirmation: EmailTemplates.OrderConfirmationEmail,
      order_status_update: EmailTemplates.OrderStatusEmail,
      equipment_submission: EmailTemplates.EquipmentSubmissionEmail,
      admin_notification: EmailTemplates.AdminNotificationEmail,
      price_drop_alert: EmailTemplates.PriceDropEmail,
      newsletter: EmailTemplates.NewsletterEmail,
      return_request: EmailTemplates.ReturnRequestEmail,
      low_stock_alert: EmailTemplates.LowStockAlertEmail,
      // Add more templates as needed
    };

    const Template = templateMap[templateType];
    if (!Template) {
      throw new Error(`Template not found for: ${templateType}`);
    }

    return Template(data);
  }

  private getDefaultSubject(templateType: string): string {
    const subjects = {
      password_reset: 'Reset Your Password',
      welcome: 'Welcome to Clean & Flip!',
      order_confirmation: 'Order Confirmation',
      admin_notification: 'Admin Notification',
      // Add more default subjects
    };

    return subjects[templateType] || 'Clean & Flip Notification';
  }

  private async logEmail(logData: any) {
    try {
      await db.insert(emailLogs).values(logData);
    } catch (error) {
      console.error('Failed to log email:', error);
    }
  }
}

// Export singleton instance
export const emailService = new EmailService();
2. Update Integration Points
Make sure each part of the application uses the correct email method:
Authentication Flow (/server/routes/auth.ts):
typescript// Password reset request
router.post('/api/auth/forgot-password', async (req, res) => {
  // ... validation ...
  
  // This will automatically use support@cleanandflip.com
  await emailService.sendPasswordResetEmail({
    to: user.email,
    userName: user.name,
    resetLink,
    ipAddress: req.ip,
    userAgent: req.headers['user-agent']
  });
});
Order Flow (/server/routes/orders.ts):
typescript// After successful order creation
await emailService.sendOrderConfirmationEmail({
  to: user.email,
  orderId: order.id,
  orderItems: order.items,
  total: order.total,
  shippingAddress: order.shippingAddress,
  isPickup: order.isPickup
});

// When admin updates order status
await emailService.sendOrderStatusUpdate({
  to: order.customerEmail,
  orderId: order.id,
  status: newStatus,
  trackingNumber: order.trackingNumber
});
Admin Notifications (/server/services/admin-notifications.ts):
typescript// New high-value order
if (order.total > 100) {
  await emailService.sendAdminNotification({
    type: 'High Value Order',
    message: `New order #${order.id} for $${order.total}`,
    metadata: { orderId: order.id, total: order.total }
  });
}

// Low stock alert
if (product.quantity < 5) {
  await emailService.sendLowStockAlert({
    productName: product.name,
    currentStock: product.quantity,
    productId: product.id
  });
}
3. Email Template Headers
Ensure each email template includes the appropriate branding:
Support Emails Template Header:
tsx// For password reset, welcome, equipment submissions
<Header>
  <img src="https://cleanandflip.com/logo.png" alt="Clean & Flip" />
  <Text style={{ color: '#666', fontSize: '14px' }}>Support Team</Text>
</Header>
Order Emails Template Header:
tsx// For order confirmations, shipping updates
<Header>
  <img src="https://cleanandflip.com/logo.png" alt="Clean & Flip" />
  <Text style={{ color: '#666', fontSize: '14px' }}>Order Updates</Text>
</Header>
Admin Emails Template Header:
tsx// For admin notifications
<Header>
  <Text style={{ color: '#ff0000', fontWeight: 'bold' }}>ADMIN ALERT</Text>
</Header>
4. Testing Each Email Type
Create test endpoints (remove in production):
typescript// Test route for each email type
router.post('/api/test/emails/:type', requireAdmin, async (req, res) => {
  const { type } = req.params;
  const testEmail = process.env.TEST_EMAIL || 'cleanandflipyt@gmail.com';
  
  switch(type) {
    case 'password-reset':
      await emailService.sendPasswordResetEmail({
        to: testEmail,
        userName: 'Test User',
        resetLink: 'https://cleanandflip.com/reset-password?token=test',
        ipAddress: '127.0.0.1',
        userAgent: 'Test Browser'
      });
      break;
      
    case 'order-confirmation':
      await emailService.sendOrderConfirmationEmail({
        to: testEmail,
        orderId: 'TEST-001',
        orderItems: [{ name: 'Test Product', price: 29.99, quantity: 1 }],
        total: 29.99,
        isPickup: false
      });
      break;
      
    case 'admin-alert':
      await emailService.sendAdminNotification({
        type: 'Test Alert',
        message: 'This is a test admin notification'
      });
      break;
  }
  
  res.json({ success: true, message: `Test ${type} email sent` });
});
This configuration ensures:

✅ Password resets come from support@
✅ Order emails come from orders@
✅ Admin alerts come from and go to admin@
✅ Proper reply-to addresses
✅ Admin gets BCC on important transactions
✅ Clear email categorization for analytics