Additional Instructions: Customer Self-Service Cancellation
1. Update User Dashboard with Submissions Tab
tsx// client/src/pages/Dashboard.tsx - Add My Submissions section

import { useState } from 'react';
import { useQuery, useMutation } from '@tanstack/react-query';
import { Card } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { 
  Package, 
  X, 
  Eye, 
  Clock, 
  CheckCircle,
  AlertCircle,
  Calendar,
  Ban
} from 'lucide-react';
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
} from "@/components/ui/alert-dialog";

// Add to existing Dashboard component
export function Dashboard() {
  const [selectedTab, setSelectedTab] = useState('orders');
  const [cancellingSubmission, setCancellingSubmission] = useState(null);
  
  const { data: submissions, refetch: refetchSubmissions } = useQuery({
    queryKey: ['my-submissions'],
    queryFn: async () => {
      const res = await fetch('/api/my-submissions');
      return res.json();
    }
  });
  
  const cancelSubmission = useMutation({
    mutationFn: async (submissionId) => {
      const res = await fetch(`/api/submissions/${submissionId}/cancel`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          reason: 'Cancelled by user'
        })
      });
      if (!res.ok) throw new Error('Failed to cancel');
      return res.json();
    },
    onSuccess: () => {
      refetchSubmissions();
      toast({
        title: "Submission cancelled",
        description: "Your equipment submission has been cancelled successfully."
      });
      setCancellingSubmission(null);
    },
    onError: (error) => {
      toast({
        title: "Error",
        description: error.message || "Failed to cancel submission",
        variant: "destructive"
      });
    }
  });
  
  // Check if submission can be cancelled
  const canCancelSubmission = (submission) => {
    const nonCancellableStatuses = ['scheduled', 'completed', 'cancelled'];
    return !nonCancellableStatuses.includes(submission.status);
  };
  
  const getStatusIcon = (status) => {
    const icons = {
      pending: Clock,
      under_review: Eye,
      accepted: CheckCircle,
      declined: X,
      scheduled: Calendar,
      completed: CheckCircle,
      cancelled: Ban
    };
    return icons[status] || Package;
  };
  
  const getStatusColor = (status) => {
    const colors = {
      pending: 'yellow',
      under_review: 'blue',
      accepted: 'green',
      declined: 'red',
      scheduled: 'purple',
      completed: 'gray',
      cancelled: 'gray'
    };
    return colors[status] || 'gray';
  };
  
  return (
    <div className="min-h-screen py-8">
      {/* Existing dashboard header and stats */}
      
      <Tabs value={selectedTab} onValueChange={setSelectedTab} className="mt-8">
        <TabsList>
          <TabsTrigger value="orders">Orders</TabsTrigger>
          <TabsTrigger value="submissions">
            Equipment Submissions
            {submissions?.filter(s => s.status === 'pending').length > 0 && (
              <Badge className="ml-2" variant="secondary">
                {submissions.filter(s => s.status === 'pending').length}
              </Badge>
            )}
          </TabsTrigger>
          <TabsTrigger value="wishlist">Wishlist</TabsTrigger>
          <TabsTrigger value="profile">Profile</TabsTrigger>
          <TabsTrigger value="addresses">Addresses</TabsTrigger>
        </TabsList>
        
        {/* Existing tabs content */}
        
        <TabsContent value="submissions" className="mt-6">
          <div className="space-y-4">
            <div className="flex justify-between items-center mb-4">
              <h2 className="text-2xl font-semibold">My Equipment Submissions</h2>
              <Link href="/sell-to-us">
                <Button>
                  <Package className="w-4 h-4 mr-2" />
                  Submit New Equipment
                </Button>
              </Link>
            </div>
            
            {submissions?.length === 0 ? (
              <Card className="p-8 text-center">
                <Package className="w-12 h-12 mx-auto mb-4 text-gray-400" />
                <p className="text-gray-400 mb-4">No equipment submissions yet</p>
                <Link href="/sell-to-us">
                  <Button variant="outline">Submit Your First Item</Button>
                </Link>
              </Card>
            ) : (
              <div className="grid gap-4">
                {submissions?.map((submission) => {
                  const StatusIcon = getStatusIcon(submission.status);
                  
                  return (
                    <Card key={submission.id} className="p-6">
                      <div className="flex justify-between items-start mb-4">
                        <div className="flex-1">
                          <div className="flex items-center gap-3 mb-2">
                            <h3 className="text-lg font-semibold">
                              {submission.equipmentName}
                            </h3>
                            <Badge variant={getStatusColor(submission.status)}>
                              <StatusIcon className="w-3 h-3 mr-1" />
                              {submission.status.replace('_', ' ')}
                            </Badge>
                          </div>
                          <p className="text-sm text-gray-400 font-mono">
                            {submission.referenceNumber}
                          </p>
                        </div>
                        
                        <div className="flex gap-2">
                          <Link href={`/track-submission?ref=${submission.referenceNumber}`}>
                            <Button variant="outline" size="sm">
                              <Eye className="w-4 h-4 mr-1" />
                              Track
                            </Button>
                          </Link>
                          
                          {canCancelSubmission(submission) && (
                            <Button
                              variant="outline"
                              size="sm"
                              onClick={() => setCancellingSubmission(submission)}
                              className="text-red-500 hover:text-red-600 hover:border-red-600"
                            >
                              <X className="w-4 h-4 mr-1" />
                              Cancel
                            </Button>
                          )}
                        </div>
                      </div>
                      
                      <div className="grid grid-cols-1 md:grid-cols-4 gap-4 text-sm">
                        <div>
                          <p className="text-gray-400">Brand</p>
                          <p>{submission.brand}</p>
                        </div>
                        <div>
                          <p className="text-gray-400">Condition</p>
                          <p className="capitalize">{submission.condition}</p>
                        </div>
                        <div>
                          <p className="text-gray-400">Submitted</p>
                          <p>{new Date(submission.createdAt).toLocaleDateString()}</p>
                        </div>
                        <div>
                          <p className="text-gray-400">Asking Price</p>
                          <p className="font-medium">
                            ${submission.askingPrice || 'Open to offers'}
                          </p>
                        </div>
                      </div>
                      
                      {/* Status-specific information */}
                      {submission.status === 'accepted' && submission.offerAmount && (
                        <div className="mt-4 p-4 bg-green-900/20 border border-green-700 rounded-lg">
                          <div className="flex items-center justify-between">
                            <div>
                              <p className="text-sm text-green-400">Offer Made</p>
                              <p className="text-2xl font-bold text-green-500">
                                ${submission.offerAmount}
                              </p>
                            </div>
                            <AlertCircle className="w-5 h-5 text-green-400" />
                          </div>
                          <p className="text-sm text-gray-400 mt-2">
                            Please check your email to accept this offer
                          </p>
                        </div>
                      )}
                      
                      {submission.status === 'scheduled' && submission.scheduledPickupDate && (
                        <div className="mt-4 p-4 bg-purple-900/20 border border-purple-700 rounded-lg">
                          <div className="flex items-center gap-3">
                            <Calendar className="w-5 h-5 text-purple-400" />
                            <div>
                              <p className="text-sm text-purple-400">Pickup Scheduled</p>
                              <p className="font-medium">
                                {new Date(submission.scheduledPickupDate).toLocaleDateString()}
                                {' '}
                                ({submission.pickupWindowStart} - {submission.pickupWindowEnd})
                              </p>
                            </div>
                          </div>
                        </div>
                      )}
                      
                      {submission.status === 'declined' && submission.declineReason && (
                        <div className="mt-4 p-4 bg-red-900/20 border border-red-700 rounded-lg">
                          <p className="text-sm text-red-400">Reason for decline:</p>
                          <p className="text-sm mt-1">{submission.declineReason}</p>
                        </div>
                      )}
                    </Card>
                  );
                })}
              </div>
            )}
          </div>
        </TabsContent>
      </Tabs>
      
      {/* Cancellation Confirmation Dialog */}
      <AlertDialog 
        open={!!cancellingSubmission} 
        onOpenChange={() => setCancellingSubmission(null)}
      >
        <AlertDialogContent>
          <AlertDialogHeader>
            <AlertDialogTitle>Cancel Equipment Submission?</AlertDialogTitle>
            <AlertDialogDescription>
              Are you sure you want to cancel your submission for{' '}
              <strong>{cancellingSubmission?.equipmentName}</strong>?
              <br /><br />
              Reference: {cancellingSubmission?.referenceNumber}
              <br /><br />
              This action cannot be undone. You'll need to create a new submission 
              if you want to sell this item in the future.
            </AlertDialogDescription>
          </AlertDialogHeader>
          <AlertDialogFooter>
            <AlertDialogCancel>Keep Submission</AlertDialogCancel>
            <AlertDialogAction
              onClick={() => cancelSubmission.mutate(cancellingSubmission.id)}
              className="bg-red-600 hover:bg-red-700"
            >
              Yes, Cancel Submission
            </AlertDialogAction>
          </AlertDialogFooter>
        </AlertDialogContent>
      </AlertDialog>
    </div>
  );
}
2. API Endpoint for Cancellation
ts// server/routes.ts - Add cancellation endpoint

// User cancels their own submission
app.post('/api/submissions/:id/cancel', requireAuth, async (req, res) => {
  try {
    const { id } = req.params;
    const { reason } = req.body;
    
    // Get submission and verify ownership
    const [submission] = await db.select()
      .from(equipmentSubmissions)
      .where(
        and(
          eq(equipmentSubmissions.id, id),
          eq(equipmentSubmissions.userId, req.session.userId)
        )
      )
      .limit(1);
    
    if (!submission) {
      return res.status(404).json({ error: 'Submission not found' });
    }
    
    // Check if cancellation is allowed
    const nonCancellableStatuses = ['scheduled', 'completed', 'cancelled'];
    if (nonCancellableStatuses.includes(submission.status)) {
      return res.status(400).json({ 
        error: `Cannot cancel submission with status: ${submission.status}` 
      });
    }
    
    // Update status history
    const newHistory = [
      ...(submission.statusHistory || []),
      {
        status: 'cancelled',
        timestamp: new Date().toISOString(),
        changedBy: 'user',
        notes: reason || 'Cancelled by user'
      }
    ];
    
    // Update submission
    await db.update(equipmentSubmissions)
      .set({
        status: 'cancelled',
        statusHistory: newHistory,
        updatedAt: new Date(),
        adminNotes: `User cancelled: ${reason || 'No reason provided'}`
      })
      .where(eq(equipmentSubmissions.id, id));
    
    // Get user for email notification
    const [user] = await db.select()
      .from(users)
      .where(eq(users.id, req.session.userId))
      .limit(1);
    
    // Send cancellation email
    if (user) {
      await sendCancellationEmail(user.email, submission);
    }
    
    res.json({ 
      success: true, 
      message: 'Submission cancelled successfully' 
    });
  } catch (error) {
    console.error('Error cancelling submission:', error);
    res.status(500).json({ error: 'Failed to cancel submission' });
  }
});

// Update the my-submissions endpoint to include all fields
app.get('/api/my-submissions', requireAuth, async (req, res) => {
  try {
    const submissions = await db.select()
      .from(equipmentSubmissions)
      .where(eq(equipmentSubmissions.userId, req.session.userId))
      .orderBy(desc(equipmentSubmissions.createdAt));
    
    res.json(submissions);
  } catch (error) {
    console.error('Error fetching user submissions:', error);
    res.status(500).json({ error: 'Failed to fetch submissions' });
  }
});
3. Add Cancellation Email Template
ts// server/utils/emailService.ts - Add cancellation email

export async function sendCancellationEmail(email: string, submission: any) {
  const html = `
    <h1>Equipment Submission Cancelled</h1>
    <p>Your equipment submission has been cancelled as requested.</p>
    
    <div style="background: #f3f4f6; padding: 20px; border-radius: 8px; margin: 20px 0;">
      <h2>Cancelled Submission Details</h2>
      <p><strong>Reference:</strong> ${submission.referenceNumber}</p>
      <p><strong>Equipment:</strong> ${submission.equipmentName}</p>
      <p><strong>Brand:</strong> ${submission.brand}</p>
      <p><strong>Cancelled on:</strong> ${new Date().toLocaleDateString()}</p>
    </div>
    
    <p>If you change your mind, you can submit a new request at any time.</p>
    
    <a href="${process.env.SITE_URL}/sell-to-us" style="display: inline-block; background: #3b82f6; color: white; padding: 12px 24px; text-decoration: none; border-radius: 6px;">
      Submit New Equipment
    </a>
    
    <p style="margin-top: 30px; font-size: 14px; color: #666;">
      If you didn't request this cancellation, please contact us immediately.
    </p>
  `;
  
  await sendEmail({
    to: email,
    subject: `Submission Cancelled - ${submission.referenceNumber}`,
    html
  });
}
4. Update Status Display Components
tsx// client/src/components/SubmissionStatusBadge.tsx - Create reusable status badge

import { Badge } from '@/components/ui/badge';
import { 
  Clock, 
  Eye, 
  CheckCircle, 
  XCircle, 
  Calendar, 
  Ban 
} from 'lucide-react';

const statusConfig = {
  pending: { 
    label: 'Pending Review', 
    color: 'yellow', 
    icon: Clock 
  },
  under_review: { 
    label: 'Under Review', 
    color: 'blue', 
    icon: Eye 
  },
  accepted: { 
    label: 'Offer Made', 
    color: 'green', 
    icon: CheckCircle 
  },
  declined: { 
    label: 'Declined', 
    color: 'red', 
    icon: XCircle 
  },
  scheduled: { 
    label: 'Pickup Scheduled', 
    color: 'purple', 
    icon: Calendar 
  },
  completed: { 
    label: 'Completed', 
    color: 'gray', 
    icon: CheckCircle 
  },
  cancelled: { 
    label: 'Cancelled', 
    color: 'gray', 
    icon: Ban 
  }
};

export function SubmissionStatusBadge({ status }: { status: string }) {
  const config = statusConfig[status] || statusConfig.pending;
  const Icon = config.icon;
  
  return (
    <Badge variant={config.color}>
      <Icon className="w-3 h-3 mr-1" />
      {config.label}
    </Badge>
  );
}
5. Add Cancellation Rules to Admin View
tsx// In SubmissionDetailPanel component - Show cancellation info

{submission.status === 'cancelled' && (
  <div className="bg-gray-900/50 border border-gray-700 rounded-lg p-4 mb-6">
    <div className="flex items-center gap-2 text-gray-400 mb-2">
      <Ban className="w-5 h-5" />
      <h3 className="font-medium">Submission Cancelled</h3>
    </div>
    <p className="text-sm text-gray-500">
      This submission was cancelled by the user
    </p>
    {submission.adminNotes && (
      <p className="text-sm mt-2">{submission.adminNotes}</p>
    )}
  </div>
)}
6. Update Database Schema for Better Tracking
sql-- Add cancellation tracking
ALTER TABLE equipment_submissions
ADD COLUMN IF NOT EXISTS cancelled_at TIMESTAMP,
ADD COLUMN IF NOT EXISTS cancellation_reason TEXT;

-- Update the cancelled status handler to set these fields
Instructions for Replit:

Add Submissions Tab to Dashboard - Update the user dashboard to include equipment submissions
Create Cancellation API - Add the /api/submissions/:id/cancel endpoint
Add Cancellation Email - Set up email notification for cancellations
Create Status Badge Component - Build reusable status display component
Update Admin View - Show cancelled submissions appropriately in admin
Add Validation Rules - Prevent cancellation of scheduled/completed items
Test Cancellation Flow - Submit test item and cancel it
Add Activity Logging - Track all cancellations in the activity log

Business Rules for Cancellation:

Can Cancel: Pending, Under Review, Accepted (before scheduling)
Cannot Cancel: Scheduled, Completed, Already Cancelled
Email Notification: Always sent on cancellation
History Preserved: Full status history maintained
Admin Visibility: Cancelled submissions remain visible to admin
User Re-submission: Users can submit the same item again after cancellation

This implementation provides:

Self-service cancellation from user dashboard
Clear status visibility
Proper restrictions on when cancellation is allowed
Email confirmations
Full audit trail
Admin visibility of all cancellations