Database Schema Mismatch Fix - Urgent Production Issue
The error shows your code is trying to access a subcategory column that doesn't exist in your database. Here's how to fix it:

REPLIT: FIX DATABASE SCHEMA MISMATCH
Option 1: Quick Fix - Remove Subcategory References (Immediate)
Tell Replit to update the code to remove subcategory references:
typescript// In /server/storage/database.ts or wherever getFeaturedProducts is defined

async getFeaturedProducts() {
  try {
    const products = await db
      .select({
        id: productsTable.id,
        name: productsTable.name,
        description: productsTable.description,
        price: productsTable.price,
        images: productsTable.images,
        category: productsTable.category,
        // REMOVE THIS LINE: subcategory: productsTable.subcategory,
        featured: productsTable.featured,
        stock: productsTable.stock,
        createdAt: productsTable.createdAt
      })
      .from(productsTable)
      .where(eq(productsTable.featured, true))
      .limit(8);
    
    return products;
  } catch (error) {
    console.error('Error fetching featured products:', error);
    return [];
  }
}
Option 2: Add Subcategory Column to Database (Better Long-term)
If subcategory is needed for your sports gear categorization:
Step 1: Create Migration File
Create /server/db/migrations/add-subcategory.sql:
sql-- Add subcategory column to products table
ALTER TABLE products 
ADD COLUMN IF NOT EXISTS subcategory VARCHAR(100);

-- Set default values for existing products based on category
UPDATE products 
SET subcategory = CASE
  WHEN category = 'Apparel' THEN 'Shirts'
  WHEN category = 'Footwear' THEN 'Running'
  WHEN category = 'Equipment' THEN 'Training'
  ELSE 'General'
END
WHERE subcategory IS NULL;
Step 2: Update Drizzle Schema
Update /server/db/schema.ts:
typescriptexport const products = pgTable('products', {
  id: serial('id').primaryKey(),
  name: varchar('name', { length: 255 }).notNull(),
  description: text('description'),
  price: decimal('price', { precision: 10, scale: 2 }).notNull(),
  images: text('images').array(),
  category: varchar('category', { length: 100 }),
  subcategory: varchar('subcategory', { length: 100 }), // ADD THIS LINE
  featured: boolean('featured').default(false),
  stock: integer('stock').default(0),
  brand: varchar('brand', { length: 100 }),
  condition: varchar('condition', { length: 50 }),
  size: varchar('size', { length: 50 }),
  createdAt: timestamp('created_at').defaultNow(),
  updatedAt: timestamp('updated_at').defaultNow()
});
Option 3: Complete Schema Audit & Fix (Comprehensive)
Run this diagnostic to find ALL schema mismatches:
typescript// Create /server/scripts/schema-audit.ts

import { db } from '../db';

async function auditSchema() {
  console.log('🔍 Auditing database schema...\n');
  
  try {
    // Check products table columns
    const result = await db.execute(`
      SELECT column_name, data_type, is_nullable
      FROM information_schema.columns
      WHERE table_name = 'products'
      AND table_schema = 'public'
      ORDER BY ordinal_position;
    `);
    
    console.log('Products table columns:');
    console.table(result.rows);
    
    // Check if subcategory exists
    const hasSubcategory = result.rows.some(
      row => row.column_name === 'subcategory'
    );
    
    if (!hasSubcategory) {
      console.log('❌ Missing subcategory column - needs to be added');
    } else {
      console.log('✅ Subcategory column exists');
    }
    
    // Check all tables
    const tables = await db.execute(`
      SELECT table_name
      FROM information_schema.tables
      WHERE table_schema = 'public'
      ORDER BY table_name;
    `);
    
    console.log('\nAll tables in database:');
    tables.rows.forEach(row => console.log(`  - ${row.table_name}`));
    
  } catch (error) {
    console.error('Schema audit failed:', error);
  }
}

auditSchema();
Immediate Production Fix Instructions for Replit:

First, apply the quick fix to stop the errors:

Remove all references to subcategory from queries
Or add default empty string handling: subcategory: productsTable.subcategory || ''


Then check what columns actually exist:

bash# Run in Replit console
npm run db:inspect
# Or
psql $DATABASE_URL -c "\d products"

Update the schema to match the database:

typescript// In all product queries, only select columns that exist
const products = await db
  .select({
    id: productsTable.id,
    name: productsTable.name,
    description: productsTable.description,
    price: productsTable.price,
    images: productsTable.images,
    category: productsTable.category,
    // Only include if column exists:
    // subcategory: productsTable.subcategory,
    featured: productsTable.featured,
    stock: productsTable.stock,
  })
  .from(productsTable)
  // ... rest of query

Add migration if needed:

bash# Generate migration
npm run db:generate

# Run migration
npm run db:migrate
Complete Fix for All Product-Related Queries:
Update these files to handle missing subcategory:
typescript// /server/routes/products.ts
router.get('/api/products', async (req, res) => {
  try {
    const products = await db
      .select()
      .from(productsTable)
      // Remove subcategory from filters if it doesn't exist
      .where(/* conditions without subcategory */);
    
    res.json(products);
  } catch (error) {
    console.error('Products fetch error:', error);
    res.status(500).json({ error: 'Failed to fetch products' });
  }
});

// /server/routes/admin.ts - Product management
router.get('/api/admin/products', requireAdmin, async (req, res) => {
  // Similar fix - remove subcategory references
});
Prevent Future Schema Issues:
Add this health check endpoint:
typescript// /server/routes/health.ts
router.get('/api/health/schema', async (req, res) => {
  try {
    // Test query each table
    await db.select().from(productsTable).limit(1);
    await db.select().from(categoriesTable).limit(1);
    await db.select().from(usersTable).limit(1);
    
    res.json({ 
      status: 'healthy',
      message: 'All database tables accessible'
    });
  } catch (error) {
    res.status(500).json({ 
      status: 'unhealthy',
      error: error.message,
      table: error.table || 'unknown'
    });
  }
});
Priority Action: Apply the quick fix immediately to stop the errors, then implement the proper schema migration.