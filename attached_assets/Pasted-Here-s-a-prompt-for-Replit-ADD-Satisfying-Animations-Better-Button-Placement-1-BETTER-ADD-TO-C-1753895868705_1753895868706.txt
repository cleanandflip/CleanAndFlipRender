Here's a prompt for Replit:

ADD: Satisfying Animations & Better Button Placement
1. BETTER ADD TO CART PLACEMENT ON HOVER:
javascript// components/ProductCard.jsx - With satisfying animations
const ProductCard = ({ product }) => {
  const [isHovered, setIsHovered] = useState(false);
  const [isClicked, setIsClicked] = useState(false);
  
  return (
    <div 
      className="group relative bg-gray-800/30 rounded-lg overflow-hidden transition-all duration-300 transform hover:scale-[1.02] hover:shadow-2xl"
      onMouseEnter={() => setIsHovered(true)}
      onMouseLeave={() => setIsHovered(false)}
      onClick={() => {
        setIsClicked(true);
        setTimeout(() => setIsClicked(false), 600);
      }}
    >
      {/* Only show critical badge */}
      {product.stock === 1 && (
        <div className="absolute top-3 left-3 z-10">
          <span className="bg-red-500 text-white px-2 py-1 rounded text-xs animate-pulse">
            Only 1 left
          </span>
        </div>
      )}
      
      <Link href={`/products/${product.id}`}>
        {/* Clean Image with zoom effect */}
        <div className="aspect-square relative bg-gray-900/30 overflow-hidden">
          {product.images?.length > 0 ? (
            <img 
              src={product.images[0]} 
              alt={product.name}
              className="w-full h-full object-cover transition-transform duration-700 group-hover:scale-110"
            />
          ) : (
            <div className="flex items-center justify-center h-full">
              <Package className="w-16 h-16 text-gray-700 transition-transform duration-300 group-hover:scale-110" />
            </div>
          )}
        </div>
        
        {/* Minimal Info Section */}
        <div className="p-4">
          <h3 className="font-medium text-white mb-1 line-clamp-1 transition-colors group-hover:text-blue-400">
            {product.name}
          </h3>
          <p className="text-gray-500 text-sm mb-3">{product.brand}</p>
          <p className="text-2xl font-bold text-white">${product.price}</p>
        </div>
      </Link>
      
      {/* CONVENIENT BOTTOM BAR - Add to Cart & Wishlist */}
      <div className={`absolute bottom-0 left-0 right-0 bg-gray-900/95 backdrop-blur transform transition-all duration-300 ${
        isHovered ? 'translate-y-0' : 'translate-y-full'
      }`}>
        <div className="flex items-center gap-2 p-3">
          <button 
            onClick={(e) => {
              e.preventDefault();
              e.stopPropagation();
              // Add ripple effect
              const button = e.currentTarget;
              button.classList.add('animate-bounce-subtle');
              setTimeout(() => button.classList.remove('animate-bounce-subtle'), 600);
              // Add to cart logic
            }}
            className="flex-1 bg-blue-600 text-white py-2.5 px-4 rounded-lg font-medium 
                     transition-all duration-200 hover:bg-blue-700 hover:shadow-lg 
                     active:scale-95 flex items-center justify-center gap-2"
          >
            <ShoppingCart className="w-4 h-4" />
            Add to Cart
          </button>
          
          <button 
            onClick={(e) => {
              e.preventDefault();
              e.stopPropagation();
              // Heart animation
              const heart = e.currentTarget.querySelector('svg');
              heart.classList.add('animate-ping-once');
              setTimeout(() => heart.classList.remove('animate-ping-once'), 600);
              // Wishlist logic
            }}
            className="w-10 h-10 bg-gray-700 hover:bg-gray-600 rounded-lg flex items-center justify-center 
                     transition-all duration-200 hover:shadow-lg active:scale-95"
          >
            <Heart className="w-5 h-5 text-white transition-all" />
          </button>
        </div>
      </div>
      
      {/* Click ripple effect */}
      {isClicked && (
        <div className="absolute inset-0 pointer-events-none">
          <div className="absolute inset-0 rounded-lg animate-ripple bg-white/20" />
        </div>
      )}
    </div>
  );
};
2. ADD CUSTOM ANIMATIONS TO TAILWIND CONFIG:
javascript// tailwind.config.js
module.exports = {
  theme: {
    extend: {
      animation: {
        'bounce-subtle': 'bounce-subtle 0.6s ease-in-out',
        'ping-once': 'ping-once 0.6s cubic-bezier(0, 0, 0.2, 1)',
        'ripple': 'ripple 0.6s ease-out',
        'slide-up': 'slide-up 0.3s ease-out',
        'fade-in': 'fade-in 0.3s ease-out',
      },
      keyframes: {
        'bounce-subtle': {
          '0%, 100%': { transform: 'translateY(0)' },
          '50%': { transform: 'translateY(-10%)' },
        },
        'ping-once': {
          '0%': { transform: 'scale(1)', opacity: '1' },
          '75%, 100%': { transform: 'scale(1.5)', opacity: '0' },
        },
        'ripple': {
          '0%': { transform: 'scale(0)', opacity: '1' },
          '100%': { transform: 'scale(4)', opacity: '0' },
        },
        'slide-up': {
          '0%': { transform: 'translateY(10px)', opacity: '0' },
          '100%': { transform: 'translateY(0)', opacity: '1' },
        },
        'fade-in': {
          '0%': { opacity: '0' },
          '100%': { opacity: '1' },
        },
      },
    },
  },
};
3. ADD SATISFYING CLICK FEEDBACK TO ALL BUTTONS:
javascript// components/ui/Button.jsx - Reusable animated button
export const AnimatedButton = ({ children, onClick, variant = 'primary', className = '', ...props }) => {
  const [isClicked, setIsClicked] = useState(false);
  
  const handleClick = (e) => {
    setIsClicked(true);
    setTimeout(() => setIsClicked(false), 600);
    onClick?.(e);
  };
  
  const variants = {
    primary: 'bg-blue-600 hover:bg-blue-700 text-white',
    secondary: 'bg-gray-700 hover:bg-gray-600 text-white',
    ghost: 'bg-transparent hover:bg-gray-800 text-gray-300',
  };
  
  return (
    <button
      onClick={handleClick}
      className={`
        relative overflow-hidden
        px-4 py-2 rounded-lg font-medium
        transition-all duration-200
        hover:shadow-lg hover:scale-[1.02]
        active:scale-95
        ${variants[variant]}
        ${className}
        ${isClicked ? 'animate-bounce-subtle' : ''}
      `}
      {...props}
    >
      {children}
      {isClicked && (
        <span className="absolute inset-0 animate-ripple bg-white/30 rounded-lg" />
      )}
    </button>
  );
};
4. PAGE TRANSITIONS:
javascript// Add to product cards container
<div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6 p-6">
  {products.map((product, index) => (
    <div
      key={product.id}
      className="animate-fade-in"
      style={{ animationDelay: `${index * 50}ms` }}
    >
      <ProductCard product={product} />
    </div>
  ))}
</div>
5. LOADING STATES WITH ANIMATION:
javascript// Skeleton loader for cards
const CardSkeleton = () => (
  <div className="bg-gray-800/30 rounded-lg overflow-hidden animate-pulse">
    <div className="aspect-square bg-gray-700/50" />
    <div className="p-4 space-y-3">
      <div className="h-4 bg-gray-700/50 rounded w-3/4" />
      <div className="h-3 bg-gray-700/50 rounded w-1/2" />
      <div className="h-6 bg-gray-700/50 rounded w-1/3" />
    </div>
  </div>
);
KEY IMPROVEMENTS:

✅ Add to Cart slides up from bottom on hover (more accessible)
✅ Wishlist button grouped with cart for convenience
✅ Card scale animation on hover
✅ Image zoom effect
✅ Button press animations (bounce, ripple)
✅ Heart ping animation
✅ Staggered fade-in for cards
✅ Smooth transitions throughout

RESULT: Every interaction feels premium and responsive with satisfying micro-animations!