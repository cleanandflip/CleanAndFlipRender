Instructions for Replit - Integrate Resend Email Service
Tell Replit:
"The Resend API key is already in Replit secrets. Integrate the existing email system with Resend to replace NodeMailer. Here's what needs to be done:
PHASE 1: INSTALL RESEND SDK
bash# Install Resend package
cd server
npm install resend
npm install --save-dev @types/resend
PHASE 2: UPDATE EMAIL SERVICE
Replace the existing server/services/email.ts implementation with Resend:
typescript// server/services/email.ts
import { Resend } from 'resend';

export class EmailService {
  private resend: Resend;
  private fromEmail: string;
  
  constructor() {
    // Get API key from environment
    const apiKey = process.env.RESEND_API_KEY;
    if (!apiKey) {
      throw new Error('RESEND_API_KEY is not set in environment variables');
    }
    
    this.resend = new Resend(apiKey);
    // Update this to your verified domain email
    this.fromEmail = 'orders@cleanandflip.com';
  }

  async sendOrderConfirmation(order: any, userEmail: string) {
    try {
      const { data, error } = await this.resend.emails.send({
        from: `Clean & Flip <${this.fromEmail}>`,
        to: userEmail,
        subject: `Order Confirmation - #${order.id}`,
        html: this.getOrderConfirmationTemplate(order),
      });

      if (error) {
        console.error('Failed to send order confirmation:', error);
        throw error;
      }

      console.log('Order confirmation sent:', data);
      return data;
    } catch (error) {
      console.error('Email service error:', error);
      throw error;
    }
  }

  async sendPasswordReset(userEmail: string, resetToken: string) {
    try {
      const resetUrl = `${process.env.CLIENT_URL}/reset-password?token=${resetToken}`;
      
      const { data, error } = await this.resend.emails.send({
        from: `Clean & Flip <${this.fromEmail}>`,
        to: userEmail,
        subject: 'Reset Your Password',
        html: this.getPasswordResetTemplate(resetUrl),
      });

      if (error) {
        console.error('Failed to send password reset:', error);
        throw error;
      }

      return data;
    } catch (error) {
      console.error('Email service error:', error);
      throw error;
    }
  }

  async sendShippingNotification(order: any, trackingNumber: string, carrier: string) {
    try {
      const { data, error } = await this.resend.emails.send({
        from: `Clean & Flip <${this.fromEmail}>`,
        to: order.email,
        subject: `Your Order Has Shipped - #${order.id}`,
        html: this.getShippingNotificationTemplate(order, trackingNumber, carrier),
      });

      if (error) {
        console.error('Failed to send shipping notification:', error);
        throw error;
      }

      return data;
    } catch (error) {
      console.error('Email service error:', error);
      throw error;
    }
  }

  async sendReturnStatusUpdate(userEmail: string, returnRequest: any, status: string) {
    try {
      const { data, error } = await this.resend.emails.send({
        from: `Clean & Flip <${this.fromEmail}>`,
        to: userEmail,
        subject: `Return Request Update - #${returnRequest.id}`,
        html: this.getReturnStatusTemplate(returnRequest, status),
      });

      if (error) {
        console.error('Failed to send return status update:', error);
        throw error;
      }

      return data;
    } catch (error) {
      console.error('Email service error:', error);
      throw error;
    }
  }

  async sendWelcomeEmail(userEmail: string, userName: string) {
    try {
      const { data, error } = await this.resend.emails.send({
        from: `Clean & Flip <${this.fromEmail}>`,
        to: userEmail,
        subject: 'Welcome to Clean & Flip!',
        html: this.getWelcomeEmailTemplate(userName),
      });

      if (error) {
        console.error('Failed to send welcome email:', error);
        throw error;
      }

      return data;
    } catch (error) {
      console.error('Email service error:', error);
      throw error;
    }
  }

  // Keep all existing template methods unchanged
  private getOrderConfirmationTemplate(order: any): string {
    // Use existing template
    return `[KEEP EXISTING TEMPLATE]`;
  }

  private getPasswordResetTemplate(resetUrl: string): string {
    // Use existing template
    return `[KEEP EXISTING TEMPLATE]`;
  }

  private getShippingNotificationTemplate(order: any, trackingNumber: string, carrier: string): string {
    // Use existing template
    return `[KEEP EXISTING TEMPLATE]`;
  }

  private getReturnStatusTemplate(returnRequest: any, status: string): string {
    // Use existing template
    return `[KEEP EXISTING TEMPLATE]`;
  }

  private getWelcomeEmailTemplate(userName: string): string {
    // Use existing template
    return `[KEEP EXISTING TEMPLATE]`;
  }
}

// Export singleton instance
export const emailService = new EmailService();
PHASE 3: UPDATE ENVIRONMENT CONFIGURATION
Make sure the Resend API key is accessible:
typescript// server/config/env.ts or wherever you handle environment variables
export const config = {
  resend: {
    apiKey: process.env.RESEND_API_KEY,
    fromEmail: 'orders@cleanandflip.com', // Update this after domain verification
  },
  // ... other config
};
PHASE 4: UPDATE EMAIL SENDING CALLS
Find all places where emails are sent and ensure they handle the new return format:
typescript// Example: In order creation
try {
  // Create order...
  
  // Send confirmation email
  await emailService.sendOrderConfirmation(order, customer.email);
  
  // Log success
  console.log('Order confirmation email sent successfully');
} catch (error) {
  // Log error but don't fail the order
  console.error('Failed to send order confirmation email:', error);
  // Continue with order process
}
PHASE 5: TEST EMAIL FUNCTIONALITY
Create a test endpoint to verify emails are working:
typescript// server/routes/test.ts (remove in production)
app.post('/api/test/email', requireAuth, async (req, res) => {
  try {
    const { type } = req.body;
    const testEmail = req.user.email;
    
    switch (type) {
      case 'order':
        await emailService.sendOrderConfirmation(
          { id: 'TEST123', total: 99.99, items: [] },
          testEmail
        );
        break;
      case 'welcome':
        await emailService.sendWelcomeEmail(testEmail, req.user.firstName);
        break;
      default:
        return res.status(400).json({ error: 'Invalid test type' });
    }
    
    res.json({ success: true, message: `Test ${type} email sent to ${testEmail}` });
  } catch (error) {
    console.error('Test email error:', error);
    res.status(500).json({ error: 'Failed to send test email' });
  }
});
PHASE 6: ERROR HANDLING & LOGGING
Update error handling to be more specific:
typescript// Add to email service
private handleEmailError(error: any, emailType: string) {
  if (error.name === 'validation_error') {
    console.error(`Email validation error for ${emailType}:`, error.message);
  } else if (error.name === 'rate_limit_error') {
    console.error(`Rate limit exceeded for ${emailType}`);
  } else {
    console.error(`Unknown error sending ${emailType}:`, error);
  }
}
PHASE 7: REMOVE NODEMAILER
After confirming Resend is working:
bash# Remove NodeMailer dependencies
npm uninstall nodemailer @types/nodemailer
PHASE 8: UPDATE ANY REMAINING DEPENDENCIES
Check for any other files that might be importing NodeMailer:
bash# Search for NodeMailer imports
grep -rn "nodemailer" server/
grep -rn "NodeMailer" server/
NEXT STEPS TO COMMUNICATE BACK:
After completing the integration, tell the user:

Domain Verification Status:

'You need to verify cleanandflip.com with Resend'
'Add these DNS records to your domain provider'
'This will allow sending from @cleanandflip.com addresses'


Default From Address:

'Currently set to send from: orders@cleanandflip.com'
'Update this in EmailService constructor after domain verification'


Test Instructions:

'Test order confirmation: POST /api/test/email with {type: "order"}'
'Test welcome email: POST /api/test/email with {type: "welcome"}'


Rate Limits:

'Free tier: 100 emails per day (3,000/month)'
'Current usage: Check dashboard.resend.com'


Production Checklist:

 Domain verified in Resend dashboard
 From email updated to verified domain
 Test emails sent successfully
 Remove test endpoint before production
 Monitor email delivery in Resend dashboard



IMPORTANT NOTES:

Keep ALL existing email templates - just change the sending mechanism
Don't break existing email flows - add proper error handling
Email sending failures should not break order/user flows
Log all email operations for debugging

Complete this integration and report back with:

Confirmation that emails are sending via Resend
Any errors encountered
The DNS records needed for domain verification
Test results from sending test emails"