FIX IMAGE MODAL - CLICK OUTSIDE TO CLOSE

REPLIT INSTRUCTIONS:
markdown## ADD CLICK OUTSIDE TO CLOSE IMAGE MODAL

### FILE TO EDIT: Find the product detail page component
Look for files like:
- `/client/src/pages/ProductDetail.tsx`
- `/client/src/pages/Product.tsx`
- `/client/src/components/ProductModal.tsx`
- `/client/src/components/ImageViewer.tsx`

### FIND THE IMAGE MODAL CODE:
Look for where the large image is displayed. It probably looks something like:
```jsx
{selectedImage && (
  <div className="fixed inset-0 z-50 flex items-center justify-center">
    <img src={selectedImage} alt="Product" />
    <button onClick={() => setSelectedImage(null)}>X</button>
  </div>
)}
REPLACE WITH CLICK OUTSIDE FUNCTIONALITY:
OPTION 1: BACKDROP APPROACH (SIMPLEST)
jsx{selectedImage && (
  <div 
    className="fixed inset-0 z-50 flex items-center justify-center bg-black/80"
    onClick={() => setSelectedImage(null)} // Click anywhere to close
  >
    <img 
      src={selectedImage} 
      alt="Product" 
      className="max-w-[90%] max-h-[90%] object-contain"
      onClick={(e) => e.stopPropagation()} // Prevent closing when clicking image
    />
    <button 
      onClick={() => setSelectedImage(null)}
      className="absolute top-4 right-4 w-10 h-10 bg-white/10 hover:bg-white/20 
                 rounded-full flex items-center justify-center text-white"
    >
      <X className="w-6 h-6" />
    </button>
  </div>
)}
OPTION 2: SEPARATE BACKDROP DIV
jsx{selectedImage && (
  <>
    {/* Backdrop - Click to close */}
    <div 
      className="fixed inset-0 bg-black/80 z-40"
      onClick={() => setSelectedImage(null)}
    />
    
    {/* Image Container */}
    <div className="fixed inset-0 z-50 flex items-center justify-center pointer-events-none">
      <div className="relative pointer-events-auto">
        <img 
          src={selectedImage} 
          alt="Product" 
          className="max-w-[90vw] max-h-[90vh] object-contain rounded-lg"
        />
        <button 
          onClick={() => setSelectedImage(null)}
          className="absolute -top-12 right-0 text-white hover:text-gray-300"
        >
          <X className="w-8 h-8" />
        </button>
      </div>
    </div>
  </>
)}
OPTION 3: WITH ESCAPE KEY SUPPORT
jsx// Add useEffect for escape key
useEffect(() => {
  const handleEscape = (e: KeyboardEvent) => {
    if (e.key === 'Escape') {
      setSelectedImage(null);
    }
  };

  if (selectedImage) {
    document.addEventListener('keydown', handleEscape);
    // Prevent body scroll when modal is open
    document.body.style.overflow = 'hidden';
  }

  return () => {
    document.removeEventListener('keydown', handleEscape);
    document.body.style.overflow = 'unset';
  };
}, [selectedImage]);

// Image modal with click outside
{selectedImage && (
  <div 
    className="fixed inset-0 z-50 flex items-center justify-center bg-black/90 cursor-pointer"
    onClick={() => setSelectedImage(null)}
  >
    <div 
      className="relative cursor-default"
      onClick={(e) => e.stopPropagation()}
    >
      <img 
        src={selectedImage} 
        alt="Product" 
        className="max-w-[90vw] max-h-[90vh] object-contain"
      />
      
      {/* Close button */}
      <button 
        onClick={() => setSelectedImage(null)}
        className="absolute top-4 right-4 w-12 h-12 bg-black/50 hover:bg-black/70 
                   rounded-full flex items-center justify-center text-white 
                   transition-all hover:scale-110"
      >
        <X className="w-6 h-6" />
      </button>
      
      {/* Optional: Click outside hint */}
      <div className="absolute -bottom-12 left-1/2 -translate-x-1/2 text-white/60 text-sm">
        Click outside or press ESC to close
      </div>
    </div>
  </div>
)}
COMPLETE WORKING EXAMPLE:
jsxconst ProductDetail = () => {
  const [selectedImage, setSelectedImage] = useState(null);
  
  // Handle escape key
  useEffect(() => {
    const handleEscape = (e) => {
      if (e.key === 'Escape' && selectedImage) {
        setSelectedImage(null);
      }
    };
    
    document.addEventListener('keydown', handleEscape);
    return () => document.removeEventListener('keydown', handleEscape);
  }, [selectedImage]);

  return (
    <div>
      {/* Product images grid */}
      <div className="grid grid-cols-4 gap-2">
        {product.images.map((img, idx) => (
          <img 
            key={idx}
            src={img}
            onClick={() => setSelectedImage(img)}
            className="cursor-pointer hover:opacity-80"
          />
        ))}
      </div>

      {/* Image Modal with Click Outside */}
      {selectedImage && (
        <div 
          className="fixed inset-0 z-50 bg-black/90 flex items-center justify-center cursor-pointer animate-fadeIn"
          onClick={() => setSelectedImage(null)} // Close on backdrop click
        >
          <div className="relative">
            <img 
              src={selectedImage} 
              alt="Product"
              className="max-w-[90vw] max-h-[90vh] object-contain cursor-default"
              onClick={(e) => e.stopPropagation()} // Don't close when clicking image
            />
            <button
              onClick={() => setSelectedImage(null)}
              className="absolute top-4 right-4 bg-white/10 hover:bg-white/20 
                         rounded-full p-2 transition-all"
            >
              <X className="w-6 h-6 text-white" />
            </button>
          </div>
        </div>
      )}
    </div>
  );
};
ADD ANIMATION (optional):
In your CSS or Tailwind config:
css@keyframes fadeIn {
  from { opacity: 0; }
  to { opacity: 1; }
}

.animate-fadeIn {
  animation: fadeIn 0.2s ease-out;
}
KEY POINTS:

✅ Click backdrop to close
✅ Click image doesn't close (stopPropagation)
✅ ESC key support
✅ Close button still works
✅ Smooth animations
✅ Prevents body scroll when open


This will allow users to close the image by clicking anywhere outside of it, while still keeping the image clickable without closing the modal.