Instructions for Replit - Fix Authentication Session Persistence Bug
Tell Replit:
"There's a critical authentication bug where users appear to be signed out but their session persists. When redirected to login, they're automatically signed back in without entering credentials. This is a security issue that needs immediate fixing.
THE BUG:

User signs out
Goes to protected page (sell-to-us)
Sees "need to sign in" message
Clicks sign in
WITHOUT logging in, returns to sell-to-us
Is somehow authenticated

PHASE 1: DIAGNOSE THE ISSUE
Check these potential causes:
bash# Find logout implementation
grep -rn "logout\|signout\|sign.*out" --include="*.tsx" --include="*.ts" client/src/
grep -rn "/api/logout" server/

# Check session destruction
grep -rn "session.destroy\|req.logout" server/

# Find auth state management
grep -rn "setUser.*null\|setUser.*undefined" client/src/

# Check localStorage/sessionStorage usage
grep -rn "localStorage\|sessionStorage" --include="*.tsx" --include="*.ts" client/src/

# Find cookie clearing
grep -rn "clearCookie\|cookie.*clear" server/
PHASE 2: COMMON CAUSES TO CHECK
1. Session Not Being Destroyed on Server:
javascript// WRONG - Just clearing user
app.post('/api/logout', (req, res) => {
  req.session.userId = null;
  res.json({ success: true });
});

// CORRECT - Destroy entire session
app.post('/api/logout', (req, res) => {
  req.session.destroy((err) => {
    if (err) {
      return res.status(500).json({ error: 'Logout failed' });
    }
    res.clearCookie('connect.sid'); // Clear session cookie
    res.json({ success: true });
  });
});
2. Client Not Clearing Auth State:
javascript// Check if logout clears all auth data
const logout = async () => {
  await api.post('/api/logout');
  
  // Must clear these:
  setUser(null);
  queryClient.invalidateQueries(['user']);
  queryClient.clear(); // Clear all cached data
  
  // Clear any stored tokens
  localStorage.removeItem('auth_token');
  sessionStorage.clear();
};
3. React Query Caching User Data:
javascript// User query might be cached
const { data: user } = useQuery({
  queryKey: ['user'],
  queryFn: fetchUser,
  staleTime: 0, // Don't cache
  cacheTime: 0, // Don't keep in cache
});
PHASE 3: CHECK AUTHENTICATION FLOW
1. Verify /api/user endpoint:
bash# This endpoint might return user even after logout
grep -rn "/api/user" server/routes.ts
The endpoint should:

Check if session exists
Return 401 if no valid session
NOT return cached user data

2. Check navigation flow:
bash# How does "Sign In" button work?
grep -rn "Sign In\|sign.*in.*button" client/src/pages/sell-to-us.tsx
PHASE 4: SPECIFIC FIXES NEEDED
1. Fix Logout Endpoint:
javascriptapp.post('/api/logout', async (req, res) => {
  try {
    // Destroy session completely
    req.session.destroy((err) => {
      if (err) {
        console.error('Session destruction error:', err);
        return res.status(500).json({ error: 'Logout failed' });
      }
      
      // Clear cookie
      res.clearCookie('connect.sid', {
        path: '/',
        httpOnly: true,
        secure: process.env.NODE_ENV === 'production',
        sameSite: 'lax'
      });
      
      res.json({ success: true });
    });
  } catch (error) {
    console.error('Logout error:', error);
    res.status(500).json({ error: 'Logout failed' });
  }
});
2. Fix Client Logout:
javascriptconst logout = async () => {
  try {
    // Call logout API
    await api.post('/api/logout');
    
    // Clear all client state
    setUser(null);
    
    // Clear all queries
    queryClient.invalidateQueries();
    queryClient.clear();
    
    // Clear any storage
    localStorage.clear();
    sessionStorage.clear();
    
    // Navigate to home
    navigate('/');
  } catch (error) {
    console.error('Logout error:', error);
  }
};
3. Fix User Query:
javascript// Don't cache user data
const { data: user, refetch } = useQuery({
  queryKey: ['user'],
  queryFn: async () => {
    try {
      const response = await api.get('/api/user');
      return response.user;
    } catch (error) {
      if (error.status === 401) {
        return null; // Not authenticated
      }
      throw error;
    }
  },
  staleTime: 0,
  cacheTime: 0,
  retry: false,
});
4. Fix Sell-to-Us Page:
javascript// Ensure fresh auth check
useEffect(() => {
  // Force fresh user check
  refetchUser();
}, []);

// Clear navigation pattern
if (!user && !loading) {
  return (
    <div>
      <p>Please sign in to sell equipment</p>
      <Button onClick={() => navigate('/login', { state: { from: '/sell-to-us' } })}>
        Sign In
      </Button>
    </div>
  );
}
PHASE 5: CHECK FOR THESE BUGS
1. Multiple Auth Providers:
bash# Are there multiple auth systems?
grep -rn "useAuth\|AuthContext\|AuthProvider" client/src/
2. Session Race Conditions:

Logout might not wait for completion
New requests might recreate session

3. Browser Caching:

Check if API responses have proper cache headers
Ensure no aggressive caching

PHASE 6: ADD DEBUGGING
Add temporary logging to diagnose:
javascript// In logout function
console.log('Before logout - User:', user);
await api.post('/api/logout');
console.log('After logout API call');
await refetchUser();
console.log('After refetch - User:', user);

// In /api/user endpoint
app.get('/api/user', (req, res) => {
  console.log('Session:', req.session);
  console.log('Session ID:', req.sessionID);
  console.log('User ID in session:', req.session?.userId);
  
  if (!req.session?.userId) {
    return res.status(401).json({ error: 'Not authenticated' });
  }
  // ...
});
PHASE 7: TEST SEQUENCE
After fixes, test:

Log in as user
Verify authenticated
Click logout
Check network tab - logout request succeeds
Check cookies - session cookie removed
Navigate to sell-to-us
Should see login prompt
Click sign in
Should go to login page
Navigate back without logging in
Should STILL see login prompt

PHASE 8: SECURITY IMPLICATIONS
This bug indicates:

Sessions aren't properly destroyed
Client state isn't synchronized with server
Possible session fixation vulnerability

IMMEDIATE ACTIONS:

Fix logout to destroy session completely
Clear all client-side auth data on logout
Ensure /api/user returns 401 when not authenticated
Remove any auth data caching
Force fresh auth checks on protected pages
Test the complete flow multiple times

This is a CRITICAL security issue. Users think they're logged out but aren't. Fix immediately!"