REPLIT: PURGE ALL LEGACY CODE (KEEP ONLY NEW CODE)
0) Safety snapshot
bash
Copy
Edit
git add -A && git commit -m "checkpoint before LEGACY PURGE" || true
git branch -D pre-purge 2>/dev/null || true
git branch pre-purge
1) Execute the purge (remove folders/files & obvious legacy routes)
bash
Copy
Edit
#!/usr/bin/env bash
set -euo pipefail

# 1) Hard delete known legacy dirs/files (safe: skips if not present)
rm -rf \
  src/pages/onboarding \
  src/components/onboarding \
  src/lib/onboarding* \
  server/middleware/ensureProfileComplete* \
  server/storage \
  server/services/*storage* \
  server/services/session* \
  server/repositories/legacy* \
  server/controllers/legacy* \
  server/routes/*legacy* \
  server/routes/cart-legacy* \
  server/routes/addresses-legacy* \
  server/routes/checkout-old* \
  server/routes/checkout-simple* \
  src/lib/*storage* \
  src/services/*storage* \
  src/hooks/*storage* \
  src/pages/checkout-old* \
  src/pages/checkout-simple* \
  src/components/cart/*legacy* \
  src/components/addresses/*legacy* \
  src/components/*-legacy* \
  src/pages/*-legacy* || true

# 2) Kill old API endpoints that caused drift
rg -l "/api/cart/remove|/cart/remove|/cart-legacy|checkout-old|checkout-simple|ensureProfileComplete" server src \
  | xargs -r sed -i 's#\/api\/cart\/remove#\/api\/cart\/items#g'

# 3) Create a hard FAIL-FAST guard for any accidental legacy imports
mkdir -p server/lib
cat > server/lib/legacy-guard.ts << 'EOF'
export function LEGACY_KILL_SWITCH(moduleName: string): never {
  const msg = `[FATAL] Legacy module imported: ${moduleName}. Remove all references.`;
  console.error(msg);
  throw new Error(msg);
}
EOF

# 4) Replace any remaining legacy file bodies with a kill switch
rg -l "(storage|SessionCart|cart-legacy|addresses-legacy|checkout-old|checkout-simple|ensureProfileComplete)" server src \
  | while read -r f; do
      cat > "$f" <<'EOS'
import { LEGACY_KILL_SWITCH } from "../../server/lib/legacy-guard";
LEGACY_KILL_SWITCH(__filename);
export default null as never;
EOS
    done

# 5) Clean caches to prevent zombie bundles
rm -rf node_modules .vite .cache dist build .turbo .next .parcel-cache || true
Paste the block into the Replit shell as bash purge_legacy.sh (or paste directly—works line-by-line).

2) Ban legacy paths at compile time (TS + ESLint)
tsconfig.json (add path trap):

json
Copy
Edit
{
  "compilerOptions": {
    "baseUrl": ".",
    "paths": {
      "server/storage*": ["server/lib/legacy-guard.ts"],
      "*legacy*": ["server/lib/legacy-guard.ts"],
      "*onboarding*": ["server/lib/legacy-guard.ts"]
    }
  }
}
.eslintrc.* (block imports by pattern):

json
Copy
Edit
{
  "rules": {
    "no-restricted-imports": ["error", {
      "patterns": [
        "*storage*",
        "*SessionCart*",
        "*cart-legacy*",
        "*addresses-legacy*",
        "*checkout-old*",
        "*checkout-simple*",
        "*onboarding*",
        "*ensureProfileComplete*"
      ]
    }]
  }
}
3) Register only the new routes (server/index.ts)
Keep cart routes only at:

GET /api/cart

POST /api/cart

DELETE /api/cart/items/:id

POST /api/cart/validate

Keep addresses routes only at:

GET /api/addresses (returns a plain array)

POST /api/addresses (first address auto-default)

POST /api/addresses/:id/default

DELETE /api/addresses/:id (block if default)

Remove any registration of legacy/duplicate routers. If in doubt:

bash
Copy
Edit
rg -n "app\.use\(.+cart.+\)|app\.use\(.+address.+\)|app\.use\(.+checkout.+\)" server
Ensure only the new routers are mounted once under /api.

4) Client: ensure it only hits new endpoints
Centralize axios:

ts
Copy
Edit
// src/lib/api.ts
import axios from "axios";
export const api = axios.create({ baseURL: "/api", withCredentials: true });
Cart calls:

Add → POST /api/cart

Remove → DELETE /api/cart/items/:id

Read (Cart & Checkout) → GET /api/cart

Validate → POST /api/cart/validate

Addresses:

List → GET /api/addresses (expect an array)

Default → POST /api/addresses/:id/default

Delete → DELETE /api/addresses/:id

React Query keys (must be unified): ["cart"], ["cart-validate"], ["addresses"], ["user"].

5) Build clean
bash
Copy
Edit
npm i || pnpm i
npm run dev || pnpm dev
6) Verify the purge (these MUST return nothing/zero)
bash
Copy
Edit
# No legacy strings in code:
rg -n "(storage|SessionCart|cart-legacy|addresses-legacy|checkout-old|checkout-simple|onboarding|ensureProfileComplete)" server src || true

# No legacy API routes registered:
rg -n "/api/cart/remove|/cart/remove|/cart-legacy|checkout-old|checkout-simple" server src || true
7) Commit the purge
bash
Copy
Edit
git add -A
git commit -m "PURGE: remove all legacy/onboarding code; enforce new-only code paths"
What this accomplishes
Deletes onboarding + all legacy/session/duplicate storage code.

Prevents regressions: any accidental legacy import crashes build (TS path trap + kill-switch + ESLint).

Unifies endpoints so Cart and Checkout always read the same data.

Eliminates the mixed “old vs new” behavior that caused rowCount: 0, broken remove-from-cart, and cart/checkout mismatch.

If anything still trips the kill-switch after this, the stack trace will point to the exact file Replit needs to clean up.