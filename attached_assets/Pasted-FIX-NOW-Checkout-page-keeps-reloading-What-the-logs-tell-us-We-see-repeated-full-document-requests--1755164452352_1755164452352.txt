FIX NOW: Checkout page keeps reloading
What the logs tell us
We see repeated full document requests: GET / followed by GET /api/addresses and GET /api/cart in tight loops.

That means the SPA is being hard-reloaded from the checkout flow (not just re-rendered).

The loop begins right after setting a default address: POST /api/addresses/:id/default 200 → then the storm of GET /.

Root cause: one (or more) effects in checkout (and possibly shared hooks) calls a hard reload (window.location.reload() / navigate(0) / window.location.assign) based on state that keeps changing (address/cart/user/query refetch). React Query refetch + the hard reload = endless loop.

Do this in src/pages/checkout.tsx (and any shared checkout hooks)
1) Remove ALL hard reloads; use query invalidation + local state
diff
Copy
Edit
- window.location.reload();
+ await queryClient.invalidateQueries({ queryKey: ['addresses'] });
+ await queryClient.invalidateQueries({ queryKey: ['cart'] });
+ await queryClient.invalidateQueries({ queryKey: ['user'] });
2) Guard redirects/effects so they run once
ts
Copy
Edit
import { useRef } from 'react';
import { useQueryClient } from '@tanstack/react-query';
import { useNavigate } from 'react-router-dom';

export default function CheckoutPage() {
  const qc = useQueryClient();
  const navigate = useNavigate();
  const didNormalize = useRef(false);
  const didRedirect = useRef(false);

  // Example: after making a default address, don't reload—just invalidate
  const onMadeDefaultAddress = async () => {
    if (didNormalize.current) return;
    didNormalize.current = true;
    await Promise.all([
      qc.invalidateQueries({ queryKey: ['addresses'] }),
      qc.invalidateQueries({ queryKey: ['cart'] }),
      qc.invalidateQueries({ queryKey: ['user'] }),
    ]);
  };

  // Example: redirect logic should never loop
  useEffect(() => {
    if (didRedirect.current) return;

    const requiresAddress = /* compute from latest data, not stale props */;
    if (requiresAddress) {
      didRedirect.current = true;
      navigate('/dashboard?tab=addresses', { replace: true });
    }
  }, [navigate /* + minimal stable flags only */]);

  // ...
}
Rules of thumb for this file:

Never call window.location.reload() or navigate(0) in response to address/cart/user changes.

Keep useEffect dependency arrays minimal & stable. Don’t depend on whole objects like cart/user if you only need booleans.

If you must redirect, protect it with a useRef “once” guard.

3) Kill global hard-reload triggers that can affect checkout
Service worker (if present)
Ensure the SW doesn’t keep refreshing the page during normal polling:

ts
Copy
Edit
// service-worker.ts
// Keep /api/** network-only (already recommended), but DO NOT auto-reload clients on every activation.
self.addEventListener('install', () => self.skipWaiting());
self.addEventListener('activate', (e) => {
  e.waitUntil((async () => {
    // Clean old caches once, then claim clients—NO manual location.reload() anywhere.
    const keys = await caches.keys();
    await Promise.all(keys.map((k) => caches.delete(k)));
    await (self as any).clients.claim();
  })());
});
Status/locality polling
If any polling hook reloads on “status change”, replace reload with query invalidations or a soft route navigate (once-guarded).

4) Codebase sweep (catch the other reload landmines)
Run these and remove/replace hard reloads:

bash
Copy
Edit
# Hard reloads
grep -R "location\\.reload\\|navigate(0)\\|window\\.location\\.(assign\\|replace)\\(window\\.location\\.href\\)" src/ -n

# Redirect loops in effects
grep -R "useEffect(.*navigate\\(" src/ -n

# Address defaulting handlers calling reload
grep -R "defaultAddress\\|setDefaultAddress" src/ -n
Fix pattern everywhere:

Replace hard reloads with queryClient.invalidateQueries(...).

Add once guards (useRef) around redirects/effects.

Narrow effect dependencies to stable flags (e.g., needsAddress instead of user object).

5) Acceptance checks (done when ✅)
Add item → go to checkout → set default address → no page reload; UI updates via invalidation.

Refresh once manually → checkout opens normally; no loop.

Closing/reopening tab: no background auto-reloads; only normal API calls.

This will stop the checkout refresh storm immediately and prevents similar loops elsewhere.