1) Drop in ONE canonical dropdown (and force everything to use it)
A) Add the component
File: src/components/ui/Dropdown.tsx

tsx
Copy
Edit
import React from "react";
import { createPortal } from "react-dom";

export type DropdownOption = { value: string; label: string; disabled?: boolean };
type Coords = { top:number; left:number; width:number };

export default function Dropdown({
  value = "",
  onChange,
  options,
  placeholder = "Select…",
  disabled,
  id,
  name,
  fullWidth,
  size = "md",
  error,
  className = "",
}: {
  value?: string | null;
  onChange: (v: string) => void;
  options: DropdownOption[];
  placeholder?: string;
  disabled?: boolean;
  id?: string;
  name?: string;
  fullWidth?: boolean;
  size?: "sm" | "md" | "lg";
  error?: string | null;
  className?: string;
}) {
  const [open, setOpen] = React.useState(false);
  const [coords, setCoords] = React.useState<Coords | null>(null);
  const triggerRef = React.useRef<HTMLButtonElement | null>(null);
  const listRef = React.useRef<HTMLUListElement | null>(null);
  const current = options.find(o => o.value === value) || null;

  const sizeCls = size === "sm" ? "h-9 text-sm px-3"
                 : size === "lg" ? "h-12 text-base px-4"
                 : "h-10 text-sm px-3.5";

  const triggerCls = [
    "inline-flex items-center justify-between rounded-lg border",
    "bg-surface/90 border-surfaceBorder text-foreground",
    "focus:outline-none focus:ring-2 focus:ring-brand/60 focus:border-transparent",
    "transition-colors disabled:opacity-60 disabled:cursor-not-allowed",
    sizeCls, fullWidth ? "w-full" : "w-[min(90vw,320px)]", className
  ].join(" ");

  const calc = () => {
    const el = triggerRef.current; if (!el) return;
    const r = el.getBoundingClientRect();
    setCoords({ top: r.bottom + 8 + window.scrollY, left: r.left + window.scrollX, width: r.width }); // 8px offset
  };

  const openMenu = () => { if (disabled) return; setOpen(true); calc(); setTimeout(() => listRef.current?.focus(), 0); };
  const closeMenu = () => { setOpen(false); triggerRef.current?.focus(); };

  React.useEffect(() => {
    if (!open) return;
    const onAway = (e: MouseEvent) => {
      if (!triggerRef.current || !listRef.current) return;
      if (!triggerRef.current.contains(e.target as Node) && !listRef.current.contains(e.target as Node)) closeMenu();
    };
    const onScroll = () => calc();
    const onResize = () => calc();
    document.addEventListener("mousedown", onAway);
    window.addEventListener("scroll", onScroll, true);
    window.addEventListener("resize", onResize);
    return () => {
      document.removeEventListener("mousedown", onAway);
      window.removeEventListener("scroll", onScroll, true);
      window.removeEventListener("resize", onResize);
    };
  }, [open]);

  const onTriggerKey = (e: React.KeyboardEvent) => {
    if (disabled) return;
    if (["Enter"," ","ArrowDown"].includes(e.key)) { e.preventDefault(); openMenu(); }
  };

  const onListKey = (e: React.KeyboardEvent) => {
    if (e.key === "Escape") { e.preventDefault(); closeMenu(); }
  };

  const menu = open && coords ? createPortal(
    <div
      style={{ position:"absolute", top:coords.top, left:coords.left, width:coords.width, zIndex:60 }}
      className="transition duration-200"
    >
      <div className="rounded-xl border bg-popover text-popover-foreground shadow-xl max-h-[56vh] overflow-auto">
        <ul ref={listRef} tabIndex={-1} role="listbox" aria-labelledby={id} onKeyDown={onListKey} className="py-1 outline-none">
          {options.length === 0 && <li className="px-3 py-2 text-sm opacity-80">No options</li>}
          {options.map(opt => {
            const selected = opt.value === value;
            return (
              <li key={opt.value}>
                <button
                  type="button"
                  onClick={() => { if (!opt.disabled) { onChange(opt.value); closeMenu(); } }}
                  disabled={opt.disabled}
                  className={[
                    "w-full text-left px-3 py-2.5 flex items-center gap-2",
                    "hover:bg-muted/60 rounded-md transition-colors",
                    opt.disabled ? "opacity-50 cursor-not-allowed" : "",
                  ].join(" ")}
                >
                  <span className="truncate">{opt.label}</span>
                  {selected && <span className="ml-auto opacity-80">✓</span>}
                </button>
              </li>
            );
          })}
        </ul>
      </div>
    </div>,
    document.body
  ) : null;

  return (
    <div className={fullWidth ? "w-full" : "inline-block"}>
      <button
        ref={triggerRef}
        id={id} name={name}
        type="button" disabled={disabled}
        aria-haspopup="listbox" aria-expanded={open}
        className={triggerCls + (error ? " ring-2 ring-destructive/60 border-transparent" : "")}
        onClick={() => (open ? closeMenu() : openMenu())}
        onKeyDown={onTriggerKey}
      >
        <span className="truncate">{current?.label ?? placeholder}</span>
        <span className="ml-3 opacity-70" aria-hidden>▾</span>
      </button>
      {error && <p className="mt-1 text-xs text-destructive">{error}</p>}
      {menu}
    </div>
  );
}
This version forces portal to document.body, sets z-index: 60, aligns width to the trigger, and uses your tokens (bg-surface, bg-popover, etc.) so it matches theme.

B) Temporary shim so old imports stop breaking
File: src/components/form/StandardDropdown.tsx

tsx
Copy
Edit
export { default } from "@/components/ui/Dropdown";
This guarantees any lingering StandardDropdown usage immediately renders the new Dropdown (no crash).

2) Convert two critical pages so you can see changes
A) sell-to-us grid & dropdowns
Open src/pages/sell-to-us.tsx.

Wrap fields with a uniform grid and replace selects:

tsx
Copy
Edit
<div className="grid grid-cols-1 md:grid-cols-2 gap-x-6 gap-y-5">
  {/* Equipment Name */}
  <Field label="Equipment Name *" name="name">
    <Input id="name" {...register("name", { required: true })} />
  </Field>

  {/* Brand */}
  <Field label="Brand" name="brand">
    <Dropdown
      fullWidth
      value={watch("brand") ?? ""}
      onChange={(v) => setValue("brand", v, { shouldDirty:true })}
      options={BRAND_OPTIONS}
      placeholder="Search or select a brand..."
    />
  </Field>

  {/* Category */}
  <Field label="Category *" name="category">
    <Dropdown
      fullWidth
      value={watch("category") ?? ""}
      onChange={(v) => setValue("category", v, { shouldDirty:true })}
      options={CATEGORY_OPTIONS}
      placeholder="Select category"
    />
  </Field>

  {/* Weight */}
  <Field label="Weight (lbs)" name="weight">
    <Input id="weight" {...register("weight")} placeholder="Total weight in pounds" />
  </Field>

  {/* Condition */}
  <Field label="Condition *" name="condition">
    <Dropdown
      fullWidth
      value={watch("condition") ?? ""}
      onChange={(v) => setValue("condition", v, { shouldDirty:true })}
      options={CONDITION_OPTIONS}
    />
  </Field>

  <div /> {/* keep grid symmetry or add a field */}

  {/* Asking Price (full width) */}
  <div className="md:col-span-2">
    <Field label="Your Asking Price (Optional)" name="price">
      <Input id="price" startAdornment="$" {...register("price")} />
    </Field>
  </div>

  {/* Description (full width) */}
  <div className="md:col-span-2">
    <Field label="Description" name="description">
      <Textarea id="description" rows={5} {...register("description")} placeholder="Tell us about the equipment..." />
    </Field>
  </div>
</div>
Field helper wrapper

tsx
Copy
Edit
function Field({ label, name, children }:{label:string;name:string;children:React.ReactNode}) {
  return (
    <div>
      <label htmlFor={name} className="block text-sm font-medium">{label}</label>
      <div className="mt-2">{children}</div>
    </div>
  );
}
B) contact page dropdown (“What can we help with?”)
Replace its select with:

tsx
Copy
Edit
<Dropdown
  fullWidth
  value={watch("topic") ?? ""}
  onChange={(v)=> setValue("topic", v, { shouldDirty:true })}
  options={TOPIC_OPTIONS}
/>
After these two changes, you should visibly see the new dropdown style and the menu above cards.

3) Replace the rest (repo-wide), then delete legacy
A) Replace imports everywhere
bash
Copy
Edit
# See all remaining offenders
rg -n "StandardDropdown|SelectTrigger|SelectItem|@radix-ui/react-select|<select\\b" src
For each:

import Dropdown from "@/components/ui/Dropdown";

Replace JSX with <Dropdown value={...} onChange={...} options={...} />.

B) Admin & profile menus
If a “menu” (not a form select), it should still use this Dropdown or your single Menu component. Don’t leave a third style.

C) Delete legacy files after you see the new UI working
Remove any *Dropdown*.tsx, old Radix wrappers, or native <select> wrappers.

Remove exports from index.ts barrels.

D) Prevent backsliding (ESLint)
.eslintrc.cjs

js
Copy
Edit
rules: {
  "no-restricted-imports": ["error", { "paths": ["@radix-ui/react-select"] }],
  "no-restricted-syntax": [
    "error",
    { selector: "JSXOpeningElement[name.name='select']", message: "Use <Dropdown /> instead of native <select>." }
  ]
}
4) CSS that must be present (so it doesn’t look “bad”)
Add (or verify) these utilities/tokens exist in your theme:

Surfaces: bg-surface, bg-popover, border-surfaceBorder, text-foreground

States: hover:bg-muted/60, focus:ring-brand/60, text-destructive, ring-destructive/60

Z-layer: menus rely on z-[60]

Hide native search X (for inputs):

css
Copy
Edit
input[type="search"]::-webkit-search-cancel-button { display: none; }
5) Pass/Fail checks (run these; don’t ship until green)
bash
Copy
Edit
# A) No legacy dropdowns left
rg -n "StandardDropdown|SelectTrigger|SelectItem|@radix-ui/react-select|<select\\b" src

# B) Menus are above cards (manual): open on /sell-to-us and /contact; verify not clipped

# C) Visual: trigger height equals Inputs (h-10), same radius & ring

# D) Keyboard: Arrow keys move, Enter selects, Esc closes

# E) Screen reader: labels read correctly; required fields announced
6) Why you didn’t see changes before (what to avoid)
They edited a new component but didn’t actually replace imports, so pages still rendered the old ones.

They forgot a portal/z-index, so menus looked “behind” cards.

They left multiple dropdown implementations, so the UI stayed inconsistent.

The steps above remove those failure modes entirely: the shim stops crashes right now, the component swap is visible on two pages immediately, and the grep checks guarantee there’s only one dropdown left in the repo.