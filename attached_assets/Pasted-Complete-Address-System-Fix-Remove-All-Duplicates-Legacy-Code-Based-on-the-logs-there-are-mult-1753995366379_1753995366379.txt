Complete Address System Fix - Remove All Duplicates & Legacy Code
Based on the logs, there are multiple issues with duplicate endpoints and legacy code. Let's fix this comprehensively:

1. Remove ALL Duplicate Endpoints
Search and remove duplicate endpoints across all files:

bash
# Find all API endpoint definitions
grep -r "app.get.*\/api\/user" server/
grep -r "app.get.*\/api\/addresses" server/
grep -r "router.get.*\/api\/user" server/
grep -r "router.get.*\/api\/addresses" server/
2. Consolidate to Single Address Endpoint
In server/routes.ts, create ONE definitive address endpoint:

typescript
// REMOVE all other /api/addresses endpoints and use only this one:
app.get("/api/addresses", async (req, res) => {
  try {
    // Get authenticated user
    const userId = req.user?.id || req.session?.userId || req.session?.passport?.user;
    
    if (!userId) {
      return res.status(401).json({ error: "Authentication required" });
    }
    
    // Fetch user with address data from database
    const userWithAddress = await db
      .select({
        id: users.id,
        street: users.street,
        city: users.city,
        state: users.state,
        zipCode: users.zipCode,
        isLocalCustomer: users.isLocalCustomer
      })
      .from(users)
      .where(eq(users.id, userId))
      .limit(1);
    
    if (!userWithAddress.length || !userWithAddress[0].street) {
      // No address saved
      return res.json([]);
    }
    
    // Format as array for frontend compatibility
    const addresses = [{
      id: userWithAddress[0].id,
      street: userWithAddress[0].street,
      city: userWithAddress[0].city,
      state: userWithAddress[0].state,
      zipCode: userWithAddress[0].zipCode,
      isLocal: userWithAddress[0].isLocalCustomer,
      isDefault: true
    }];
    
    console.log("Returning addresses:", addresses);
    return res.json(addresses);
    
  } catch (error) {
    console.error("Error fetching addresses:", error);
    return res.status(500).json({ error: "Failed to fetch addresses" });
  }
});
3. Fix Frontend Address Display
Update src/pages/dashboard.tsx or the addresses component:

tsx
// In AddressesTab component
const AddressesTab = () => {
  const [addresses, setAddresses] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    fetchAddresses();
  }, []);

  const fetchAddresses = async () => {
    try {
      setLoading(true);
      const response = await fetch('/api/addresses', {
        method: 'GET',
        credentials: 'include',
        headers: {
          'Content-Type': 'application/json'
        }
      });
      
      if (!response.ok) {
        throw new Error(`Failed to fetch addresses: ${response.status}`);
      }
      
      const data = await response.json();
      console.log("Fetched addresses:", data);
      setAddresses(data);
    } catch (err) {
      console.error("Error fetching addresses:", err);
      setError(err.message);
    } finally {
      setLoading(false);
    }
  };

  if (loading) {
    return <div className="text-gray-400">Loading addresses...</div>;
  }

  if (error) {
    return <div className="text-red-500">Error: {error}</div>;
  }

  return (
    <div className="space-y-4">
      <div className="flex justify-between items-center mb-6">
        <h2 className="text-2xl font-bold text-white">Saved Addresses</h2>
        <button className="px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-lg">
          Add New Address
        </button>
      </div>

      {addresses.length > 0 ? (
        <div className="grid gap-4">
          {addresses.map((address) => (
            <div key={address.id} className="bg-gray-800 p-6 rounded-lg border border-gray-700">
              <div className="flex justify-between items-start">
                <div>
                  <p className="text-white font-medium">{address.street}</p>
                  <p className="text-gray-400">
                    {address.city}, {address.state} {address.zipCode}
                  </p>
                  {address.isLocal && (
                    <span className="inline-flex items-center gap-1 mt-2 text-green-500 text-sm">
                      <CheckCircle className="w-4 h-4" />
                      Local pickup available
                    </span>
                  )}
                </div>
                <div className="flex gap-2">
                  <button className="text-gray-400 hover:text-white">Edit</button>
                  <button className="text-gray-400 hover:text-red-500">Delete</button>
                </div>
              </div>
            </div>
          ))}
        </div>
      ) : (
        <div className="text-center py-12">
          <MapPin className="w-12 h-12 text-gray-600 mx-auto mb-4" />
          <p className="text-gray-400 text-lg mb-2">No saved addresses</p>
          <p className="text-gray-500 mb-6">Add addresses to make checkout faster.</p>
          <button className="px-6 py-3 bg-blue-600 hover:bg-blue-700 text-white rounded-lg">
            Add Address
          </button>
        </div>
      )}
    </div>
  );
};
4. Remove Legacy Code
Search and remove these patterns:

bash
# Remove old address/cityStateZip references
grep -r "cityStateZip" server/
grep -r "city_state_zip" server/
grep -r "\.address\b" server/ # Old single address field

# Update imports - remove any old address-related imports
5. Verify Database Has Correct Data
sql
-- Check what's actually in the database
SELECT id, email, street, city, state, zip_code, is_local_customer 
FROM users 
WHERE email = 'test3@gmail.com';

-- If no address data, update it
UPDATE users 
SET 
  street = '123 Main Street',
  city = 'Asheville',
  state = 'NC',
  zip_code = '28801',
  is_local_customer = true
WHERE email = 'test3@gmail.com';
6. Add Debug Logging
Add comprehensive logging to trace the issue:

typescript
// In server/routes.ts - add to the /api/user endpoint
app.get("/api/user", requireAuth, async (req, res) => {
  console.log("=== /api/user called ===");
  console.log("User ID:", req.user?.id);
  console.log("Session:", req.session);
  
  const userData = await db.select().from(users).where(eq(users.id, req.user.id)).limit(1);
  console.log("User data from DB:", userData[0]);
  
  res.json({
    id: userData[0].id,
    email: userData[0].email,
    firstName: userData[0].firstName,
    lastName: userData[0].lastName,
    // Include address fields
    street: userData[0].street,
    city: userData[0].city,
    state: userData[0].state,
    zipCode: userData[0].zipCode,
    isLocalCustomer: userData[0].isLocalCustomer
  });
});
7. Check Authentication Middleware
Ensure requireAuth is working:

typescript
// In server/auth.ts
export const requireAuth = (req: any, res: any, next: any) => {
  console.log("RequireAuth - isAuthenticated:", req.isAuthenticated?.());
  console.log("RequireAuth - user:", req.user);
  console.log("RequireAuth - session:", req.session);
  
  if (req.isAuthenticated && req.isAuthenticated()) {
    return next();
  }
  
  res.status(401).json({ error: "Authentication required" });
};
8. Test with CURL
bash
# First login
curl -X POST http://localhost:5000/api/login \
  -H "Content-Type: application/json" \
  -d '{"email":"test3@gmail.com","password":"password123"}' \
  -c cookies.txt -v

# Then test addresses
curl -X GET http://localhost:5000/api/addresses \
  -b cookies.txt -v

# Check user endpoint
curl -X GET http://localhost:5000/api/user \
  -b cookies.txt -v
Summary of Required Actions:
Remove ALL duplicate endpoints - Search entire codebase
Use single source of truth for addresses (users table)
Fix authentication flow - Ensure session is properly maintained
Update frontend to properly fetch and display addresses
Add comprehensive logging to debug the flow
Test the complete flow from login to address display
The main issue appears to be either:

Authentication not working properly
Address data not being returned from the database
Frontend not displaying the fetched data correctly
Please implement these fixes and check the console logs to see where the breakdown is occurring.




