PASSWORD RESET EMAIL NOT FOUND - DEBUGGING & FIX
The issue is likely that the password reset query is failing due to schema issues (like the street column error we saw earlier), making it appear as if the email doesn't exist.

REPLIT: FIX PASSWORD RESET EMAIL DETECTION
1. Debug the Actual Query
First, let's add debugging to see what's really happening:
typescript// Update /server/services/password-reset.service.ts

static async requestPasswordReset(
  email: string, 
  ipAddress: string, 
  userAgent: string
) {
  try {
    // Add detailed logging
    console.log(`[DEBUG] Password reset requested for email: "${email}"`);
    console.log(`[DEBUG] Email length: ${email.length}`);
    console.log(`[DEBUG] Normalized email: "${email.toLowerCase().trim()}"`);
    
    const normalizedEmail = email.toLowerCase().trim();
    
    // Try a simple query first to isolate the issue
    try {
      // Test 1: Simple count query
      const countResult = await db.execute(sql`
        SELECT COUNT(*) as count 
        FROM users 
        WHERE LOWER(email) = ${normalizedEmail}
      `);
      console.log(`[DEBUG] User count for email: ${countResult.rows[0].count}`);
      
      // Test 2: Get just ID and email
      const simpleResult = await db.execute(sql`
        SELECT id, email 
        FROM users 
        WHERE LOWER(email) = ${normalizedEmail}
        LIMIT 1
      `);
      console.log(`[DEBUG] Simple query result:`, simpleResult.rows[0]);
      
    } catch (debugError) {
      console.error('[DEBUG] Query debug error:', debugError);
    }
    
    // Now try the actual query - ONLY select columns that exist
    const [user] = await db
      .select({
        id: users.id,
        email: users.email,
        name: users.name,
        // DON'T select address fields that might not exist
        // street: users.street, // REMOVE
        // city: users.city,     // REMOVE
        // state: users.state,   // REMOVE
      })
      .from(users)
      .where(eq(users.email, normalizedEmail)) // Use exact match, not LOWER
      .limit(1);

    console.log(`[DEBUG] User found:`, user ? 'Yes' : 'No');
    
    if (!user) {
      console.log(`Password reset requested for non-existent email: ${normalizedEmail}`);
      return { success: true, message: 'If an account exists, reset email sent' };
    }
    
    // Rest of password reset logic...
    
  } catch (error) {
    console.error('[ERROR] Password reset query error:', error);
    console.error('[ERROR] Error details:', {
      message: error.message,
      code: error.code,
      detail: error.detail
    });
    
    // Return generic message even on error
    return { success: true, message: 'If an account exists, reset email sent' };
  }
}
2. Create a Test Endpoint to Verify
Add this temporary endpoint to debug:
typescript// Add to /server/routes/auth.ts temporarily

router.get('/api/debug/check-user/:email', async (req, res) => {
  const { email } = req.params;
  
  try {
    // Multiple ways to check
    const results = {
      email: email,
      normalized: email.toLowerCase().trim(),
      checks: {}
    };
    
    // Check 1: Raw SQL
    try {
      const rawResult = await db.execute(sql`
        SELECT id, email FROM users WHERE email = ${email}
      `);
      results.checks.rawExactMatch = rawResult.rows.length > 0;
    } catch (e) {
      results.checks.rawExactMatch = `Error: ${e.message}`;
    }
    
    // Check 2: Case insensitive SQL
    try {
      const caseInsensitiveResult = await db.execute(sql`
        SELECT id, email FROM users WHERE LOWER(email) = LOWER(${email})
      `);
      results.checks.caseInsensitive = caseInsensitiveResult.rows.length > 0;
      if (caseInsensitiveResult.rows.length > 0) {
        results.checks.actualEmail = caseInsensitiveResult.rows[0].email;
      }
    } catch (e) {
      results.checks.caseInsensitive = `Error: ${e.message}`;
    }
    
    // Check 3: Drizzle ORM
    try {
      const [drizzleResult] = await db
        .select({ id: users.id, email: users.email })
        .from(users)
        .where(eq(users.email, email.toLowerCase().trim()))
        .limit(1);
      results.checks.drizzleOrm = !!drizzleResult;
    } catch (e) {
      results.checks.drizzleOrm = `Error: ${e.message}`;
    }
    
    // Check 4: List all emails (be careful with this in production)
    try {
      const allEmails = await db.execute(sql`
        SELECT email FROM users ORDER BY created_at DESC LIMIT 10
      `);
      results.checks.recentEmails = allEmails.rows.map(r => {
        const email = r.email;
        // Partially mask for security
        return email.substring(0, 3) + '***' + email.substring(email.indexOf('@'));
      });
    } catch (e) {
      results.checks.recentEmails = `Error: ${e.message}`;
    }
    
    res.json(results);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});
3. Fix the Schema Issues
The real issue might be that the query is trying to select columns that don't exist. Update your schema:
typescript// Check your /server/db/schema.ts file
// Make sure the users table definition matches your actual database

export const users = pgTable('users', {
  id: serial('id').primaryKey(),
  email: varchar('email', { length: 255 }).notNull().unique(),
  password: varchar('password', { length: 255 }).notNull(),
  name: varchar('name', { length: 255 }),
  role: varchar('role', { length: 50 }).default('user'),
  createdAt: timestamp('created_at').defaultNow(),
  updatedAt: timestamp('updated_at').defaultNow(),
  // Remove any address fields if they don't exist in the database
  // street: varchar('street', { length: 255 }), // REMOVE if not in DB
  // city: varchar('city', { length: 100 }),     // REMOVE if not in DB
  // state: varchar('state', { length: 50 }),    // REMOVE if not in DB
});
4. Direct Database Check
Run these queries directly on your database:
sql-- Check if the email exists
SELECT id, email, name FROM users WHERE email = 'cleanandflipyt@gmail.com';

-- Check case variations
SELECT id, email, name FROM users WHERE LOWER(email) = 'cleanandflipyt@gmail.com';

-- See all emails (to check for typos/spaces)
SELECT id, email, LENGTH(email) as email_length FROM users ORDER BY created_at DESC;

-- Check for hidden characters
SELECT id, email, encode(email::bytea, 'hex') as email_hex FROM users WHERE email LIKE '%cleanandflip%';
5. Simplified Password Reset Service
Replace the password reset method with this simpler version:
typescriptstatic async requestPasswordReset(
  email: string, 
  ipAddress: string, 
  userAgent: string
) {
  try {
    const normalizedEmail = email.toLowerCase().trim();
    
    // Use raw SQL to avoid schema issues
    const result = await db.execute(sql`
      SELECT id, email, name
      FROM users
      WHERE LOWER(email) = ${normalizedEmail}
      LIMIT 1
    `);
    
    if (result.rows.length === 0) {
      console.log(`Password reset requested for non-existent email: ${normalizedEmail}`);
      return { success: true, message: 'If an account exists, reset email sent' };
    }
    
    const user = result.rows[0];
    console.log(`Password reset requested for user ID: ${user.id}`);
    
    // Cancel existing tokens
    await db.execute(sql`
      UPDATE password_reset_tokens
      SET used = true
      WHERE user_id = ${user.id} AND used = false
    `);
    
    // Generate new token
    const token = crypto.randomBytes(32).toString('hex');
    const hashedToken = await bcrypt.hash(token, 10);
    const expiresAt = new Date();
    expiresAt.setHours(expiresAt.getHours() + 1);
    
    // Insert token
    await db.execute(sql`
      INSERT INTO password_reset_tokens (user_id, token, expires_at, ip_address, user_agent)
      VALUES (${user.id}, ${hashedToken}, ${expiresAt}, ${ipAddress}, ${userAgent})
    `);
    
    // Create reset link
    const resetLink = `${process.env.FRONTEND_URL || 'https://cleanandflip.com'}/reset-password?token=${token}&email=${encodeURIComponent(user.email)}`;
    
    // Send email
    await emailService.sendPasswordResetEmail({
      to: user.email,
      userName: user.name || 'Customer',
      resetLink,
      ipAddress,
      userAgent,
      expiresIn: '1 hour'
    });
    
    return { success: true, message: 'If an account exists, reset email sent' };
    
  } catch (error) {
    console.error('[ERROR] Password reset error:', error);
    return { success: true, message: 'If an account exists, reset email sent' };
  }
}
6. Test Commands
Run these to debug:
bash# Test the debug endpoint
curl https://cleanandflip.com/api/debug/check-user/cleanandflipyt@gmail.com

# Try password reset with verbose logging
curl -X POST https://cleanandflip.com/api/auth/forgot-password \
  -H "Content-Type: application/json" \
  -d '{"email": "cleanandflipyt@gmail.com"}' \
  -v

# Check recent logs
tail -f deployments/*/logs.txt | grep -E "(Password reset|DEBUG|ERROR)"
7. Common Issues to Check

Email has trailing spaces: The email might be stored as "cleanandflipyt@gmail.com " (with space)
Schema mismatch: The users table schema in code doesn't match database
Transaction issues: The query might be in a failed transaction
Connection pool issues: The database connection might be stale

The debug endpoint and enhanced logging should reveal the exact issue. Once we identify it, we can apply the permanent fix.