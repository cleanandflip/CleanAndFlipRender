there are two separate problems here:

The Observability page is still using ad-hoc dropdowns and crashed on missing dates (we fixed the date guard already—keep that in).

The server routes for issue details are throwing ReferenceError: ErrorStore is not defined, so the details drawer fails.

Below is a tight, copy-paste patch set for Replit.

1) Fix the server error: ErrorStore is not defined
Cause: server/routes/observability.ts calls ErrorStore.* but either:

the import is missing or misspelled,

the file path/case doesn’t match (../data/errorStore vs ../data/ErrorStore), or

a default import was used instead of a named import.

✅ Patch the imports at the top of server/routes/observability.ts
ts
Copy
Edit
// RIGHT (named import, case-sensitive path)
import { ErrorStore } from "../data/errorStore";

// If you also use zod/uuid/express types, keep those imports above.
✅ Ensure the data module exports ErrorStore as a named export
File: server/data/errorStore.ts

ts
Copy
Edit
export const ErrorStore = {
  // ...insertRaw, upsertIssue, bumpRollup, listIssues, getIssue, getRawForIssue,
  // setResolved, setIgnored, chartByHour...
};
✅ Make sure the issue details endpoints exist and use ErrorStore
Still in server/routes/observability.ts

ts
Copy
Edit
// GET one issue
app.get("/api/observability/issues/:fp", async (req, res) => {
  const issue = await ErrorStore.getIssue(req.params.fp);
  if (!issue) return res.status(404).json({ error: "Issue not found" });
  res.json({
    ...issue,
    firstSeen: new Date(issue.firstSeen).toISOString(),
    lastSeen: new Date(issue.lastSeen).toISOString(),
  });
});

// GET recent raw events for an issue (drawer)
app.get("/api/observability/issues/:fp/events", async (req, res) => {
  const limit = Math.min(Number(req.query.limit ?? 50), 200);
  const rows = await ErrorStore.getRawForIssue(req.params.fp, limit);
  res.json(rows.map(r => ({
    ...r,
    createdAt: new Date(r.createdAt).toISOString(),
  })));
});
Restart the server after fixing imports—Express won’t hot-reload TS module resolution issues reliably.

2) Normalize the API return shape (prevents date parsing crashes)
In the same file, when returning issues/series, always serialize dates to ISO:

ts
Copy
Edit
// list issues
const result = await ErrorStore.listIssues({ q, level, env, resolved, page, limit });
res.json({
  ...result,
  items: result.items.map(i => ({
    ...i,
    firstSeen: new Date(i.firstSeen).toISOString(),
    lastSeen: new Date(i.lastSeen).toISOString(),
  })),
});

// series
const rows = await ErrorStore.chartByHour({ from, to: now });
res.json(rows.map(r => ({ ...r, hour: new Date(r.hour).toISOString() })));
This pairs with the safe date parsing you added on the page (toDateSafe).

3) Force the UNIFIED DROPDOWN on Observability page
The errors tab must not create its own selects. Replace any local selects/Radix usage with your shared dropdown component.

✅ Use your standard dropdown (adjust import path to your project)
File: src/pages/admin/observability.tsx (or /observability/index.tsx)

tsx
Copy
Edit
import { Dropdown } from "@/components/ui/Dropdown"; // your unified dropdown

const LEVELS = [
  { label: "All levels", value: "" },
  { label: "Error", value: "error" },
  { label: "Warn",  value: "warn"  },
  { label: "Info",  value: "info"  },
];

const ENVS = [
  { label: "All envs",    value: "" },
  { label: "Production",  value: "production" },
  { label: "Development", value: "development" },
];

const STATUS = [
  { label: "Unresolved", value: "false" },
  { label: "Resolved",   value: "true"  },
];

// in the toolbar:
<Dropdown value={level ?? ""} onChange={v => setLevel(v || undefined)} options={LEVELS} placeholder="Level" />
<Dropdown value={env ?? ""}   onChange={v => setEnv(v || undefined)}   options={ENVS}   placeholder="Env" />
<Dropdown value={resolved ? "true" : "false"} onChange={v => setResolved(v === "true")} options={STATUS} placeholder="Status" />
✅ Delete any conflicting imports/usages
bash
Copy
Edit
# remove ad-hoc dropdowns in this page
rg -n "StandardDropdown|@radix-ui/react-select|<select" src/pages/admin/observability
✅ Keep dropdown z-index above cards
If your unified dropdown supports portal class, pass it; otherwise ensure global CSS:

css
Copy
Edit
/* global.css (or tailwind layer) */
.dropdown-portal, .dropdown-menu { z-index: 60; }
4) Sanity checks you should see in logs
Hitting details:

bash
Copy
Edit
GET /api/observability/issues/fp_123… 200
GET /api/observability/issues/fp_123…/events?limit=50 200
No more ReferenceError: ErrorStore is not defined.

Sanitizer lines still print, but do not block /api/observability/*.

On the page, dropdowns match the unified style used on Sell/Contact/etc.

5) Quick QA checklist for Replit
 /api/observability/issues/:fp returns an object with ISO dates.

 /api/observability/issues/:fp/events returns an array with ISO createdAt.

 Observability page no longer calls parseISO on undefined.

 All filters (Level/Env/Status) use the unified dropdown component.

 No imports of StandardDropdown, Radix Select, or <select> remain in the errors page.

 Opening an issue shows details without server 500s.