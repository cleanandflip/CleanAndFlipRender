fix the feed, reduce noise, and make real errors pop. It includes code you can drop in.

1) Make real app errors always visible
A) Default the Errors page to real signal
In src/pages/admin/observability* set initial filters to:

ts
Copy
Edit
// defaults
const [level, setLevel] = useState<"error" | "" >("error");
const [resolved, setResolved] = useState(false);
and when building the query:

ts
Copy
Edit
obsApi.issues({ q, level, env, resolved, page, limit })
(So page opens on Unresolved + Error only.)

B) Ensure we’re not filtering real exceptions client-side
In src/lib/err.ts keep resource noise filters (below) but never downgrade exceptions captured by the ErrorBoundary:

ts
Copy
Edit
export function reportClientError(p: {..., extra?: any}) {
  const isBoundary = p.extra?.source === "boundary"; // set in boundary (see next)
  // Only apply noise rules when NOT from boundary:
  if (!isBoundary) { /* apply IGNORE/DOWNGRADE below */ }
  // ...
}
Update ErrorBoundary to tag events:

tsx
Copy
Edit
componentDidCatch(error: any, info: any) {
  reportClientError({
    message: error?.message ?? "Render error",
    type: error?.name,
    stack: error?.stack,
    extra: { info, source: "boundary" },
  });
}
2) Stop “beacon.js” warnings
You have two options—pick one:

Option A (preferred): remove it
Search & delete the tag:

bash
Copy
Edit
rg -n "replit.com/public/js/beacon.js" src
Option B: ignore it in the client reporter
In src/lib/err.ts:

ts
Copy
Edit
const IGNORE_URL_PATTERNS = [
  /:\/\/replit\.com\/public\/js\/beacon\.js$/,
];
Keep it in the ignore list (not just downgrade) so it never shows.

3) Downgrade category image failures and dedupe
You already see these in the feed. We’ll keep one per URL per session and mark as info.

In src/lib/err.ts (final rules):

ts
Copy
Edit
const IGNORE_URL_PATTERNS = [
  /:\/\/replit\.com\/public\/js\/beacon\.js$/,
];

const DOWNGRADE_TO_INFO = [
  // Cloudinary category images
  /res\.cloudinary\.com\/clean-flip\/image\/upload\/.+\/categories\/.+\.(jpg|png|webp)$/i,
];

const seenThisSession = new Set<string>();

export function reportClientError(payload: {...}) {
  try {
    const msg = payload.message || "";
    const url = /https?:\/\/[^\s]+/i.exec(msg)?.[0] ?? "";

    // session de-dupe for resource messages
    if (url) {
      const key = payload.type + "|" + url;
      if (seenThisSession.has(key)) return;
      seenThisSession.add(key);
    }

    // boundary errors bypass noise rules
    const isBoundary = payload.extra?.source === "boundary";

    if (!isBoundary && url) {
      if (IGNORE_URL_PATTERNS.some(rx => rx.test(url))) return;
      if (DOWNGRADE_TO_INFO.some(rx => rx.test(url))) {
        payload.level = "info";
      }
    }

    // … send fetch to /api/observability/errors (unchanged) …
  } catch {}
}
Also keep the fallback image + single-log behavior you added via ImageWithFallback.

4) Give the dashboard controls to silence noisy fingerprints
Server: add “ignore fingerprint” endpoint
server/routes/observability.ts:

ts
Copy
Edit
app.put("/api/observability/issues/:fp/ignore", async (req, res) => {
  await ErrorStore.setIgnored(req.params.fp, true);
  res.json({ ok: true });
});
app.put("/api/observability/issues/:fp/unignore", async (req, res) => {
  await ErrorStore.setIgnored(req.params.fp, false);
  res.json({ ok: true });
});
Ensure listIssues supports ignored=false by default unless explicitly requested.

Client: add “Ignore” action on issue row/drawer
Call /ignore, then invalidate ["obs:issues"].

5) Separate test events from production noise
When we intentionally generate events (e.g., “Testing unified dropdowns…”), tag them so we can hide in prod views.

A) Tag test events
Where you trigger tests:

ts
Copy
Edit
reportClientError({
  message: "Testing unified dropdowns and server fix",
  type: "TestEvent",
  extra: { test: true, author: "dev" }
});
B) Filter them out by default (server or UI)
Server: in ErrorStore.listIssues, if resolved === false and no q provided, exclude type: "TestEvent" or tags.test === true.

UI: add a checkbox “Show test events” (default off → adds test=true filter only when checked).

6) Make sure dates never crash the page
In the API, always send ISO strings for firstSeen, lastSeen, and series hour.

In the page, keep toDateSafe and display fmtDateTime(toDateSafe(value)).

7) Verify the pipeline end-to-end
Create a real runtime error (button that throws).

Confirm it appears immediately under Unresolved + Error (default view).

Confirm beacon.js no longer shows.

Confirm category image failures show at most once per URL and as info.

Click a noisy fingerprint → Ignore → it disappears from default view.

Toggle “Show ignored” to review, if you added that filter.

8) One-time cleanup of current noise
Run a tiny maintenance script (server-only) to mark known noisy fingerprints ignored:

ts
Copy
Edit
const FINGERPRINTS_TO_IGNORE = [
  "fp_1274482563","fp_1531404053","fp_1668786221","fp_2129695444",
  "fp_1138877586","fp_878558479","fp_1756213730","fp_378134670",
  "fp_2106796842" // beacon
];
await Promise.all(FINGERPRINTS_TO_IGNORE.map(fp => ErrorStore.setIgnored(fp, true)));
(Or do it from the UI using the new “Ignore” control.)

9) Final acceptance checks
 Real app error (fp_1794719803) is visible by default.

 beacon.js events are gone (ignored or script removed).

 Cloudinary category image failures appear info, once per URL per session, or can be ignored by fingerprint.

 “Testing …” events are hidden by default (unless user enables “Show test events”).

 Errors page uses unified dropdowns (no Radix/native selects).

 No date parsing stack traces in console or boundary.

If any fingerprint still spams, paste it and we’ll add a precise suppression or fix the source.