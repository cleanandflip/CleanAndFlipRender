FIX UNIFIED SEARCH - COMPLETE COHESIVE BEHAVIOR

REPLIT INSTRUCTIONS:
markdown## MAKE UNIFIED SEARCH WORK PERFECTLY ACROSS NAV & PRODUCTS PAGE

### REQUIREMENTS:
1. Navbar search → Navigate to products page WITH search query populated
2. X in navbar → Go home AND clear products page search
3. Fix dropdown scrolling with page (should stay attached)
4. Enable scrolling within dropdown to see all results
5. Sync search state between pages

---

### FIX 1: UPDATE UNIFIED SEARCH COMPONENT

FILE: `/client/src/components/UnifiedSearch.tsx`

#### A. ADD URL PARAM SYNC
After the useState declarations, ADD:
```jsx
// Sync with URL params on mount (for products page)
useEffect(() => {
  if (variant === 'page') {
    const urlParams = new URLSearchParams(window.location.search);
    const searchParam = urlParams.get('search');
    if (searchParam) {
      setQuery(searchParam);
      // Trigger search if callback provided
      if (onSearch) {
        onSearch(searchParam);
      }
    }
  }
}, [variant, onSearch]);

// Listen for URL changes (when navigating from navbar)
useEffect(() => {
  const handleUrlChange = () => {
    if (variant === 'page') {
      const urlParams = new URLSearchParams(window.location.search);
      const searchParam = urlParams.get('search');
      setQuery(searchParam || '');
      if (onSearch) {
        onSearch(searchParam || '');
      }
    }
  };

  window.addEventListener('popstate', handleUrlChange);
  window.addEventListener('pushstate', handleUrlChange);
  
  return () => {
    window.removeEventListener('popstate', handleUrlChange);
    window.removeEventListener('pushstate', handleUrlChange);
  };
}, [variant, onSearch]);
B. FIX DROPDOWN SCROLLING & OVERFLOW
REPLACE the portal render section with:
jsx{isOpen && dropdownPosition && createPortal(
  <div 
    className="rounded-lg shadow-xl search-dropdown-portal"
    style={{
      position: 'fixed',
      top: `${dropdownPosition.top}px`,
      left: `${dropdownPosition.left}px`,
      width: `${dropdownPosition.width}px`,
      maxHeight: '384px', // max-h-96 = 24rem = 384px
      overflowY: 'auto',  // Enable vertical scrolling
      overflowX: 'hidden',
      zIndex: 999999,
      transition: 'opacity 0.2s ease-in-out',
      opacity: 1,
      pointerEvents: 'auto',
      ...dropdownStyle,
      // Add custom scrollbar styling
      scrollbarWidth: 'thin',
      scrollbarColor: `${theme.colors.textSecondary} ${theme.colors.cardBg}`
    }}
    onWheel={(e) => {
      // Prevent page scroll when scrolling dropdown
      e.stopPropagation();
    }}
  >
    {/* dropdown content */}
  </div>,
  document.body
)}
C. UPDATE handleSearch FOR BETTER SYNC
REPLACE handleSearch with:
jsxconst handleSearch = useCallback((searchQuery: string) => {
  console.log('handleSearch:', searchQuery, 'variant:', variant);
  
  // Handle empty/clear case
  if (!searchQuery?.trim()) {
    setQuery('');
    setResults([]);
    
    if (variant === 'navbar') {
      // Clear products page search via URL
      const currentPath = window.location.pathname;
      if (currentPath === '/products') {
        navigate('/products'); // Remove search param
      }
    } else if (variant === 'page' && onSearch) {
      onSearch(''); // Clear products
    }
    return;
  }
  
  // Save to recent
  const recent = [searchQuery, ...recentSearches.filter(s => s !== searchQuery)].slice(0, 5);
  setRecentSearches(recent);
  localStorage.setItem('recentSearches', JSON.stringify(recent));
  
  // Set query
  setQuery(searchQuery);
  
  // Navigate/search based on variant
  if (variant === 'navbar') {
    // Navigate to products with search param
    navigate(`/products?search=${encodeURIComponent(searchQuery)}`);
  } else if (variant === 'page') {
    // Update URL and trigger search
    const url = new URL(window.location.href);
    url.searchParams.set('search', searchQuery);
    window.history.pushState(null, '', url.toString());
    
    if (onSearch) {
      onSearch(searchQuery);
    }
  }
  
  setIsOpen(false);
  inputRef.current?.blur();
}, [recentSearches, onSearch, navigate, variant]);
D. FIX X BUTTON TO CLEAR BOTH
REPLACE X button onClick with:
jsxonClick={() => {
  console.log('Clear button clicked, variant:', variant);
  
  // Clear local state
  setQuery('');
  setResults([]);
  setIsOpen(false);
  
  if (variant === 'navbar') {
    // Navigate home and clear products search
    if (window.location.pathname === '/products') {
      navigate('/'); // Go home
    } else {
      navigate('/'); // Already home or elsewhere
    }
  } else if (variant === 'page') {
    // Clear search on products page
    const url = new URL(window.location.href);
    url.searchParams.delete('search');
    window.history.pushState(null, '', url.pathname);
    
    if (onSearch) {
      onSearch(''); // Show all products
    }
  }
  
  inputRef.current?.blur();
}}

FIX 2: UPDATE PRODUCTS PAGE
FILE: /client/src/pages/Products.tsx
ENSURE the products page:

Reads search param from URL on mount
Updates when URL changes
Passes correct props to UnifiedSearch

jsximport { useEffect, useState } from 'react';
import { UnifiedSearch } from '@/components/UnifiedSearch';

export default function Products() {
  const [products, setProducts] = useState([]);
  const [filteredProducts, setFilteredProducts] = useState([]);
  const [searchQuery, setSearchQuery] = useState('');
  
  // Read search from URL on mount
  useEffect(() => {
    const urlParams = new URLSearchParams(window.location.search);
    const search = urlParams.get('search') || '';
    setSearchQuery(search);
    
    // Filter products if search exists
    if (search) {
      filterProducts(search);
    } else {
      setFilteredProducts(products);
    }
  }, [products]);
  
  // Listen for URL changes
  useEffect(() => {
    const handleUrlChange = () => {
      const urlParams = new URLSearchParams(window.location.search);
      const search = urlParams.get('search') || '';
      setSearchQuery(search);
      filterProducts(search);
    };
    
    window.addEventListener('popstate', handleUrlChange);
    return () => window.removeEventListener('popstate', handleUrlChange);
  }, [products]);
  
  const filterProducts = (query: string) => {
    if (!query) {
      setFilteredProducts(products);
      return;
    }
    
    const filtered = products.filter(p => 
      p.name.toLowerCase().includes(query.toLowerCase()) ||
      p.description?.toLowerCase().includes(query.toLowerCase()) ||
      p.category?.toLowerCase().includes(query.toLowerCase())
    );
    setFilteredProducts(filtered);
  };
  
  return (
    <div>
      <UnifiedSearch
        variant="page"
        placeholder="Search products..."
        onSearch={(query) => {
          console.log('Products page search:', query);
          setSearchQuery(query);
          filterProducts(query);
        }}
      />
      
      {/* Display filtered products */}
      <div className="grid grid-cols-3 gap-4">
        {filteredProducts.map(product => (
          // Product cards
        ))}
      </div>
    </div>
  );
}

FIX 3: ADD CSS FOR DROPDOWN SCROLLBAR
FILE: /client/src/styles/globals.css
ADD:
css/* Custom scrollbar for search dropdown */
.search-dropdown-portal::-webkit-scrollbar {
  width: 6px;
}

.search-dropdown-portal::-webkit-scrollbar-track {
  background: rgba(255, 255, 255, 0.05);
}

.search-dropdown-portal::-webkit-scrollbar-thumb {
  background: rgba(255, 255, 255, 0.2);
  border-radius: 3px;
}

.search-dropdown-portal::-webkit-scrollbar-thumb:hover {
  background: rgba(255, 255, 255, 0.3);
}

/* Prevent body scroll when dropdown is open */
body.search-open {
  overflow: hidden;
}

FIX 4: PREVENT PAGE SCROLL WHEN DROPDOWN OPEN
In UnifiedSearch, ADD body class management:
jsxuseEffect(() => {
  if (isOpen) {
    document.body.classList.add('search-open');
  } else {
    document.body.classList.remove('search-open');
  }
  
  return () => {
    document.body.classList.remove('search-open');
  };
}, [isOpen]);

KEY BEHAVIORS AFTER FIX:
NAVBAR SEARCH:

Type "dumbbells" → Navigate to /products?search=dumbbells
Products page shows filtered dumbbells
Products search bar shows "dumbbells"
Click X → Navigate to home, clear all searches

PRODUCTS PAGE:

URL param populates search on load
Typing filters products in real-time
Dropdown stays attached when scrolling
Can scroll within dropdown to see all items
Click X → Clear filter, show all products

DROPDOWN:

Stays fixed to input field
Scrollable when content overflows
Doesn't cause page scroll
Click trending/recent works properly

This creates a perfectly synced search experience across your app!