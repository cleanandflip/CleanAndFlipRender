Instructions for Replit - Fix Wishlist Button Sync & Apply Unified Theme
Tell Replit:
"The wishlist buttons are not syncing in real-time across pages, and they need to follow a unified theme throughout the site. Fix the synchronization issue and apply consistent styling to ALL wishlist buttons.
ISSUES TO FIX:

Wishlist state not syncing - clicking wishlist on products page doesn't immediately reflect on product detail page
Inconsistent wishlist button styling - need unified theme across entire site
Slow state updates - should be instant

PHASE 1: DIAGNOSE SYNC ISSUES
bash# Find all wishlist button implementations
grep -rn "wishlist\|Wishlist" --include="*.tsx" client/src/components/
grep -rn "Heart.*button\|wishlist.*toggle" --include="*.tsx" client/src/

# Check wishlist state management
grep -rn "useWishlist\|wishlistState\|isWishlisted" --include="*.tsx" client/src/

# Find React Query wishlist queries
grep -rn "queryKey.*wishlist" --include="*.tsx" client/src/
PHASE 2: FIX WISHLIST STATE SYNCHRONIZATION
The issue is likely that different components have separate wishlist queries. Fix by:
1. Use React Query for Global State:
javascript// Create a global wishlist hook
export function useWishlist() {
  const queryClient = useQueryClient();
  
  const { data: wishlist = [] } = useQuery({
    queryKey: ['wishlist'],
    queryFn: fetchWishlist,
    staleTime: 0, // Always fresh
    cacheTime: 5 * 60 * 1000,
  });
  
  const toggleWishlist = useMutation({
    mutationFn: async (productId: number) => {
      const isWishlisted = wishlist.includes(productId);
      if (isWishlisted) {
        await api.delete(`/api/wishlist/${productId}`);
        return wishlist.filter(id => id !== productId);
      } else {
        await api.post('/api/wishlist', { productId });
        return [...wishlist, productId];
      }
    },
    onMutate: async (productId) => {
      // Optimistic update
      await queryClient.cancelQueries(['wishlist']);
      const previousWishlist = queryClient.getQueryData(['wishlist']);
      
      const isWishlisted = wishlist.includes(productId);
      const newWishlist = isWishlisted 
        ? wishlist.filter(id => id !== productId)
        : [...wishlist, productId];
      
      queryClient.setQueryData(['wishlist'], newWishlist);
      return { previousWishlist };
    },
    onError: (err, productId, context) => {
      // Rollback on error
      queryClient.setQueryData(['wishlist'], context.previousWishlist);
    },
    onSettled: () => {
      // Always refetch to ensure sync
      queryClient.invalidateQueries(['wishlist']);
    },
  });
  
  const isWishlisted = (productId: number) => wishlist.includes(productId);
  
  return { wishlist, toggleWishlist, isWishlisted };
}
2. Ensure All Components Use Same Hook:

Don't create separate wishlist states
Always use the shared useWishlist hook
This ensures instant updates everywhere

PHASE 3: CREATE UNIFIED WISHLIST BUTTON COMPONENT
Create client/src/components/ui/WishlistButton.tsx with the exact theme:
typescriptimport { Heart } from 'lucide-react';
import { useWishlist } from '@/hooks/useWishlist';
import { cn } from '@/lib/utils';

interface WishlistButtonProps {
  productId: number;
  size?: 'sm' | 'md' | 'lg';
  className?: string;
}

const sizeClasses = {
  sm: 'w-8 h-8',
  md: 'w-10 h-10',
  lg: 'w-12 h-12'
};

const iconSizes = {
  sm: 16,
  md: 20,
  lg: 24
};

export function WishlistButton({ productId, size = 'md', className = '' }: WishlistButtonProps) {
  const { isWishlisted, toggleWishlist } = useWishlist();
  const { mutate, isLoading } = toggleWishlist;
  
  const isInWishlist = isWishlisted(productId);
  const loading = isLoading;
  
  const handleWishlistToggle = (e: React.MouseEvent) => {
    e.preventDefault();
    e.stopPropagation();
    mutate(productId);
  };
  
  return (
    <div className="relative group">
      <button
        onClick={handleWishlistToggle}
        disabled={loading}
        className={cn(
          sizeClasses[size],
          "rounded-full flex items-center justify-center",
          "transition-all duration-300 transform",
          isInWishlist 
            ? "bg-red-500/90 text-white scale-110 shadow-lg shadow-red-500/25" 
            : "bg-gray-700/80 text-gray-300 hover:bg-gray-600 hover:shadow-md hover:scale-110",
          loading && "opacity-50 cursor-not-allowed animate-pulse",
          !loading && "cursor-pointer",
          className
        )}
        aria-label={isInWishlist ? 'Remove from wishlist' : 'Add to wishlist'}
      >
        <Heart 
          size={iconSizes[size]}
          className={cn("transition-all duration-300", loading && "animate-pulse")}
          fill={isInWishlist ? 'currentColor' : 'none'}
        />
      </button>
    </div>
  );
}
PHASE 4: REPLACE ALL WISHLIST BUTTONS
Find and replace ALL wishlist button implementations:
bash# Find all files with wishlist buttons
grep -rn "Heart.*onClick\|wishlist.*button" --include="*.tsx" client/src/

# Common locations:
- ProductCard component
- ProductDetail page
- ProductGrid
- Any other product displays
Replace every instance with:
jsx<WishlistButton productId={product.id} size="md" />
PHASE 5: ENSURE REAL-TIME UPDATES
1. Configure React Query for instant updates:
javascript// In your QueryClient config
const queryClient = new QueryClient({
  defaultOptions: {
    queries: {
      refetchOnWindowFocus: true,
      refetchOnMount: true,
      staleTime: 0, // Wishlist always fresh
    },
  },
});
2. Invalidate queries on navigation:
javascript// When navigating to product page
useEffect(() => {
  queryClient.invalidateQueries(['wishlist']);
}, [productId]);
PHASE 6: REMOVE OLD IMPLEMENTATIONS
Delete or update these:

Individual wishlist state in components
Custom wishlist toggle functions
Inconsistent wishlist button styles
Any local wishlist state management

PHASE 7: ADD LOADING SKELETON
For better UX during loading:
jsx// In WishlistButton component
if (!user) {
  return (
    <div className={cn(sizeClasses[size], "rounded-full bg-gray-700/50 animate-pulse")} />
  );
}
PHASE 8: TEST SYNCHRONIZATION
Test this flow:

Go to products page
Click wishlist on a product
Navigate to that product's detail page
Wishlist button should IMMEDIATELY show filled/red state
Toggle wishlist on detail page
Go back to products page
State should be instantly synced

PHASE 9: PERFORMANCE OPTIMIZATION
Add these optimizations:
javascript// Prefetch wishlist on app load
useEffect(() => {
  queryClient.prefetchQuery(['wishlist'], fetchWishlist);
}, []);

// Optimistic updates for instant feedback
onMutate: async (productId) => {
  // Update UI immediately
  await queryClient.cancelQueries(['wishlist']);
  // ... optimistic update logic
}
IMMEDIATE ACTIONS:

Create unified WishlistButton component with exact styling provided
Implement global wishlist state with React Query
Replace ALL wishlist buttons across the site
Add optimistic updates for instant feedback
Remove all local wishlist states
Test synchronization across all pages

EXPECTED RESULT:

Clicking wishlist anywhere instantly updates everywhere
All buttons have consistent red/gray theme
Smooth animations and hover effects
No delay or lag in state updates
Loading states with pulse animation

The wishlist state should be perfectly synchronized across the entire application with consistent, beautiful styling."RetryClaude can make mistakes. Please double-check responses.