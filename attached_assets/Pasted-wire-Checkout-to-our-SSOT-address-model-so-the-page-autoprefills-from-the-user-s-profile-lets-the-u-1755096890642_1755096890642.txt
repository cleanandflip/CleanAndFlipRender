wire Checkout to our SSOT address model so the page autoprefills from the user’s profile, lets the user pick or add another address, and keeps one source of truth (the addresses table + users.profile_address_id).

✅ Goal
When a logged-in user opens /checkout, the Shipping Information form is pre-filled from the profile default address (users.profile_address_id → addresses.id) and user contact (name, email, phone).

User can Choose a different address or Add new address (Geoapify autocomplete).

Whatever the user selects becomes the cart’s shipping address (no duplicated client state).

Optional: “Save this address to my profile” → persists the new address and (if checked) marks it default.

1) Server: expose the data we need
1.1 GET /api/user must include profile address (SSOT)
Return these fields (no legacy columns):

json
Copy
Edit
{
  "id": "...",
  "email": "user@x.com",
  "name": "First Last",
  "phone": "+18285551234",
  "profile_address_id": "uuid-or-null",
  "profile_address": {
    "id":"...",
    "firstName":"...",
    "lastName":"...",
    "street1":"...",
    "street2":null,
    "city":"...",
    "state":"NC",
    "postalCode":"28806",
    "country":"US",
    "latitude": 35.57,
    "longitude": -82.61,
    "isDefault": true,
    "isLocal": true
  },
  "profile_complete": true
}
Fix any remaining SELECTs in server/storage.ts/auth to not reference removed columns (street, zip_code, etc.).

1.2 GET /api/addresses?default=true
Already exists—ensure it returns the same DTO as above.

1.3 New: set the cart’s shipping address by ID
Create endpoint:

yaml
Copy
Edit
PUT /api/cart/shipping-address
Body: { addressId: string }
Auth: required
Effect: sets cart.shipping_address_id to the given addresses.id (for the current user)
Returns: { ok: true, shippingAddress: AddressDTO }
1.4 New: attach an ad-hoc address (when user types a one-off)
csharp
Copy
Edit
POST /api/cart/shipping-address
Body: AddressInput { firstName,lastName,street1,city,state,postalCode,country,latitude,longitude, ... }
Options:
  - saveToProfile?: boolean (default false)
  - makeDefault?: boolean (default false)
Server behavior:
  - If saveToProfile === true → create address in SSOT, optionally make default, then set cart.shipping_address_id to the new address.id.
  - Else → create a transient cart-level address record (or persist in addresses with `is_default=false` and don’t link as profile default), then set cart.shipping_address_id.
Return AddressDTO actually used.
This keeps one truth: the cart always carries an addressId that points to the same SSOT schema.

2) Client: Checkout should always read from SSOT
File: client/src/pages/checkout.tsx

2.1 Queries (React Query)
ts
Copy
Edit
const qc = useQueryClient();

const { data: user } = useQuery({ queryKey: ['user'], queryFn: api.user.me });
const { data: defaultAddress } = useQuery({
  queryKey: ['addresses', 'default'],
  queryFn: () => api.addresses.fetchDefault(),
  enabled: !!user, // only after login
});
const { data: cart } = useQuery({ queryKey: ['cart'], queryFn: api.cart.get });
2.2 Form default values come from user + defaultAddress
Use react-hook-form and reset() once data arrives so fields populate:

ts
Copy
Edit
const form = useForm<CheckoutForm>({
  mode: 'onChange',
  defaultValues: {
    firstName: '',
    lastName: '',
    email: user?.email ?? '',
    phone: user?.phone ?? '',
    street1: '',
    street2: '',
    city: '',
    state: '',
    postalCode: '',
    country: 'US'
  }
});

useEffect(() => {
  if (!user) return;
  const a = user.profile_address ?? defaultAddress;
  if (!a) return;
  form.reset({
    firstName: a.firstName,
    lastName:  a.lastName,
    email:     user.email,
    phone:     user.phone ?? '',
    street1:   a.street1,
    street2:   a.street2 ?? '',
    city:      a.city,
    state:     a.state,
    postalCode:a.postalCode,
    country:   a.country ?? 'US'
  });
}, [user, defaultAddress]);
2.3 “Use my profile address / Choose another”
Above the form, add an AddressPicker:

Radio A (default): Use my profile/default address (shows formatted single-line).

Radio B: Choose a different address → button Select from saved (opens modal with AddressList) and Add new (opens AddressForm with Geoapify).

When the user picks/creates another address, immediately call:

ts
Copy
Edit
await api.cart.setShippingAddressById(addressId);
await Promise.all([
  qc.invalidateQueries({ queryKey: ['cart'] }),
  qc.invalidateQueries({ queryKey: ['user'] }),
  qc.invalidateQueries({ queryKey: ['addresses'] }),
]);
After setting, reset() the form with the newly selected address so the visible fields match.

Do not store a duplicate local “address object” in checkout state; always reflect what the cart points to.

2.4 Inline edits (ad-hoc address)
If the user edits the prefilled fields and clicks Continue to Payment:

Validate (zod) required: firstName, lastName, street1, city, state, postalCode, country; validate phone with libphonenumber-js.

If “Save this address to my profile” is checked → POST /api/cart/shipping-address with saveToProfile=true (+ makeDefault if you add a “Make default” toggle).

Else → same endpoint with saveToProfile=false (server creates a non-default address and uses it for cart only).

After success, navigate to payment.

2.5 Autocomplete: fill every field on selection
In address-autocomplete.tsx, on suggestion click:

ts
Copy
Edit
const mapped = mapGeoapifyToFields(suggestion);
setValue('street1', mapped.street1, { shouldValidate: true });
setValue('city', mapped.city, { shouldValidate: true });
setValue('state', mapped.state, { shouldValidate: true });
setValue('postalCode', mapped.postalCode, { shouldValidate: true });
setValue('country', mapped.country ?? 'US');
setValue('latitude', mapped.latitude);
setValue('longitude', mapped.longitude);
trigger(['street1','city','state','postalCode']);
Include debounce and a user-facing error for 429 (“Too many requests, please try again shortly.”).

2.6 Button enablement / validation
Disable Continue to Payment until form is valid (formState.isValid) and we have either:

a cart.shipping_address_id, or

a valid ad-hoc address ready to POST.

When posting, show loading state.

3) Cart & “Local only” rules
On page load, backend should evaluate local delivery (is_local) based on the cart’s shipping address (which comes from SSOT).

If cart contains local-only items and selected address is not local, block and show an inline error: “This cart contains items available for local delivery only. Please choose a local address within 50 miles.” Provide a button to Pick a local address (opens AddressPicker).

Server guard (add-to-cart & before payment):

ts
Copy
Edit
if (cart.hasLocalOnly && !shippingAddress.is_local) {
  return res.status(403).json({ code: 'LOCAL_ONLY', message: 'Not within 50 miles.' });
}
4) One source of truth (enforcement)
Checkout never keeps its own persisted shipping fields. It reads current values from:

GET /api/user (contact info)

GET /api/addresses?default=true / cart shipping address

cart.shipping_address_id

Any change at checkout is either:

Select an existing address by ID, or

Create an address (optional save to profile) and then use its ID.

React Query invalidations after every create/update:

ts
Copy
Edit
qc.invalidateQueries({ queryKey: ['user'] });
qc.invalidateQueries({ queryKey: ['addresses'] });
qc.invalidateQueries({ queryKey: ['cart'] });
5) UI specifics to implement
Prefill First Name / Last Name from the address; Email and Phone from the user. (Let the user edit; on submit, send phone to /api/user via a small PUT /api/user if it changed.)

Add a “Use profile address” chip next to the Street field showing which address is active. Clicking the chip opens the AddressPicker.

Keep the “Save this address to my profile” checkbox. If checked, also show a “Make this my default” toggle. Wire to POST /api/cart/shipping-address flags.

Show a Local delivery badge if the selected address isLocal === true (and text: “Free delivery within 48 hours”).

6) QA checklist (acceptance)
 Visiting /checkout as logged-in user with a default address prefills all fields correctly.

 Clicking Choose different address updates the form and cart and persists cart.shipping_address_id.

 Adding a brand-new address from checkout with Save to profile checked creates the address, optionally sets it default, and pre-fills the form; it appears on Dashboard → Addresses immediately.

 Editing phone/email at checkout persists to user record (or you explicitly keep them order-only—choose one and be consistent).

 Local-only product enforcement fires correctly based on the selected address.

 No duplicated client state: a refresh of /checkout shows the same chosen address (because it’s read by ID).

 No legacy fields/queries anywhere; logs clean (no 400 spam from observability in dev).

Summary for Replit:
Implement the endpoints in §1, remove any remaining legacy selects, then update checkout.tsx per §2 to prefill from SSOT, pick by ID, or create and save. Tie the cart to an addressId, not loose form data. Invalidate queries after every mutation. Enforce local-only with the selected address. This yields a fully connected, single-source checkout experience.









Ask ChatGPT
