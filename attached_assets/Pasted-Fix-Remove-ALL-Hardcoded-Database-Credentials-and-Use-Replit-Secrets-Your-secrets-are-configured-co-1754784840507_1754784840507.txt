Fix: Remove ALL Hardcoded Database Credentials and Use Replit Secrets
Your secrets are configured correctly. The issue is hardcoded database credentials in your code. Let's fix every file.
Fix Instructions for Replit:
1. Fix server/db/index.ts - Primary Database Connection
typescriptimport { neon } from '@neondatabase/serverless';
import { drizzle } from 'drizzle-orm/neon-http';
import * as schema from './schema';

// Use Replit's DATABASE_URL secret - NO HARDCODING
if (!process.env.DATABASE_URL) {
  console.error('[FATAL] DATABASE_URL secret not found');
  process.exit(1);
}

const sql = neon(process.env.DATABASE_URL);
export const db = drizzle(sql, { schema });

export async function testConnection() {
  try {
    await sql`SELECT 1`;
    console.log('[INFO] Database connected via secrets');
    return true;
  } catch (error) {
    console.error('[DB] Connection failed - check DATABASE_URL secret');
    return false;
  }
}
2. Fix drizzle.config.ts - Migration Configuration
typescriptimport type { Config } from 'drizzle-kit';

// Build connection string from Replit secrets OR use DATABASE_URL
const connectionString = process.env.DATABASE_URL || 
  `postgresql://${process.env.PGUSER}:${process.env.PGPASSWORD}@${process.env.PGHOST}:${process.env.PGPORT}/${process.env.PGDATABASE}?sslmode=require`;

export default {
  schema: './server/db/schema.ts',
  out: './drizzle',
  driver: 'pg',
  dbCredentials: {
    connectionString: connectionString,
  },
} satisfies Config;
3. Fix server/auth.ts - Session Store Connection
typescriptimport connectPgSimple from 'connect-pg-simple';
import session from 'express-session';
import { Pool } from 'pg';

const PgSession = connectPgSimple(session);

// Use Replit secrets for session store
const sessionPool = new Pool({
  connectionString: process.env.DATABASE_URL,
  ssl: { rejectUnauthorized: false }
});

export const sessionConfig = {
  store: new PgSession({
    pool: sessionPool,
    tableName: 'sessions'
  }),
  secret: process.env.SESSION_SECRET || 'your-secret-key',
  resave: false,
  saveUninitialized: false,
  cookie: {
    secure: process.env.NODE_ENV === 'production',
    httpOnly: true,
    maxAge: 30 * 24 * 60 * 60 * 1000
  }
};
4. Fix server/storage.ts - Remove Any Direct Connections
typescript// Import the centralized db connection - don't create new ones
import { db } from './db';
import { eq, and, or, desc, sql as sqlOperator } from 'drizzle-orm';

// ❌ REMOVE any of these if they exist:
// const sql = neon('postgresql://...');  
// const db = drizzle(...);
// const pool = new Pool({...});

// ✅ Just use the imported db throughout the file
export const storage = {
  users: {
    findById: async (id: string) => {
      return await db.select().from(users).where(eq(users.id, id));
    },
    // ... rest of methods using 'db' from import
  }
};
5. Fix Any Test Files
Check for hardcoded connections in:

server/test/*.ts
server/scripts/*.ts
server/migrations/*.ts

Replace any hardcoded URLs with:
typescriptconst dbUrl = process.env.DATABASE_URL;
if (!dbUrl) throw new Error('DATABASE_URL not configured');
6. Fix WebSocket File server/websocket.ts
typescript// If this file needs database access
import { db } from './db';  // Use centralized connection

// Don't create separate database connections here
7. Create .env.example (for documentation only)
bash# This file is for documentation - actual values are in Replit Secrets
DATABASE_URL=postgresql://user:pass@host/db?sslmode=require
PGUSER=your_user
PGPASSWORD=your_password
PGHOST=your_host
PGPORT=5432
PGDATABASE=your_database
8. Verify No Hardcoded Values Remain
In Replit Shell:
bash# Check for any remaining hardcoded Neon references
grep -r "ep-" . --include="*.ts" --include="*.js" | grep -v node_modules | grep -v ".git"
grep -r "neon.tech" . --include="*.ts" --include="*.js" | grep -v node_modules | grep -v ".git"
grep -r "npg_" . --include="*.ts" --include="*.js" | grep -v node_modules | grep -v ".git"

# If any results show up, those files need fixing
9. Rebuild and Deploy
bash# Clear any cached credentials
rm -rf dist/

# Rebuild with secrets
npm run build

# Deploy
The key issue is that somewhere in your codebase there's a hardcoded connection string or a file creating its own database connection instead of using process.env.DATABASE_URL. Every database connection must use Replit's secrets.