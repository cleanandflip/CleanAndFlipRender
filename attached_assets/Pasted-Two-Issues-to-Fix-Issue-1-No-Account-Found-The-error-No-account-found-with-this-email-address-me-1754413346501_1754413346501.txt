Two Issues to Fix:
Issue 1: No Account Found
The error "No account found with this email address" means you're trying to login or reset password with an email that doesn't exist in your database.
Solution Options:

Check Existing Users:

bash# Run this in your database to see what users exist
psql $DATABASE_URL -c "SELECT email, name, role FROM users;"

Use the Correct Email:
Based on your audit document, you have these users:


Admin accounts exist
5 registered users total


Create a New Account:


Go to /register to create a new account
Or use the registration API


Create Test User via Database:

sql-- Create a test user
INSERT INTO users (email, password, name, role, created_at)
VALUES (
  'cleanandflipyt@gmail.com',
  '$2b$12$K8mNv/7qGXPKhVzLZ8YJxOqM1w1o8H5hC5tXvV5C5NnXJ5C5tXvV5', -- password: password123
  'Test User',
  'user',
  NOW()
);
Issue 2: Server Already Listening Error
Your server is trying to start twice. Here's the fix:
Update /server/index.ts:
typescript// At the top of your file
let server: any = null;

// Wrap your server start in a check
async function startServer() {
  try {
    // Don't start if already running
    if (server && server.listening) {
      console.log('Server already running');
      return;
    }

    // Your existing startup code...
    
    // When starting the server, store the instance
    server = app.listen(PORT, () => {
      console.log(`ðŸš€ Server started on port ${PORT}`);
    });

    // Handle graceful shutdown
    process.on('SIGTERM', () => {
      console.log('SIGTERM received, closing server...');
      if (server) {
        server.close(() => {
          console.log('Server closed');
          process.exit(0);
        });
      }
    });

  } catch (error) {
    console.error('Failed to start server:', error);
    // Only retry if server isn't already running
    if (!server || !server.listening) {
      setTimeout(startServer, 5000);
    }
  }
}

// Call startServer only once
startServer();

// Remove any duplicate app.listen() calls in your code
Quick Fixes for Common Login Issues:

Reset Admin Password:

bash# Generate a new password hash
node -e "const bcrypt = require('bcrypt'); bcrypt.hash('newpassword123', 12).then(console.log)"

# Update in database
psql $DATABASE_URL -c "UPDATE users SET password='$HASH_FROM_ABOVE' WHERE email='admin@cleanandflip.com';"

Create Your Personal Account:

bash# Via API
curl -X POST http://localhost:5000/api/register \
  -H "Content-Type: application/json" \
  -d '{
    "email": "cleanandflipyt@gmail.com",
    "password": "yourpassword",
    "name": "Your Name"
  }'

List All Existing Emails:

bash# See what emails are in the system
psql $DATABASE_URL -c "SELECT id, email, name, role, created_at FROM users ORDER BY created_at DESC;"
Test Your Login:

With Existing Admin:

Email: admin@cleanandflip.com
Password: (whatever was set during setup)


After Creating New User:

Email: cleanandflipyt@gmail.com
Password: (what you set)



Debug Login Issues:
Add this temporary debug endpoint to check user existence:
typescript// Temporary debug endpoint (remove in production)
router.post('/api/debug/check-email', async (req, res) => {
  const { email } = req.body;
  
  const [user] = await db
    .select({ 
      id: users.id, 
      email: users.email,
      hasPassword: sql<boolean>`password IS NOT NULL`
    })
    .from(users)
    .where(eq(users.email, email.toLowerCase()));
    
  res.json({
    exists: !!user,
    hasPassword: user?.hasPassword || false,
    // Don't send sensitive data
  });
});
Common Issues & Solutions:

Email Case Sensitivity:

The system converts emails to lowercase
Try: cleanandflipyt@gmail.com not CleanAndFlipYT@gmail.com


Password Requirements:

Minimum 8 characters
Case sensitive


Session Issues:

Clear browser cookies
Try incognito mode



Need help creating a specific user account? Let me know what email you want to use and I'll provide the exact commands.