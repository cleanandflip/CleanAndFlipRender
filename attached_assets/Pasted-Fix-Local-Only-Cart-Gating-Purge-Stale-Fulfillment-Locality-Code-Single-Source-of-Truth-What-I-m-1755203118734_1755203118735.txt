Fix Local-Only Cart Gating + Purge Stale Fulfillment/Locality Code (Single Source of Truth)
What I’m seeing
I have a Local address set as default, the Products page banner correctly says “Free local delivery in your area – Most orders arrive in 24–48 hrs”, but I still cannot add Local-Delivery-Only items to cart.

The profile dropdown shows “Shipping Only” for me even though my default address is Local.

A footer toast says “Local Delivery Only — update your address…” at the same time the top banner says I am eligible.

This implies multiple, conflicting locality sources are in use (default address vs. zip in localStorage vs. IP, etc.).

There’s a build error blocking address save/invalidations:

nginx
Copy
Edit
Unexpected reserved word 'await' in AddressForm.tsx:78
which likely prevents proper cache invalidation after setting default address.

North-star behavior
Only two fulfillment modes exist:

LOCAL_ONLY

LOCAL_AND_SHIPPING
(No “shipping only” mode anywhere.)

For LOCAL_ONLY products:

Eligible local users can add to cart. No shipping methods/costs in checkout; show a delivery ETA 24–48 hrs.

Non-local users cannot add to cart; show clear guidance to check their ZIP or add a local address.

One single source of truth determines locality eligibility, and every component (badges, banners, cart, checkout, profile menu, toasts) reads that same state.

Live updates: changing default address or ZIP immediately re-evaluates eligibility and enables/disables Add to Cart consistently across the site.

Fix Plan (do these in order)
1) Consolidate to a Single Locality Source of Truth
Create/confirm shared/locality.ts (server-safe, isomorphic) that defines:

ts
Copy
Edit
export type LocalityStatus = {
  eligible: boolean;              // in local zone?
  zone: 'LOCAL' | 'NON_LOCAL';
  zip?: string;
  reason?: string;                // e.g., 'outside-zone', 'no-default-address', etc.
  source: 'DEFAULT_ADDRESS' | 'ZIP' | 'IP';
};

export async function evaluateLocality({
  user,           // optional (server can load default address)
  zipOverride,    // optional
  ip,             // optional
}: { user?: User; zipOverride?: string; ip?: string }): Promise<LocalityStatus> { /* single logic */ }
Rules & precedence (apply in both server and client):

If user has a default address, use its ZIP → determine eligible.

Else if the user entered a ZIP override (ZipCheck), use it.

Else IP fallback (best-effort).
Return source so UIs can explain decisions.

2) Unify all readers to the same hook/context
Replace scattered hooks with one hook: useLocality() in client/src/hooks/useLocality.ts that only queries /api/locality/status and caches it with React Query. It should never compute its own eligibility; the server decides.

Provide a LocalityContext or use the hook directly.

Remove/replace all older helpers: LocalBadge, any old useZip, legacy isLocalUser utilities, etc. The only public client API should be useLocality() returning the server’s LocalityStatus.

3) Server endpoint: single shape, single place
Standardize /api/locality/status to return exactly:

json
Copy
Edit
{
  "eligible": true|false,
  "zone": "LOCAL"|"NON_LOCAL",
  "zip": "28806",
  "reason": "default-address" | "outside-zone" | "no-default-address" | "...",
  "source": "DEFAULT_ADDRESS"|"ZIP"|"IP"
}
Accept optional ?zip=.... If a user is authenticated, also resolve default address (rule precedence above).

Ensure all Add to Cart gating and checkout use this endpoint state (not local heuristics).

4) Fix the AddressForm await error that blocks invalidation
The Vite error indicates await is used inside a non-async function.
In client/src/components/addresses/AddressForm.tsx, ensure the handler that calls:

ts
Copy
Edit
await Promise.all([
  queryClient.invalidateQueries({ queryKey: ['addresses'] }),
  queryClient.invalidateQueries({ queryKey: ['cart'] }),
  queryClient.invalidateQueries({ queryKey: ['user'] }),
  queryClient.invalidateQueries({ queryKey: ['locality'] }),
])
is inside an async function (likely the submit handler). If the React callback cannot be async, change to:

ts
Copy
Edit
void Promise.all([...]);
This fix is critical so the default address change immediately updates locality and unlocks Local-Only adds.

5) Cart & server enforcement (defense in depth)
Client AddToCartButton: for LOCAL_ONLY products, disable unless locality.eligible === true.
Tooltip text: “Local delivery only. Set a local default address or enter a local ZIP to order.”

Server POST /api/cart/items must re-check:

If product is LOCAL_ONLY and evaluateLocality(...) says not eligible → 403 with a structured error:

json
Copy
Edit
{ "code": "LOCAL_ONLY_NOT_ELIGIBLE", "message": "This item is only available for local delivery.", "resolution": "Set a local default address or enter a local ZIP." }
Add unit test for server guard and integration test that client can’t bypass.

6) Checkout rules
If any cart item is LOCAL_ONLY → hide shipping methods entirely and fees → surface “Local Delivery ETA: 24–48 hrs” summary row.

If cart is mixed (LOCAL_AND_SHIPPING + eligible local user), allow shipping only for ship-eligible items but default to Local Delivery and clearly indicate “Ships Items: $X / Local Delivery: FREE”.

If user becomes non-local during checkout (address change/ZIP) and cart contains LOCAL_ONLY:

show blocking dialog with CTA “Update address to Local” or “Remove Local-Only items”.

7) Purge the stale code (be aggressive)
Search and delete/replace all duplicated or legacy locality/fulfillment code. Likely culprits:

client/src/components/locality/LocalBadge.tsx

any old ProductAvailabilityChips that don’t use FulfillmentBadge

old products/fulfillment.ts under multiple locations — keep only shared/fulfillment.ts for enums/helpers and import it everywhere.

any usage of topic/type mismatches in WS messages for product updates — ensure WS payloads use { type, payload } only.

any “Shipping Only” strings in profile menu or anywhere else — not a supported mode. Replace with:

“Local delivery eligible” when eligible

“Outside local delivery zone” when not

8) Make the profile menu, banners, and toasts read the same state
Profile dropdown badge must derive from useLocality():

✅ Local delivery eligible (green)

❌ Outside local delivery zone (gray)

Products page banner and footer toasts must subscribe to the same React Query key (['locality']). No more divergent messages.

9) WebSocket/live syncing
When the user sets a default address or enters a ZIP, broadcast locality changes (if you already have a WS manager) using the new format:

ts
Copy
Edit
ws.publish({ type: 'locality:update', payload: localityStatus })
Client handler updates the ['locality'] cache.

10) Acceptance tests (must pass)
Unit / Integration

Server: evaluateLocality() precedence tests; /api/locality/status responses for (default address | zip | ip).

Server: /api/cart/items rejects non-eligible user on LOCAL_ONLY.

Client: with a Local default address:

LOCAL_ONLY product → enabled Add to Cart, success → checkout no shipping methods, shows “Local Delivery ETA: 24–48 hrs”.

Client: with Non-local ZIP:

LOCAL_ONLY product → disabled Add to Cart w/ tooltip + CTA to set address/ZIP.

Client: switch default address from non-local → local:

['locality'] invalidates; Add to Cart immediately enables.

E2E (Playwright)

Set default address (local ZIP), add LOCAL_ONLY item → checkout shows Local Delivery only and ETA banner.

Clear default address, set non-local ZIP → Add to Cart disabled for LOCAL_ONLY.

Mixed cart: add LOCAL_AND_SHIPPING item; with local user, shipping row appears only for ship-eligible items.

11) Dev-ex & logging
Add a one-line debug in useLocality() and server resolver (guarded by NODE_ENV) to log:

ini
Copy
Edit
[LOCALITY] eligible=true zone=LOCAL source=DEFAULT_ADDRESS zip=28806
so we can quickly see which source is driving the UI.

Small but important UI polish (while you’re in there)
Replace any lingering “shipping” pill on LOCAL_ONLY cards; ensure cards show one or both pills strictly from fulfillmentMode.

On checkout summary, render a Local Delivery row with a green badge and “Arrives 24–48 hrs”.

In empty/error states for non-local users on product detail, add the ZipCheck inline control so users can self-qualify quickly.

Definition of Done
I can set a Local default address and immediately add Local-Only products to cart (no page reloads).

The profile menu badge, top banner, footer toast, product cards, detail page, cart, and checkout all display consistent messages driven by the same useLocality() state.

Checkout for Local-Only orders shows no shipping and displays 24–48 hr ETA.

There is no place in the UI or code that references a “Shipping Only” mode.

Deleted/rewired stale files and helpers; imports now reference shared/fulfillment.ts and the unified locality endpoint.

All tests (unit/integration/E2E) pass.

If you hit anything blocking, start with the AddressForm await fix and the React Query invalidations — that’s likely the reason my Local default address isn’t propagating and why the cart remains disabled despite eligibility.








Ask ChatGPT
