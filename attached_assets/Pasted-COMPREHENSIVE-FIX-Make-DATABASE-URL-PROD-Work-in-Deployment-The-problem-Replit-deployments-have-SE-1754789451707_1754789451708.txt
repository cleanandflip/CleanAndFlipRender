COMPREHENSIVE FIX: Make DATABASE_URL_PROD Work in Deployment
The problem: Replit deployments have SEPARATE secrets from your workspace. Your DATABASE_URL_PROD is in workspace secrets but NOT in deployment secrets.
SOLUTION: Add DATABASE_URL_PROD to Deployment Secrets
Step 1: Access Deployment Settings

In Replit, go to your Deployments tab (rocket icon)
Find your deployed app (or the failed deployment)
Click on "Settings" or "Configure" for that deployment
Look for "Environment Variables" or "Secrets" section

Step 2: Add DATABASE_URL_PROD to Deployment
In the deployment's environment variables/secrets, add:
bashDATABASE_URL_PROD = postgresql://neondb_owner:npg_AP5jRXLtS2mi@ep-muddy-moon-aeggx6le-pooler.c-2.us-east-2.aws.neon.tech/neondb?sslmode=require
Step 3: Update Your Database Configuration Code
File: server/db.ts
typescriptimport { neon } from '@neondatabase/serverless';
import { drizzle } from 'drizzle-orm/neon-http';
import * as schema from './schema';

function getDatabaseConfig() {
  const isProduction = process.env.NODE_ENV === 'production';
  const isDeployment = process.env.REPLIT_DEPLOYMENT === '1';
  
  console.log('[DB] Configuration Check:');
  console.log('[DB]   NODE_ENV:', process.env.NODE_ENV);
  console.log('[DB]   REPLIT_DEPLOYMENT:', process.env.REPLIT_DEPLOYMENT);
  console.log('[DB]   DATABASE_URL:', process.env.DATABASE_URL ? 'Set' : 'Missing');
  console.log('[DB]   DATABASE_URL_PROD:', process.env.DATABASE_URL_PROD ? 'Set' : 'Missing');
  console.log('[DB]   DATABASE_URL_DEV:', process.env.DATABASE_URL_DEV ? 'Set' : 'Missing');
  
  // PRODUCTION/DEPLOYMENT: Must use DATABASE_URL_PROD
  if (isProduction || isDeployment) {
    const prodUrl = process.env.DATABASE_URL_PROD;
    
    if (!prodUrl) {
      console.error('[DB] ❌ CRITICAL: DATABASE_URL_PROD is required for production!');
      console.error('[DB] Please add DATABASE_URL_PROD to:');
      console.error('[DB]   1. Replit Secrets (for workspace)');
      console.error('[DB]   2. Deployment Environment Variables (for deployment)');
      console.error('[DB] Go to Deployments → Settings → Environment Variables');
      throw new Error('DATABASE_URL_PROD must be set for production environment');
    }
    
    // Verify it's actually the production database
    if (prodUrl.includes('lingering-flower')) {
      throw new Error('SECURITY ERROR: DATABASE_URL_PROD points to development database!');
    }
    
    console.log('[DB] ✅ Using PRODUCTION database (muddy-moon)');
    return prodUrl;
  }
  
  // DEVELOPMENT: Use dev database
  const devUrl = process.env.DATABASE_URL_DEV || 
                 process.env.DATABASE_URL ||
                 process.env.DEV_DATABASE_URL;
  
  if (!devUrl) {
    throw new Error('No development database URL configured');
  }
  
  // Verify it's actually the development database
  if (devUrl.includes('muddy-moon')) {
    throw new Error('SAFETY ERROR: Development trying to use production database!');
  }
  
  console.log('[DB] ✅ Using DEVELOPMENT database (lingering-flower)');
  return devUrl;
}

// Initialize database with selected URL
const DATABASE_URL = getDatabaseConfig();
const sql = neon(DATABASE_URL);
export const db = drizzle(sql, { schema });

// Connection test
export async function testConnection() {
  try {
    const result = await sql`SELECT current_database() as db`;
    console.log('[DB] ✅ Connected to database:', result[0].db);
    return true;
  } catch (error: any) {
    console.error('[DB] ❌ Connection failed:', error.message);
    return false;
  }
}
Step 4: Alternative - Use Replit's Deployment Config File
If you can't access deployment settings directly, create .replit.toml:
tomlrun = "npm run dev"
entrypoint = "server/index.ts"

[deployment]
run = ["sh", "-c", "NODE_ENV=production npm run start"]
deploymentTarget = "cloudrun"
build = ["sh", "-c", "npm run build"]

[deployment.env]
NODE_ENV = "production"
DATABASE_URL_PROD = "postgresql://neondb_owner:npg_AP5jRXLtS2mi@ep-muddy-moon-aeggx6le-pooler.c-2.us-east-2.aws.neon.tech/neondb?sslmode=require"
Step 5: Verify Your Secrets Setup
In Workspace Secrets (for development):
bashDATABASE_URL = [your dev database - lingering-flower]
DATABASE_URL_DEV = [your dev database - lingering-flower]
DATABASE_URL_PROD = [your prod database - muddy-moon]
In Deployment Environment (for production):
bashDATABASE_URL_PROD = [your prod database - muddy-moon]
# This must be added via Deployment Settings
WHY THIS HAPPENS:

Workspace Secrets = Only visible when running in development
Deployment Secrets = Separate environment, needs its own variables
Security Design = Prevents accidental exposure of dev secrets to production

FINAL DEPLOYMENT STEPS:

Add DATABASE_URL_PROD to deployment environment variables
Update your db.ts with the code above
Build: npm run build
Deploy again

How to Add Deployment Secrets in Replit:
Method 1: Via Deployments Tab

Click Deployments (rocket icon)
Click your deployment
Click Settings/Configure
Add Environment Variable: DATABASE_URL_PROD

Method 2: Via .replit.toml

Add [deployment.env] section with DATABASE_URL_PROD
Commit and push
Redeploy

Method 3: During Deployment

When you click Deploy
Look for "Environment Variables" section
Add DATABASE_URL_PROD there before confirming

Success Indicators:

Development shows: "Using DEVELOPMENT database (lingering-flower)"
Deployment shows: "Using PRODUCTION database (muddy-moon)"
No DATABASE_URL_PROD missing errors

The key is that deployment needs its own DATABASE_URL_PROD secret, separate from workspace secrets!