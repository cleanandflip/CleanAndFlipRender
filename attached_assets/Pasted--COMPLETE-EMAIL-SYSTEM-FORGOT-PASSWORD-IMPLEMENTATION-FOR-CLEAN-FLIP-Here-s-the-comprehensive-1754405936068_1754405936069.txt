ðŸ“§ COMPLETE EMAIL SYSTEM & FORGOT PASSWORD IMPLEMENTATION FOR CLEAN & FLIP
Here's the comprehensive guide to implement both Resend email functionality AND forgot password system into your existing codebase:

COMPREHENSIVE EMAIL & AUTHENTICATION IMPLEMENTATION INSTRUCTIONS FOR REPLIT
Please implement a complete email system with forgot password functionality for Clean & Flip using Resend with the following specifications:
PART 1: INITIAL SETUP
1.1 Resend Account Setup

Sign up at resend.com
Verify domain (cleanandflip.com) with DNS records
Add email addresses:

admin@cleanandflip.com
support@cleanandflip.com
orders@cleanandflip.com


Get API key from Resend dashboard

1.2 Install Dependencies
bashnpm install resend @react-email/components bull bull-board
1.3 Environment Variables
Add to .env:
RESEND_API_KEY=re_xxxxxxxxxxxxx
EMAIL_FROM_ADMIN=admin@cleanandflip.com
EMAIL_FROM_SUPPORT=support@cleanandflip.com
EMAIL_FROM_ORDERS=orders@cleanandflip.com
EMAIL_DOMAIN=cleanandflip.com
FRONTEND_URL=https://cleanandflip.com
PART 2: DATABASE SCHEMA UPDATES
Add these tables to your existing schema:
sql-- Email log table
CREATE TABLE email_logs (
  id SERIAL PRIMARY KEY,
  to_email VARCHAR(255) NOT NULL,
  from_email VARCHAR(255) NOT NULL,
  subject VARCHAR(255) NOT NULL,
  template_type VARCHAR(50) NOT NULL,
  status VARCHAR(20) DEFAULT 'pending',
  sent_at TIMESTAMP,
  error TEXT,
  metadata JSONB,
  created_at TIMESTAMP DEFAULT NOW()
);

-- Newsletter subscribers
CREATE TABLE newsletter_subscribers (
  id SERIAL PRIMARY KEY,
  email VARCHAR(255) UNIQUE NOT NULL,
  subscribed BOOLEAN DEFAULT true,
  unsubscribe_token VARCHAR(255) UNIQUE,
  subscribed_at TIMESTAMP DEFAULT NOW(),
  unsubscribed_at TIMESTAMP
);

-- Email preferences
CREATE TABLE user_email_preferences (
  user_id INTEGER REFERENCES users(id) PRIMARY KEY,
  order_updates BOOLEAN DEFAULT true,
  marketing BOOLEAN DEFAULT true,
  price_alerts BOOLEAN DEFAULT true,
  newsletter BOOLEAN DEFAULT true,
  updated_at TIMESTAMP DEFAULT NOW()
);

-- Password reset tokens table
CREATE TABLE password_reset_tokens (
  id SERIAL PRIMARY KEY,
  user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
  token VARCHAR(255) UNIQUE NOT NULL,
  expires_at TIMESTAMP NOT NULL,
  used BOOLEAN DEFAULT false,
  created_at TIMESTAMP DEFAULT NOW(),
  used_at TIMESTAMP,
  ip_address VARCHAR(45),
  user_agent TEXT
);

-- Indexes for performance
CREATE INDEX idx_email_logs_status ON email_logs(status);
CREATE INDEX idx_email_logs_created_at ON email_logs(created_at);
CREATE INDEX idx_password_reset_tokens_token ON password_reset_tokens(token);
CREATE INDEX idx_password_reset_tokens_user_id ON password_reset_tokens(user_id);
CREATE INDEX idx_password_reset_tokens_expires_at ON password_reset_tokens(expires_at);
PART 3: EMAIL SERVICE IMPLEMENTATION
3.1 Core Email Service
Create /server/services/email.service.ts:
typescriptimport { Resend } from 'resend';
import { z } from 'zod';
import { db } from '../db';
import { emailLogs } from '../db/schema';

// Initialize Resend
const resend = new Resend(process.env.RESEND_API_KEY);

// Email configuration based on type
const EMAIL_CONFIG = {
  admin: {
    from: 'Clean & Flip Admin <admin@cleanandflip.com>',
    replyTo: 'admin@cleanandflip.com'
  },
  support: {
    from: 'Clean & Flip Support <support@cleanandflip.com>',
    replyTo: 'support@cleanandflip.com'
  },
  orders: {
    from: 'Clean & Flip Orders <orders@cleanandflip.com>',
    replyTo: 'orders@cleanandflip.com',
    bcc: 'admin@cleanandflip.com' // Admin gets copies of all orders
  }
};

export class EmailService {
  // Core send method with logging
  async send(options: EmailOptions) {
    try {
      // Log email attempt
      const [logEntry] = await db.insert(emailLogs).values({
        to_email: options.to,
        from_email: options.from,
        subject: options.subject,
        template_type: options.templateType,
        status: 'pending',
        metadata: options.metadata
      }).returning();

      // Send via Resend
      const result = await resend.emails.send(options);

      // Update log with success
      await db.update(emailLogs)
        .set({ status: 'sent', sent_at: new Date() })
        .where(eq(emailLogs.id, logEntry.id));

      return result;
    } catch (error) {
      // Log failure
      await db.update(emailLogs)
        .set({ 
          status: 'failed', 
          error: error.message 
        })
        .where(eq(emailLogs.id, logEntry.id));
      
      throw error;
    }
  }

  // Specific email methods for each type...
}
3.2 Email Queue System
Create /server/services/email-queue.service.ts:
typescriptimport Bull from 'bull';
import { emailService } from './email.service';

const emailQueue = new Bull('email-queue', {
  redis: process.env.REDIS_URL || {
    port: 6379,
    host: 'localhost'
  }
});

// Process emails with retry logic
emailQueue.process(async (job) => {
  const { type, data } = job.data;
  return await emailService[type](data);
});

// Export queue for use in routes
export { emailQueue };
PART 4: PASSWORD RESET SERVICE
Create /server/services/password-reset.service.ts:
typescriptimport crypto from 'crypto';
import bcrypt from 'bcrypt';
import { db } from '../db';
import { users, passwordResetTokens, activityLogs } from '../db/schema';
import { emailService } from './email.service';
import { eq, and, gt, desc } from 'drizzle-orm';

export class PasswordResetService {
  private static readonly TOKEN_LENGTH = 32;
  private static readonly TOKEN_EXPIRY_HOURS = 1;
  private static readonly MAX_RESET_ATTEMPTS = 3;
  private static readonly RESET_COOLDOWN_MINUTES = 15;

  static async requestPasswordReset(
    email: string, 
    ipAddress: string, 
    userAgent: string
  ) {
    // Rate limiting check
    const recentAttempts = await this.getRecentResetAttempts(email);
    if (recentAttempts >= this.MAX_RESET_ATTEMPTS) {
      throw new Error('Too many reset attempts. Please try again later.');
    }

    // Find user
    const [user] = await db
      .select()
      .from(users)
      .where(eq(users.email, email.toLowerCase()))
      .limit(1);

    // Always return success to prevent email enumeration
    if (!user) {
      return { message: 'If an account exists, reset email sent' };
    }

    // Cancel any existing tokens
    await this.cancelUserTokens(user.id);

    // Generate secure token
    const token = crypto.randomBytes(this.TOKEN_LENGTH).toString('hex');
    const hashedToken = await bcrypt.hash(token, 10);
    const expiresAt = new Date();
    expiresAt.setHours(expiresAt.getHours() + this.TOKEN_EXPIRY_HOURS);

    // Save token
    await db.insert(passwordResetTokens).values({
      userId: user.id,
      token: hashedToken,
      expiresAt,
      ipAddress,
      userAgent,
    });

    // Send email
    const resetLink = `${process.env.FRONTEND_URL}/reset-password?token=${token}`;
    await emailService.sendPasswordResetEmail({
      to: user.email,
      userName: user.name || 'Customer',
      resetLink,
      ipAddress,
      userAgent,
      expiresIn: '1 hour',
    });

    // Log security event
    await this.logSecurityEvent(user.id, 'password_reset_requested', ipAddress);

    return { message: 'If an account exists, reset email sent' };
  }

  static async validateToken(token: string) {
    const now = new Date();
    
    // Find all non-expired tokens
    const tokens = await db
      .select()
      .from(passwordResetTokens)
      .where(
        and(
          eq(passwordResetTokens.used, false),
          gt(passwordResetTokens.expiresAt, now)
        )
      );

    // Check each token
    for (const resetToken of tokens) {
      const isValid = await bcrypt.compare(token, resetToken.token);
      if (isValid) {
        // Get user email
        const [user] = await db
          .select()
          .from(users)
          .where(eq(users.id, resetToken.userId))
          .limit(1);

        return { 
          valid: true, 
          email: user?.email,
          userId: resetToken.userId,
          tokenId: resetToken.id
        };
      }
    }

    return { valid: false };
  }

  static async resetPassword(
    token: string, 
    newPassword: string, 
    ipAddress: string
  ) {
    // Validate token
    const validation = await this.validateToken(token);
    if (!validation.valid || !validation.userId) {
      throw new Error('Invalid or expired token');
    }

    // Hash new password
    const hashedPassword = await bcrypt.hash(newPassword, 12);

    // Update password
    await db
      .update(users)
      .set({ 
        password: hashedPassword,
        updatedAt: new Date()
      })
      .where(eq(users.id, validation.userId));

    // Mark token as used
    await db
      .update(passwordResetTokens)
      .set({ 
        used: true,
        usedAt: new Date()
      })
      .where(eq(passwordResetTokens.id, validation.tokenId));

    // Send confirmation email
    const [user] = await db
      .select()
      .from(users)
      .where(eq(users.id, validation.userId))
      .limit(1);

    if (user) {
      await emailService.sendPasswordResetSuccessEmail({
        to: user.email,
        userName: user.name || 'Customer',
        ipAddress,
        timestamp: new Date().toISOString()
      });
    }

    // Log security event
    await this.logSecurityEvent(
      validation.userId, 
      'password_reset_completed', 
      ipAddress
    );

    return { message: 'Password reset successful' };
  }

  private static async getRecentResetAttempts(email: string) {
    const cutoff = new Date();
    cutoff.setMinutes(cutoff.getMinutes() - this.RESET_COOLDOWN_MINUTES);

    const [user] = await db
      .select()
      .from(users)
      .where(eq(users.email, email.toLowerCase()))
      .limit(1);

    if (!user) return 0;

    const attempts = await db
      .select()
      .from(passwordResetTokens)
      .where(
        and(
          eq(passwordResetTokens.userId, user.id),
          gt(passwordResetTokens.createdAt, cutoff)
        )
      );

    return attempts.length;
  }

  private static async cancelUserTokens(userId: number) {
    await db
      .update(passwordResetTokens)
      .set({ used: true })
      .where(
        and(
          eq(passwordResetTokens.userId, userId),
          eq(passwordResetTokens.used, false)
        )
      );
  }

  private static async logSecurityEvent(
    userId: number, 
    event: string, 
    ipAddress: string
  ) {
    await db.insert(activityLogs).values({
      userId,
      action: event,
      metadata: { ipAddress },
      createdAt: new Date()
    });
  }
}
PART 5: EMAIL TEMPLATES
Create all email templates in /server/emails/:
5.1 Password Reset Email (/server/emails/password-reset.tsx):
typescriptimport {
  Body,
  Button,
  Container,
  Head,
  Heading,
  Html,
  Link,
  Preview,
  Section,
  Text,
} from '@react-email/components';

interface PasswordResetEmailProps {
  userName: string;
  resetLink: string;
  ipAddress: string;
  userAgent: string;
  expiresIn: string;
}

export const PasswordResetEmail = ({
  userName,
  resetLink,
  ipAddress,
  userAgent,
  expiresIn = '1 hour',
}: PasswordResetEmailProps) => {
  const main = {
    backgroundColor: '#f9f9f9',
    fontFamily: '-apple-system,BlinkMacSystemFont,"Segoe UI",Roboto,sans-serif',
  };

  const container = {
    margin: '0 auto',
    padding: '40px 20px',
    maxWidth: '560px',
  };

  const h1 = {
    color: '#0f0f0f',
    fontSize: '24px',
    fontWeight: '600',
    lineHeight: '1.25',
    marginBottom: '24px',
  };

  const text = {
    color: '#0f0f0f',
    fontSize: '16px',
    lineHeight: '1.5',
    marginBottom: '16px',
  };

  const button = {
    backgroundColor: '#0f0f0f',
    borderRadius: '6px',
    color: '#ffffff',
    display: 'inline-block',
    fontSize: '16px',
    fontWeight: '600',
    lineHeight: '1',
    padding: '16px 24px',
    textDecoration: 'none',
    textAlign: 'center' as const,
  };

  const securityInfo = {
    backgroundColor: '#ffffff',
    border: '1px solid #e5e5e5',
    borderRadius: '6px',
    padding: '16px',
    marginTop: '24px',
  };

  return (
    <Html>
      <Head />
      <Preview>Reset your Clean & Flip password</Preview>
      <Body style={main}>
        <Container style={container}>
          <Heading style={h1}>Password Reset Request</Heading>
          
          <Text style={text}>Hi {userName},</Text>
          
          <Text style={text}>
            We received a request to reset your password for your Clean & Flip account.
            Click the button below to create a new password:
          </Text>
          
          <Section style={{ textAlign: 'center', margin: '32px 0' }}>
            <Button style={button} href={resetLink}>
              Reset Password
            </Button>
          </Section>
          
          <Text style={text}>
            Or copy and paste this link into your browser:
          </Text>
          <Link href={resetLink} style={{ color: '#0066cc', fontSize: '14px' }}>
            {resetLink}
          </Link>
          
          <Text style={text}>
            This link will expire in {expiresIn}. If you didn't request this,
            please ignore this email or contact support if you have concerns.
          </Text>
          
          <Section style={securityInfo}>
            <Text style={{ ...text, fontSize: '14px', margin: 0 }}>
              <strong>Security Information:</strong><br />
              Request from IP: {ipAddress}<br />
              Device: {userAgent}
            </Text>
          </Section>
          
          <Text style={{ ...text, fontSize: '14px', color: '#666', marginTop: '32px' }}>
            â€” The Clean & Flip Team
          </Text>
        </Container>
      </Body>
    </Html>
  );
};
5.2 Order Confirmation (/server/emails/order-confirmation.tsx):
typescript// Order confirmation email with order details, shipping info, etc.
// Uses: orders@cleanandflip.com
5.3 Welcome Email (/server/emails/welcome.tsx):
typescript// Welcome new users with discount code
// Uses: support@cleanandflip.com
5.4 Additional Templates:

order-status.tsx - Order status updates
equipment-submission.tsx - Submission confirmations
admin-notification.tsx - Admin alerts
price-drop.tsx - Wishlist price alerts
newsletter.tsx - Marketing emails
return-request.tsx - Return confirmations
password-reset-success.tsx - Password change confirmation

PART 6: API ENDPOINTS
Add these routes to your Express server:
typescript// Authentication routes
router.post('/api/auth/forgot-password', async (req, res) => {
  try {
    const { email } = req.body;
    const ipAddress = req.ip;
    const userAgent = req.get('user-agent') || 'Unknown';
    
    const result = await PasswordResetService.requestPasswordReset(
      email,
      ipAddress,
      userAgent
    );
    
    res.json(result);
  } catch (error) {
    res.status(429).json({ error: error.message });
  }
});

router.get('/api/auth/reset-password/:token', async (req, res) => {
  const { token } = req.params;
  const result = await PasswordResetService.validateToken(token);
  res.json(result);
});

router.post('/api/auth/reset-password', async (req, res) => {
  try {
    const { token, password } = req.body;
    const ipAddress = req.ip;
    
    const result = await PasswordResetService.resetPassword(
      token,
      password,
      ipAddress
    );
    
    res.json(result);
  } catch (error) {
    res.status(400).json({ error: error.message });
  }
});

// Email management routes
router.post('/api/admin/email/test', requireAdmin, async (req, res) => {
  // Test email sending
});

router.post('/api/newsletter/subscribe', async (req, res) => {
  // Newsletter subscription
});

router.get('/api/user/email-preferences', requireAuth, async (req, res) => {
  // Get email preferences
});

router.put('/api/user/email-preferences', requireAuth, async (req, res) => {
  // Update email preferences
});

// Add to existing order routes
router.post('/api/orders/:id/resend-confirmation', requireAuth, async (req, res) => {
  // Resend order confirmation
});
PART 7: FRONTEND COMPONENTS
7.1 Update Login Page
Add "Forgot Password?" link to existing login page:
typescript// In your Login component, add:
<div className="text-center text-sm">
  <Link href="/forgot-password" className="text-blue-600 hover:underline">
    Forgot your password?
  </Link>
</div>
7.2 Forgot Password Page (/client/src/pages/ForgotPassword.tsx):
typescriptimport { useState } from 'react';
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { z } from 'zod';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Alert } from '@/components/ui/alert';
import { Link } from 'wouter';

const forgotPasswordSchema = z.object({
  email: z.string().email('Invalid email address'),
});

export function ForgotPassword() {
  const [isSubmitted, setIsSubmitted] = useState(false);
  const [isLoading, setIsLoading] = useState(false);

  const form = useForm({
    resolver: zodResolver(forgotPasswordSchema),
  });

  const onSubmit = async (data: z.infer<typeof forgotPasswordSchema>) => {
    setIsLoading(true);
    try {
      const response = await fetch('/api/auth/forgot-password', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(data),
      });

      if (response.ok) {
        setIsSubmitted(true);
      }
    } catch (error) {
      console.error('Password reset error:', error);
    } finally {
      setIsLoading(false);
    }
  };

  if (isSubmitted) {
    return (
      <div className="min-h-screen flex items-center justify-center p-4 bg-white">
        <div className="max-w-md w-full space-y-4">
          <Alert className="border-gray-200">
            <h2 className="text-lg font-semibold text-gray-900">Check your email</h2>
            <p className="mt-2 text-sm text-gray-600">
              If an account exists with that email, we've sent password reset instructions.
              Please check your inbox and spam folder.
            </p>
          </Alert>
          <Link href="/login">
            <Button variant="outline" className="w-full">
              Back to Login
            </Button>
          </Link>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen flex items-center justify-center p-4 bg-white">
      <div className="max-w-md w-full space-y-6">
        <div>
          <h1 className="text-2xl font-bold text-gray-900">Forgot Password?</h1>
          <p className="mt-2 text-sm text-gray-600">
            Enter your email and we'll send you instructions to reset your password.
          </p>
        </div>

        <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
          <div>
            <label htmlFor="email" className="block text-sm font-medium mb-1 text-gray-900">
              Email Address
            </label>
            <Input
              {...form.register('email')}
              type="email"
              placeholder="you@example.com"
              disabled={isLoading}
              className="border-gray-200"
            />
            {form.formState.errors.email && (
              <p className="mt-1 text-sm text-red-600">
                {form.formState.errors.email.message}
              </p>
            )}
          </div>

          <Button 
            type="submit" 
            className="w-full bg-black hover:bg-gray-800 text-white" 
            disabled={isLoading}
          >
            {isLoading ? 'Sending...' : 'Send Reset Instructions'}
          </Button>
        </form>

        <div className="text-center text-sm">
          <Link href="/login" className="text-gray-600 hover:text-black hover:underline">
            Back to Login
          </Link>
        </div>
      </div>
    </div>
  );
}
7.3 Reset Password Page (/client/src/pages/ResetPassword.tsx):
typescriptimport { useState, useEffect } from 'react';
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { z } from 'zod';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Alert } from '@/components/ui/alert';
import { Link, useLocation } from 'wouter';

const resetPasswordSchema = z.object({
  password: z.string().min(8, 'Password must be at least 8 characters'),
  confirmPassword: z.string(),
}).refine(data => data.password === data.confirmPassword, {
  message: "Passwords don't match",
  path: ['confirmPassword'],
});

export function ResetPassword() {
  const [location] = useLocation();
  const [isLoading, setIsLoading] = useState(false);
  const [isSuccess, setIsSuccess] = useState(false);
  const [isValidToken, setIsValidToken] = useState<boolean | null>(null);
  
  const urlParams = new URLSearchParams(window.location.search);
  const token = urlParams.get('token');

  const form = useForm({
    resolver: zodResolver(resetPasswordSchema),
  });

  useEffect(() => {
    // Validate token on mount
    if (token) {
      fetch(`/api/auth/reset-password/${token}`)
        .then(res => res.json())
        .then(data => setIsValidToken(data.valid))
        .catch(() => setIsValidToken(false));
    } else {
      setIsValidToken(false);
    }
  }, [token]);

  const onSubmit = async (data: z.infer<typeof resetPasswordSchema>) => {
    if (!token) return;
    
    setIsLoading(true);
    try {
      const response = await fetch('/api/auth/reset-password', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          token,
          password: data.password,
        }),
      });

      if (response.ok) {
        setIsSuccess(true);
      } else {
        const error = await response.json();
        form.setError('root', { message: error.error });
      }
    } catch (error) {
      form.setError('root', { message: 'An error occurred. Please try again.' });
    } finally {
      setIsLoading(false);
    }
  };

  if (isValidToken === null) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-gray-900 mx-auto"></div>
          <p className="mt-2 text-gray-600">Validating reset link...</p>
        </div>
      </div>
    );
  }

  if (isValidToken === false) {
    return (
      <div className="min-h-screen flex items-center justify-center p-4">
        <div className="max-w-md w-full space-y-4">
          <Alert variant="destructive">
            <h2 className="text-lg font-semibold">Invalid or Expired Link</h2>
            <p className="mt-2 text-sm">
              This password reset link is invalid or has expired. 
              Please request a new one.
            </p>
          </Alert>
          <Link href="/forgot-password">
            <Button className="w-full">Request New Reset Link</Button>
          </Link>
        </div>
      </div>
    );
  }

  if (isSuccess) {
    return (
      <div className="min-h-screen flex items-center justify-center p-4">
        <div className="max-w-md w-full space-y-4">
          <Alert className="border-green-200 bg-green-50">
            <h2 className="text-lg font-semibold text-green-900">Password Reset Successful</h2>
            <p className="mt-2 text-sm text-green-700">
              Your password has been successfully reset. You can now log in with your new password.
            </p>
          </Alert>
          <Link href="/login">
            <Button className="w-full bg-black hover:bg-gray-800 text-white">
              Go to Login
            </Button>
          </Link>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen flex items-center justify-center p-4 bg-white">
      <div className="max-w-md w-full space-y-6">
        <div>
          <h1 className="text-2xl font-bold text-gray-900">Reset Your Password</h1>
          <p className="mt-2 text-sm text-gray-600">
            Enter your new password below.
          </p>
        </div>

        <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
          <div>
            <label htmlFor="password" className="block text-sm font-medium mb-1 text-gray-900">
              New Password
            </label>
            <Input
              {...form.register('password')}
              type="password"
              placeholder="Enter new password"
              disabled={isLoading}
              className="border-gray-200"
            />
            {form.formState.errors.password && (
              <p className="mt-1 text-sm text-red-600">
                {form.formState.errors.password.message}
              </p>
            )}
          </div>

          <div>
            <label htmlFor="confirmPassword" className="block text-sm font-medium mb-1 text-gray-900">
              Confirm Password
            </label>
            <Input
              {...form.register('confirmPassword')}
              type="password"
              placeholder="Confirm new password"
              disabled={isLoading}
              className="border-gray-200"
            />
            {form.formState.errors.confirmPassword && (
              <p className="mt-1 text-sm text-red-600">
                {form.formState.errors.confirmPassword.message}
              </p>
            )}
          </div>

          {form.formState.errors.root && (
            <Alert variant="destructive">
              <p className="text-sm">{form.formState.errors.root.message}</p>
            </Alert>
          )}

          <Button 
            type="submit" 
            className="w-full bg-black hover:bg-gray-800 text-white" 
            disabled={isLoading}
          >
            {isLoading ? 'Resetting...' : 'Reset Password'}
          </Button>
        </form>
      </div>
    </div>
  );
}
PART 8: ROUTING UPDATES
Add routes to your React router:
typescript// In your main App.tsx or routes file:
import { ForgotPassword } from './pages/ForgotPassword';
import { ResetPassword } from './pages/ResetPassword';

// Add to your routes:
<Route path="/forgot-password" component={ForgotPassword} />
<Route path="/reset-password" component={ResetPassword} />
PART 9: INTEGRATION POINTS
Modify existing features to send emails:
9.1 Order Processing
typescript// In your checkout/order creation endpoint:
await emailService.sendOrderConfirmation({
  orderId: order.id,
  customerEmail: user.email,
  orderItems: items,
  total: order.total,
  shippingAddress: address,
});
9.2 User Registration
typescript// After successful registration:
await emailService.sendWelcomeEmail({
  to: user.email,
  userName: user.name,
  discountCode: 'WELCOME10',
});
9.3 Equipment Submissions
typescript// After submission creation:
await emailService.sendSubmissionConfirmation({
  to: submission.email,
  referenceNumber: submission.referenceNumber,
  items: submission.items,
});
PART 10: ADMIN DASHBOARD ADDITIONS
Add Email Management tab to admin dashboard:
typescript// New component: /client/src/pages/admin/EmailManagement.tsx
export function EmailManagement() {
  // Email logs viewer
  // Test email sender
  // Newsletter composer
  // Email analytics
  // Template previewer
}
PART 11: SECURITY & COMPLIANCE
Implement these security features:

Rate Limiting:

Max 3 password reset attempts per 15 minutes
Max 5 emails per user per hour
Max 1000 emails per day total


Email Validation:

Verify email format
Check against disposable email domains
Validate MX records


Compliance:

Include unsubscribe links in all marketing emails
Add physical address to email footers
Implement one-click unsubscribe
GDPR-compliant data handling



PART 12: TESTING
Create test files:
typescript// /server/tests/email.test.ts
// /server/tests/password-reset.test.ts
// Test all email templates
// Test rate limiting
// Test token expiration
// Test email delivery
IMPLEMENTATION PRIORITY

Phase 1 - Core Authentication (Do First):

Password reset functionality
Email service setup
Basic email templates
Update login page


Phase 2 - Transactional Emails:

Order confirmation
Order status updates
Welcome emails
Submission confirmations


Phase 3 - Marketing & Engagement:

Newsletter system
Price drop alerts
Email preferences
Unsubscribe system


Phase 4 - Admin & Analytics:

Email dashboard
Analytics tracking
A/B testing
Advanced templates




This comprehensive implementation will give Clean & Flip a professional email system with secure password reset functionality that matches your minimalist aesthetic while providing all essential e-commerce email features.