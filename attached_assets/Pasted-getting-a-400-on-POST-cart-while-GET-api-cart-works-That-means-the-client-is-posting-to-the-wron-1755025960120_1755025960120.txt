getting a 400 on POST /cart, while GET /api/cart works. That means the client is posting to the wrong path and/or wrong payload. Let’s fix this cleanly.

Do this now (client)
Use the API namespace

Find every “add to cart” call (ProductCard, PDP, quick add).

Replace POST /cart with POST /api/cart.

Send the correct JSON + headers + cookies

ts
Copy
Edit
// api/cart.ts (centralize it)
export async function addToCart({
  productId,
  variantId,
  quantity = 1,
}: { productId: string; variantId?: string; quantity?: number }) {
  const res = await fetch("/api/cart", {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    credentials: "include", // send/receive cart cookie
    body: JSON.stringify({ productId, variantId, quantity }),
  });
  if (!res.ok) {
    const msg = await res.text().catch(() => "");
    throw new Error(`Add to cart failed (${res.status}): ${msg}`);
  }
  return res.json();
}
In UI: call addToCart({ productId: item.id, quantity: 1 })

On success: refresh mini-cart; on error: show toast with message.

Wire the button

ts
Copy
Edit
try {
  setAdding(true);
  await addToCart({ productId: p.id, quantity: 1 });
  toast.success("Added to cart");
  queryClient.invalidateQueries({ queryKey: ["cart"] });
} catch (e:any) {
  toast.error(e.message ?? "Failed to add to cart");
} finally {
  setAdding(false);
}
Server: make POST /api/cart accept that payload
Route signature and validator

Ensure your router mounts /api/cart (not /cart).

Validate body; return clear messages (not generic 400).

ts
Copy
Edit
// routes/cart.ts
import { z } from "zod";
const AddSchema = z.object({
  productId: z.string().min(1),
  variantId: z.string().optional(),
  quantity: z.number().int().positive().default(1),
});

app.post("/api/cart", async (req, res) => {
  const parsed = AddSchema.safeParse(req.body);
  if (!parsed.success) {
    return res.status(400).json({ error: "Invalid body", details: parsed.error.flatten() });
  }
  const { productId, variantId, quantity } = parsed.data;

  const cartId = await getOrCreateCartId(req, res); // cookie-based guest carts
  const product = await db.products.findById(productId);
  if (!product) return res.status(404).json({ error: "Product not found" });
  if (product.stock <= 0) return res.status(409).json({ error: "Out of stock" });

  const updated = await carts.addItem({ cartId, productId, variantId, quantity });
  return res.status(200).json(updated);
});
Body parser must be before routes

ts
Copy
Edit
app.use(express.json());
Guest carts via cookie (when userId is undefined)

Your logs show userId: undefined. That’s okay if you support guest carts—create/attach a cartId cookie.

ts
Copy
Edit
async function getOrCreateCartId(req: Request, res: Response) {
  let { cartId } = req.cookies || {};
  if (!cartId) {
    cartId = crypto.randomUUID();
    res.cookie("cartId", cartId, {
      httpOnly: true,
      sameSite: "Lax",
      secure: process.env.NODE_ENV === "production",
      path: "/",
      maxAge: 1000 * 60 * 60 * 24 * 30, // 30 days
    });
    await carts.create(cartId);
  }
  return cartId;
}
CORS/cookies (if you serve API and UI on different origins)

If different origin, enable:

ts
Copy
Edit
app.use(cors({
  origin: UI_ORIGIN,
  credentials: true
}));
Client must have credentials: "include" (already added).

Logging so you can see the real reason
Log request body and response error

ts
Copy
Edit
app.post("/api/cart", (req, res, next) => {
  console.info("POST /api/cart body:", req.body);
  next();
});
// On error:
app.use((err, _req, res, _next) => {
  console.error("API error:", err);
  res.status(500).json({ error: "Server error" });
});
From your logs:

GET /api/cart 200 ✅

POST /cart 400 ❌ (wrong path)

userId: undefined → ensure guest carts via cookie

400 in 1–2ms → schema/body failed instantly (missing Content-Type or wrong body)

Fixing path, headers, body, and cookie will resolve this.

Quick verification checklist
 Client posts to /api/cart (not /cart).

 Content-Type: application/json + credentials: "include".

 Body includes { productId, quantity } (and variantId if needed).

 Server has express.json() before routes.

 /api/cart route validates body and returns useful errors.

 Guest cartId cookie is created and used when not signed in.

 Add-to-cart shows success toast; mini-cart updates; no 400s in logs.

If it still fails after this, paste the response body from the 400 and the server handler for /api/cart, and I’ll pinpoint the exact mismatch.