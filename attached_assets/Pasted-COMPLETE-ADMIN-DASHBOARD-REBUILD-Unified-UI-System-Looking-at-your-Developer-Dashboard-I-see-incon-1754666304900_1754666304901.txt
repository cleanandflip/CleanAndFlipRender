COMPLETE ADMIN DASHBOARD REBUILD: Unified UI System
Looking at your Developer Dashboard, I see inconsistent UI across tabs. Here's a comprehensive rebuild with perfect unified components.

PHASE 1: REMOVE ALL OLD ADMIN UI
bashTASK: Complete removal of old admin dashboard code

1. DELETE these admin component files:
   rm -rf client/src/pages/admin/*
   rm -rf client/src/components/admin/*
   rm -rf client/src/components/DataTable.tsx
   rm -rf client/src/components/MetricCard.tsx
   rm -rf client/src/components/TabNavigation.tsx
   
2. BACKUP your admin route handlers:
   cp -r server/routes/admin.ts server/routes/admin.backup.ts

3. CLEAR old admin styles:
   # Remove any admin-specific CSS classes
   # Keep only global theme colors

PHASE 2: CREATE UNIFIED ADMIN COMPONENT SYSTEM
File 1: /client/src/components/admin/AdminLayout.tsx
typescript// UNIFIED ADMIN LAYOUT WITH CONSISTENT THEME
import { useState } from 'react';
import { useLocation } from 'wouter';
import { 
  Package, Grid, FolderOpen, BarChart3, Heart, 
  Users, Settings, CreditCard, ChevronRight 
} from 'lucide-react';
import { cn } from '@/lib/utils';

interface AdminLayoutProps {
  children: React.ReactNode;
}

const ADMIN_TABS = [
  { id: 'products', label: 'Products', icon: Package },
  { id: 'categories', label: 'Categories', icon: Grid },
  { id: 'submissions', label: 'Submissions', icon: FolderOpen },
  { id: 'analytics', label: 'Analytics', icon: BarChart3 },
  { id: 'wishlist', label: 'Wishlist', icon: Heart },
  { id: 'users', label: 'Users', icon: Users },
  { id: 'system', label: 'System', icon: Settings },
  { id: 'stripe', label: 'Stripe', icon: CreditCard },
];

export function AdminLayout({ children }: AdminLayoutProps) {
  const [location, navigate] = useLocation();
  const currentTab = location.split('/').pop() || 'products';

  return (
    <div className="min-h-screen bg-[#0f172a]">
      {/* Header */}
      <div className="border-b border-gray-800 bg-[#1e293b]/50 backdrop-blur">
        <div className="container mx-auto px-6 py-8">
          <h1 className="text-3xl font-bold text-white mb-2">DEVELOPER DASHBOARD</h1>
          <p className="text-gray-400">Manage your Clean & Flip marketplace</p>
        </div>
      </div>

      {/* Tab Navigation */}
      <div className="border-b border-gray-800 bg-[#1e293b]/30">
        <div className="container mx-auto px-6">
          <nav className="flex space-x-1 -mb-px">
            {ADMIN_TABS.map((tab) => {
              const Icon = tab.icon;
              const isActive = currentTab === tab.id;
              
              return (
                <button
                  key={tab.id}
                  onClick={() => navigate(`/admin/${tab.id}`)}
                  className={cn(
                    "flex items-center gap-2 px-4 py-3",
                    "border-b-2 transition-all duration-200",
                    "text-sm font-medium",
                    isActive ? [
                      "border-blue-500 text-white",
                      "bg-blue-500/10"
                    ] : [
                      "border-transparent text-gray-400",
                      "hover:text-white hover:bg-white/5"
                    ]
                  )}
                >
                  <Icon className="w-4 h-4" />
                  {tab.label}
                </button>
              );
            })}
          </nav>
        </div>
      </div>

      {/* Content */}
      <div className="container mx-auto px-6 py-8">
        {children}
      </div>
    </div>
  );
}
File 2: /client/src/components/admin/UnifiedMetricCard.tsx
typescript// UNIFIED METRIC CARD COMPONENT
import { LucideIcon } from 'lucide-react';
import { cn } from '@/lib/utils';

interface MetricCardProps {
  title: string;
  value: string | number;
  icon: LucideIcon;
  change?: {
    value: number;
    label: string;
  };
  className?: string;
}

export function UnifiedMetricCard({ 
  title, 
  value, 
  icon: Icon, 
  change,
  className 
}: MetricCardProps) {
  return (
    <div className={cn(
      "relative overflow-hidden rounded-xl",
      "bg-[#1e293b]/50 border border-gray-800",
      "backdrop-blur p-6",
      "transition-all duration-300 hover:bg-[#1e293b]/70",
      className
    )}>
      <div className="flex items-start justify-between">
        <div>
          <p className="text-sm text-gray-400 mb-1">{title}</p>
          <p className="text-3xl font-bold text-white">{value}</p>
          {change && (
            <p className="text-sm mt-2">
              <span className={cn(
                "font-medium",
                change.value >= 0 ? "text-green-400" : "text-red-400"
              )}>
                {change.value >= 0 ? '+' : ''}{change.value}%
              </span>
              <span className="text-gray-500 ml-1">{change.label}</span>
            </p>
          )}
        </div>
        <div className="p-3 rounded-lg bg-white/5">
          <Icon className="w-6 h-6 text-gray-400" />
        </div>
      </div>
    </div>
  );
}
File 3: /client/src/components/admin/UnifiedDataTable.tsx
typescript// UNIFIED DATA TABLE COMPONENT
import { useState } from 'react';
import { 
  ChevronLeft, ChevronRight, Search, Filter, 
  Download, RefreshCw, MoreVertical, Eye, Edit, Trash 
} from 'lucide-react';
import { cn } from '@/lib/utils';

interface Column<T> {
  key: keyof T | string;
  label: string;
  render?: (item: T) => React.ReactNode;
  sortable?: boolean;
  width?: string;
}

interface DataTableProps<T> {
  data: T[];
  columns: Column<T>[];
  searchPlaceholder?: string;
  onSearch?: (query: string) => void;
  onRefresh?: () => void;
  onExport?: () => void;
  actions?: {
    onView?: (item: T) => void;
    onEdit?: (item: T) => void;
    onDelete?: (item: T) => void;
  };
  pagination?: {
    currentPage: number;
    totalPages: number;
    onPageChange: (page: number) => void;
  };
}

export function UnifiedDataTable<T extends { id: string | number }>({
  data,
  columns,
  searchPlaceholder = "Search...",
  onSearch,
  onRefresh,
  onExport,
  actions,
  pagination
}: DataTableProps<T>) {
  const [searchQuery, setSearchQuery] = useState('');
  const [selectedRows, setSelectedRows] = useState<Set<string | number>>(new Set());

  const handleSelectAll = () => {
    if (selectedRows.size === data.length) {
      setSelectedRows(new Set());
    } else {
      setSelectedRows(new Set(data.map(item => item.id)));
    }
  };

  const handleSelectRow = (id: string | number) => {
    const newSelected = new Set(selectedRows);
    if (newSelected.has(id)) {
      newSelected.delete(id);
    } else {
      newSelected.add(id);
    }
    setSelectedRows(newSelected);
  };

  return (
    <div className="bg-[#1e293b]/50 border border-gray-800 rounded-xl backdrop-blur overflow-hidden">
      {/* Table Header */}
      <div className="px-6 py-4 border-b border-gray-800">
        <div className="flex items-center justify-between">
          <div className="flex items-center gap-4">
            {onSearch && (
              <div className="relative">
                <Search className="absolute left-3 top-1/2 -translate-y-1/2 w-4 h-4 text-gray-400" />
                <input
                  type="text"
                  value={searchQuery}
                  onChange={(e) => {
                    setSearchQuery(e.target.value);
                    onSearch(e.target.value);
                  }}
                  placeholder={searchPlaceholder}
                  className="pl-10 pr-4 py-2 bg-[#0f172a]/50 border border-gray-700 rounded-lg text-white placeholder-gray-500 focus:outline-none focus:ring-2 focus:ring-blue-500/50 w-80"
                />
              </div>
            )}
            <button className="p-2 hover:bg-white/5 rounded-lg transition-colors">
              <Filter className="w-4 h-4 text-gray-400" />
            </button>
          </div>
          
          <div className="flex items-center gap-2">
            {onRefresh && (
              <button
                onClick={onRefresh}
                className="p-2 hover:bg-white/5 rounded-lg transition-colors"
              >
                <RefreshCw className="w-4 h-4 text-gray-400" />
              </button>
            )}
            {onExport && (
              <button
                onClick={onExport}
                className="flex items-center gap-2 px-4 py-2 bg-white/5 hover:bg-white/10 rounded-lg transition-colors text-gray-300"
              >
                <Download className="w-4 h-4" />
                Export
              </button>
            )}
          </div>
        </div>
      </div>

      {/* Table */}
      <div className="overflow-x-auto">
        <table className="w-full">
          <thead>
            <tr className="border-b border-gray-800">
              <th className="px-6 py-3 text-left">
                <input
                  type="checkbox"
                  checked={selectedRows.size === data.length && data.length > 0}
                  onChange={handleSelectAll}
                  className="rounded border-gray-600 bg-transparent"
                />
              </th>
              {columns.map((column) => (
                <th
                  key={column.key as string}
                  className={cn(
                    "px-6 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider",
                    column.sortable && "cursor-pointer hover:text-white"
                  )}
                  style={{ width: column.width }}
                >
                  {column.label}
                </th>
              ))}
              {actions && <th className="px-6 py-3 text-right">Actions</th>}
            </tr>
          </thead>
          
          <tbody>
            {data.length === 0 ? (
              <tr>
                <td colSpan={columns.length + 2} className="px-6 py-12 text-center text-gray-500">
                  No data available
                </td>
              </tr>
            ) : (
              data.map((item, index) => (
                <tr
                  key={item.id}
                  className={cn(
                    "border-b border-gray-800/50",
                    "hover:bg-white/5 transition-colors",
                    selectedRows.has(item.id) && "bg-blue-500/10"
                  )}
                >
                  <td className="px-6 py-4">
                    <input
                      type="checkbox"
                      checked={selectedRows.has(item.id)}
                      onChange={() => handleSelectRow(item.id)}
                      className="rounded border-gray-600 bg-transparent"
                    />
                  </td>
                  {columns.map((column) => (
                    <td key={column.key as string} className="px-6 py-4 text-gray-300">
                      {column.render 
                        ? column.render(item)
                        : (item[column.key as keyof T] as React.ReactNode)
                      }
                    </td>
                  ))}
                  {actions && (
                    <td className="px-6 py-4">
                      <div className="flex items-center justify-end gap-2">
                        {actions.onView && (
                          <button
                            onClick={() => actions.onView!(item)}
                            className="p-1.5 hover:bg-white/5 rounded transition-colors"
                          >
                            <Eye className="w-4 h-4 text-gray-400" />
                          </button>
                        )}
                        {actions.onEdit && (
                          <button
                            onClick={() => actions.onEdit!(item)}
                            className="p-1.5 hover:bg-white/5 rounded transition-colors"
                          >
                            <Edit className="w-4 h-4 text-gray-400" />
                          </button>
                        )}
                        {actions.onDelete && (
                          <button
                            onClick={() => actions.onDelete!(item)}
                            className="p-1.5 hover:bg-white/5 rounded transition-colors"
                          >
                            <Trash className="w-4 h-4 text-gray-400" />
                          </button>
                        )}
                      </div>
                    </td>
                  )}
                </tr>
              ))
            )}
          </tbody>
        </table>
      </div>

      {/* Pagination */}
      {pagination && (
        <div className="px-6 py-4 border-t border-gray-800 flex items-center justify-between">
          <p className="text-sm text-gray-400">
            Page {pagination.currentPage} of {pagination.totalPages}
          </p>
          <div className="flex items-center gap-2">
            <button
              onClick={() => pagination.onPageChange(pagination.currentPage - 1)}
              disabled={pagination.currentPage === 1}
              className="p-2 hover:bg-white/5 rounded-lg transition-colors disabled:opacity-50"
            >
              <ChevronLeft className="w-4 h-4 text-gray-400" />
            </button>
            <button
              onClick={() => pagination.onPageChange(pagination.currentPage + 1)}
              disabled={pagination.currentPage === pagination.totalPages}
              className="p-2 hover:bg-white/5 rounded-lg transition-colors disabled:opacity-50"
            >
              <ChevronRight className="w-4 h-4 text-gray-400" />
            </button>
          </div>
        </div>
      )}
    </div>
  );
}
File 4: /client/src/pages/admin/ProductsTab.tsx
typescript// UNIFIED PRODUCTS TAB
import { useState, useEffect } from 'react';
import { Package, Plus, DollarSign } from 'lucide-react';
import { UnifiedMetricCard } from '@/components/admin/UnifiedMetricCard';
import { UnifiedDataTable } from '@/components/admin/UnifiedDataTable';
import { UnifiedButton } from '@/components/admin/UnifiedButton';

interface Product {
  id: string;
  name: string;
  category: string;
  price: number;
  stock: number;
  status: 'active' | 'inactive';
  image: string;
}

export function ProductsTab() {
  const [products, setProducts] = useState<Product[]>([]);
  const [loading, setLoading] = useState(true);
  const [stats, setStats] = useState({
    total: 0,
    active: 0,
    revenue: 0
  });

  useEffect(() => {
    fetchProducts();
    fetchStats();
  }, []);

  const fetchProducts = async () => {
    const res = await fetch('/api/admin/products');
    const data = await res.json();
    setProducts(data.products);
    setLoading(false);
  };

  const fetchStats = async () => {
    const res = await fetch('/api/admin/stats');
    const data = await res.json();
    setStats(data.products);
  };

  const columns = [
    {
      key: 'name',
      label: 'Product',
      render: (product: Product) => (
        <div className="flex items-center gap-3">
          <img 
            src={product.image || '/placeholder.jpg'} 
            alt={product.name}
            className="w-10 h-10 rounded-lg object-cover"
          />
          <div>
            <p className="font-medium text-white">{product.name}</p>
            <p className="text-sm text-gray-500">ID: {product.id}</p>
          </div>
        </div>
      )
    },
    {
      key: 'category',
      label: 'Category',
      sortable: true
    },
    {
      key: 'price',
      label: 'Price',
      render: (product: Product) => (
        <span className="font-medium">${product.price.toFixed(2)}</span>
      ),
      sortable: true
    },
    {
      key: 'stock',
      label: 'Stock',
      render: (product: Product) => (
        <span className={cn(
          "px-2 py-1 rounded-full text-xs font-medium",
          product.stock > 5 ? "bg-green-500/20 text-green-400" : 
          product.stock > 0 ? "bg-yellow-500/20 text-yellow-400" : 
          "bg-red-500/20 text-red-400"
        )}>
          {product.stock} units
        </span>
      ),
      sortable: true
    },
    {
      key: 'status',
      label: 'Status',
      render: (product: Product) => (
        <span className={cn(
          "px-3 py-1 rounded-full text-xs font-medium",
          product.status === 'active' 
            ? "bg-green-500/20 text-green-400" 
            : "bg-gray-500/20 text-gray-400"
        )}>
          {product.status}
        </span>
      )
    }
  ];

  return (
    <div className="space-y-8">
      {/* Stats */}
      <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
        <UnifiedMetricCard
          title="Total Products"
          value={stats.total}
          icon={Package}
          change={{ value: 12, label: 'from last month' }}
        />
        <UnifiedMetricCard
          title="Active Products"
          value={stats.active}
          icon={Package}
          change={{ value: 8, label: 'from last month' }}
        />
        <UnifiedMetricCard
          title="Total Value"
          value={`$${stats.revenue.toLocaleString()}`}
          icon={DollarSign}
          change={{ value: 23, label: 'from last month' }}
        />
      </div>

      {/* Header */}
      <div className="flex items-center justify-between">
        <div>
          <h2 className="text-2xl font-bold text-white">Product Management</h2>
          <p className="text-gray-400 mt-1">Manage your Clean & Flip inventory</p>
        </div>
        <UnifiedButton
          variant="primary"
          icon={Plus}
          onClick={() => {/* Add product modal */}}
        >
          Add Product
        </UnifiedButton>
      </div>

      {/* Table */}
      <UnifiedDataTable
        data={products}
        columns={columns}
        searchPlaceholder="Search products by name, SKU, or category..."
        onSearch={(query) => console.log('Search:', query)}
        onRefresh={fetchProducts}
        onExport={() => console.log('Export')}
        actions={{
          onView: (product) => console.log('View:', product),
          onEdit: (product) => console.log('Edit:', product),
          onDelete: (product) => console.log('Delete:', product)
        }}
        pagination={{
          currentPage: 1,
          totalPages: 5,
          onPageChange: (page) => console.log('Page:', page)
        }}
      />
    </div>
  );
}
File 5: /client/src/pages/admin/AnalyticsTab.tsx
typescript// UNIFIED ANALYTICS TAB
import { useState, useEffect } from 'react';
import { TrendingUp, Users, ShoppingCart, DollarSign, BarChart3, Activity } from 'lucide-react';
import { UnifiedMetricCard } from '@/components/admin/UnifiedMetricCard';
import { LineChart, Line, BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts';

export function AnalyticsTab() {
  const [metrics, setMetrics] = useState({
    revenue: { value: 0, change: 0 },
    orders: { value: 0, change: 0 },
    conversion: { value: 0, change: 0 },
    avgOrder: { value: 0, change: 0 },
    users: { value: 0, change: 0 },
    products: { value: 0, change: 0 }
  });

  const [revenueData, setRevenueData] = useState([]);
  const [topProducts, setTopProducts] = useState([]);

  useEffect(() => {
    fetchAnalytics();
  }, []);

  const fetchAnalytics = async () => {
    const res = await fetch('/api/admin/analytics');
    const data = await res.json();
    setMetrics(data.metrics);
    setRevenueData(data.revenueChart);
    setTopProducts(data.topProducts);
  };

  return (
    <div className="space-y-8">
      {/* Metrics Grid */}
      <div className="grid grid-cols-1 md:grid-cols-3 lg:grid-cols-6 gap-4">
        <UnifiedMetricCard
          title="Total Revenue"
          value={`$${metrics.revenue.value.toLocaleString()}`}
          icon={DollarSign}
          change={{ value: metrics.revenue.change, label: 'from last period' }}
        />
        <UnifiedMetricCard
          title="Total Orders"
          value={metrics.orders.value}
          icon={ShoppingCart}
          change={{ value: metrics.orders.change, label: 'from last period' }}
        />
        <UnifiedMetricCard
          title="Conversion Rate"
          value={`${metrics.conversion.value}%`}
          icon={TrendingUp}
          change={{ value: metrics.conversion.change, label: 'from last period' }}
        />
        <UnifiedMetricCard
          title="Avg Order Value"
          value={`$${metrics.avgOrder.value}`}
          icon={Activity}
          change={{ value: metrics.avgOrder.change, label: 'from last period' }}
        />
        <UnifiedMetricCard
          title="Total Users"
          value={metrics.users.value}
          icon={Users}
          change={{ value: metrics.users.change, label: 'from last period' }}
        />
        <UnifiedMetricCard
          title="Total Products"
          value={metrics.products.value}
          icon={BarChart3}
          change={{ value: metrics.products.change, label: 'from last period' }}
        />
      </div>

      {/* Charts */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        {/* Revenue Chart */}
        <div className="bg-[#1e293b]/50 border border-gray-800 rounded-xl p-6">
          <h3 className="text-lg font-semibold text-white mb-4">Revenue Trend</h3>
          <ResponsiveContainer width="100%" height={300}>
            <LineChart data={revenueData}>
              <CartesianGrid strokeDasharray="3 3" stroke="#374151" />
              <XAxis dataKey="date" stroke="#9CA3AF" />
              <YAxis stroke="#9CA3AF" />
              <Tooltip 
                contentStyle={{ 
                  backgroundColor: '#1e293b', 
                  border: '1px solid #374151',
                  borderRadius: '8px'
                }}
                labelStyle={{ color: '#F3F4F6' }}
              />
              <Line 
                type="monotone" 
                dataKey="revenue" 
                stroke="#3B82F6" 
                strokeWidth={2}
                dot={{ fill: '#3B82F6', r: 4 }}
                activeDot={{ r: 6 }}
              />
            </LineChart>
          </ResponsiveContainer>
        </div>

        {/* Top Products */}
        <div className="bg-[#1e293b]/50 border border-gray-800 rounded-xl p-6">
          <h3 className="text-lg font-semibold text-white mb-4">Top Products</h3>
          <ResponsiveContainer width="100%" height={300}>
            <BarChart data={topProducts}>
              <CartesianGrid strokeDasharray="3 3" stroke="#374151" />
              <XAxis dataKey="name" stroke="#9CA3AF" />
              <YAxis stroke="#9CA3AF" />
              <Tooltip 
                contentStyle={{ 
                  backgroundColor: '#1e293b', 
                  border: '1px solid #374151',
                  borderRadius: '8px'
                }}
                labelStyle={{ color: '#F3F4F6' }}
              />
              <Bar dataKey="sales" fill="#3B82F6" radius={[8, 8, 0, 0]} />
            </BarChart>
          </ResponsiveContainer>
        </div>
      </div>

      {/* Recent Activity */}
      <div className="bg-[#1e293b]/50 border border-gray-800 rounded-xl p-6">
        <h3 className="text-lg font-semibold text-white mb-4">Recent Activity</h3>
        <div className="space-y-4">
          {[1, 2, 3, 4, 5].map((i) => (
            <div key={i} className="flex items-center justify-between py-3 border-b border-gray-800/50 last:border-0">
              <div className="flex items-center gap-4">
                <div className="w-2 h-2 bg-green-400 rounded-full"></div>
                <div>
                  <p className="text-white">New order placed</p>
                  <p className="text-sm text-gray-400">Order #CF-2024-{1000 + i}</p>
                </div>
              </div>
              <p className="text-sm text-gray-400">2 minutes ago</p>
            </div>
          ))}
        </div>
      </div>
    </div>
  );
}
File 6: /client/src/components/admin/UnifiedButton.tsx
typescript// UNIFIED BUTTON COMPONENT
import { LucideIcon } from 'lucide-react';
import { cn } from '@/lib/utils';

interface UnifiedButtonProps {
  children: React.ReactNode;
  variant?: 'primary' | 'secondary' | 'danger' | 'ghost';
  size?: 'sm' | 'md' | 'lg';
  icon?: LucideIcon;
  onClick?: () => void;
  disabled?: boolean;
  className?: string;
}

export function UnifiedButton({
  children,
  variant = 'primary',
  size = 'md',
  icon: Icon,
  onClick,
  disabled = false,
  className
}: UnifiedButtonProps) {
  const variants = {
    primary: "bg-blue-500 hover:bg-blue-600 text-white",
    secondary: "bg-white/10 hover:bg-white/20 text-white border border-gray-700",
    danger: "bg-red-500/20 hover:bg-red-500/30 text-red-400 border border-red-500/50",
    ghost: "hover:bg-white/10 text-gray-400 hover:text-white"
  };

  const sizes = {
    sm: "px-3 py-1.5 text-sm",
    md: "px-4 py-2 text-base",
    lg: "px-6 py-3 text-lg"
  };

  return (
    <button
      onClick={onClick}
      disabled={disabled}
      className={cn(
        "inline-flex items-center gap-2 rounded-lg",
        "font-medium transition-all duration-200",
        "disabled:opacity-50 disabled:cursor-not-allowed",
        variants[variant],
        sizes[size],
        className
      )}
    >
      {Icon && <Icon className="w-4 h-4" />}
      {children}
    </button>
  );
}

PHASE 3: CREATE REMAINING TAB COMPONENTS
typescript// Create these files following the same pattern:
// - /client/src/pages/admin/CategoriesTab.tsx
// - /client/src/pages/admin/UsersTab.tsx  
// - /client/src/pages/admin/SystemTab.tsx
// - /client/src/pages/admin/StripeTab.tsx
// - /client/src/pages/admin/WishlistTab.tsx
// - /client/src/pages/admin/SubmissionsTab.tsx

// Each using the unified components:
// - UnifiedMetricCard for stats
// - UnifiedDataTable for data
// - UnifiedButton for actions
// - Consistent dark theme colors

PHASE 4: UPDATE ADMIN ROUTES
typescript// /client/src/pages/Admin.tsx
import { AdminLayout } from '@/components/admin/AdminLayout';
import { ProductsTab } from './admin/ProductsTab';
import { AnalyticsTab } from './admin/AnalyticsTab';
// ... import other tabs

export function AdminDashboard() {
  const [, params] = useRoute('/admin/:tab');
  const tab = params?.tab || 'products';

  const renderTab = () => {
    switch(tab) {
      case 'products': return <ProductsTab />;
      case 'analytics': return <AnalyticsTab />;
      case 'categories': return <CategoriesTab />;
      case 'users': return <UsersTab />;
      case 'system': return <SystemTab />;
      case 'stripe': return <StripeTab />;
      case 'wishlist': return <WishlistTab />;
      case 'submissions': return <SubmissionsTab />;
      default: return <ProductsTab />;
    }
  };

  return (
    <AdminLayout>
      {renderTab()}
    </AdminLayout>
  );
}

PHASE 5: ADD UNIFIED STYLES
css/* Add to globals.css */

/* Unified scrollbar for admin */
.admin-scrollbar::-webkit-scrollbar {
  width: 8px;
  height: 8px;
}

.admin-scrollbar::-webkit-scrollbar-track {
  background: rgba(30, 41, 59, 0.5);
  border-radius: 4px;
}

.admin-scrollbar::-webkit-scrollbar-thumb {
  background: rgba(148, 163, 184, 0.3);
  border-radius: 4px;
}

.admin-scrollbar::-webkit-scrollbar-thumb:hover {
  background: rgba(148, 163, 184, 0.5);
}

/* Chart styles */
.recharts-tooltip-wrapper {
  outline: none !important;
}

.recharts-default-tooltip {
  background: #1e293b !important;
  border: 1px solid #374151 !important;
  border-radius: 8px !important;
}

.recharts-tooltip-label {
  color: #F3F4F6 !important;
}

.recharts-tooltip-item {
  color: #9CA3AF !important;
}

PHASE 6: CLEANUP COMMANDS
bash# Remove old admin components
rm -rf client/src/pages/admin-old
rm -rf client/src/components/admin-old

# Install required chart library
npm install recharts

# Build and test
npm run build
npm run dev

EXPECTED RESULTS:

Unified Dark Theme - Consistent #0f172a background across all tabs
Consistent Components - Same table, cards, buttons everywhere
Professional Analytics - Real charts with Recharts
Smooth Transitions - All hover states and animations consistent
Responsive Design - Works on all screen sizes
Clean Tab Navigation - Blue accent for active, smooth switching
Unified Search/Filter - Same search bar style across all tables
Consistent Icons - Lucide icons throughout
Proper Loading States - Skeleton loaders while fetching
Export/Import - Consistent across all data tables

This creates a completely unified, professional admin dashboard with perfect consistency across all sections.