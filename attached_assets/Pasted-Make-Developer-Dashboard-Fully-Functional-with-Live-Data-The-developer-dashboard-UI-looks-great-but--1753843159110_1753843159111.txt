Make Developer Dashboard Fully Functional with Live Data
The developer dashboard UI looks great but needs all buttons and data to be connected to real functionality. Please implement the following:
1. Product Management Tab - Make All Buttons Work
javascript// Add Product Button
const handleAddProduct = () => {
  navigate('/admin/products/new'); // Create this page
  // OR open a modal with product form
};

// Edit Button for each product
const handleEditProduct = (productId) => {
  navigate(`/admin/products/edit/${productId}`);
  // OR open edit modal with product data
};

// View Button (eye icon)
const handleViewProduct = (productId) => {
  window.open(`/products/${productId}`, '_blank');
};

// Delete Button
const handleDeleteProduct = async (productId) => {
  if (confirm('Are you sure you want to delete this product?')) {
    await fetch(`/api/admin/products/${productId}`, { 
      method: 'DELETE' 
    });
    refreshProducts();
  }
};

// Stock Status Update
const updateStockStatus = async (productId, newStatus) => {
  await fetch(`/api/admin/products/${productId}/stock`, {
    method: 'PUT',
    body: JSON.stringify({ status: newStatus })
  });
};
2. Connect Live Statistics in Header
javascript// Real-time stats that update
useEffect(() => {
  const fetchStats = async () => {
    const stats = await fetch('/api/admin/stats').then(r => r.json());
    setStats({
      totalProducts: stats.productCount,
      totalUsers: stats.userCount,
      totalOrders: stats.orderCount,
      revenue: stats.totalRevenue
    });
  };
  
  fetchStats();
  // Refresh every 30 seconds
  const interval = setInterval(fetchStats, 30000);
  return () => clearInterval(interval);
}, []);
3. Analytics Tab - Connect Real Data
javascript// API endpoints needed
app.get('/api/admin/analytics', async (req, res) => {
  const analytics = {
    pageViews: await getPageViews(),
    activeUsers: await getActiveUserCount(),
    conversionRate: await calculateConversionRate(),
    avgOrderValue: await getAverageOrderValue(),
    recentActivity: await getRecentActivity(),
    topProducts: await getTopSellingProducts()
  };
  res.json(analytics);
});

// Frontend implementation
const AnalyticsTab = () => {
  const [analytics, setAnalytics] = useState({
    pageViews: { current: 0, change: 0 },
    activeUsers: { current: 0, change: 0 },
    conversionRate: { current: 0, change: 0 },
    avgOrderValue: { current: 0, change: 0 }
  });
  
  useEffect(() => {
    const loadAnalytics = async () => {
      const data = await fetch('/api/admin/analytics').then(r => r.json());
      setAnalytics(data);
    };
    
    loadAnalytics();
    // Auto-refresh every minute
    const interval = setInterval(loadAnalytics, 60000);
    return () => clearInterval(interval);
  }, []);
  
  return (
    // Display the live data
  );
};
4. User Management Tab - Populate with Real Users
javascript// Fetch and display users
const UserManagement = () => {
  const [users, setUsers] = useState([]);
  const [searchTerm, setSearchTerm] = useState('');
  
  useEffect(() => {
    fetchUsers();
  }, []);
  
  const fetchUsers = async () => {
    const users = await fetch('/api/admin/users').then(r => r.json());
    setUsers(users);
  };
  
  const handleRoleChange = async (userId, newRole) => {
    await fetch(`/api/admin/users/${userId}/role`, {
      method: 'PUT',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ role: newRole })
    });
    fetchUsers(); // Refresh
  };
  
  const handleBlockUser = async (userId) => {
    if (confirm('Block this user?')) {
      await fetch(`/api/admin/users/${userId}/block`, {
        method: 'POST'
      });
      fetchUsers();
    }
  };
  
  // Filter users by search
  const filteredUsers = users.filter(user => 
    user.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
    user.email.toLowerCase().includes(searchTerm.toLowerCase())
  );
};
5. System Tab - Connect Real System Data
javascript// Database Status - Real connection check
const checkDatabaseStatus = async () => {
  try {
    await fetch('/api/admin/system/db-check');
    return { status: 'Connected', pool: 'Active' };
  } catch (error) {
    return { status: 'Disconnected', pool: 'Error' };
  }
};

// System Health - Real metrics
const getSystemHealth = async () => {
  const health = await fetch('/api/admin/system/health').then(r => r.json());
  return {
    server: health.status,
    memoryUsage: `${health.memoryPercent}%`,
    uptime: formatUptime(health.uptime),
    cpuUsage: `${health.cpuPercent}%`
  };
};

// Export Functionality
const handleExport = async (type) => {
  const response = await fetch(`/api/admin/export/${type}`, {
    method: 'GET',
    headers: { 'Accept': 'text/csv' }
  });
  
  const blob = await response.blob();
  const url = window.URL.createObjectURL(blob);
  const a = document.createElement('a');
  a.href = url;
  a.download = `${type}-export-${new Date().toISOString()}.csv`;
  a.click();
};

// Export buttons
<Button onClick={() => handleExport('products')}>Export Products CSV</Button>
<Button onClick={() => handleExport('users')}>Export Users CSV</Button>
<Button onClick={() => handleExport('orders')}>Export Orders CSV</Button>
6. API Endpoints to Create
javascript// Admin stats
app.get('/api/admin/stats', requireAdmin, async (req, res) => {
  const stats = {
    productCount: await db.products.count(),
    userCount: await db.users.count(),
    orderCount: await db.orders.count(),
    totalRevenue: await db.orders.sum('total')
  };
  res.json(stats);
});

// Analytics data
app.get('/api/admin/analytics', requireAdmin, async (req, res) => {
  // Implement real analytics queries
  const analytics = await getAnalyticsData();
  res.json(analytics);
});

// System health
app.get('/api/admin/system/health', requireAdmin, (req, res) => {
  res.json({
    status: 'Healthy',
    uptime: process.uptime(),
    memoryPercent: Math.round((process.memoryUsage().heapUsed / process.memoryUsage().heapTotal) * 100),
    timestamp: new Date()
  });
});

// Export endpoints
app.get('/api/admin/export/:type', requireAdmin, async (req, res) => {
  const { type } = req.params;
  let csv;
  
  switch(type) {
    case 'products':
      csv = await exportProductsToCSV();
      break;
    case 'users':
      csv = await exportUsersToCSV();
      break;
    case 'orders':
      csv = await exportOrdersToCSV();
      break;
  }
  
  res.setHeader('Content-Type', 'text/csv');
  res.setHeader('Content-Disposition', `attachment; filename="${type}.csv"`);
  res.send(csv);
});
7. Real-time Updates
javascript// WebSocket or polling for live updates
const useLiveData = (endpoint, interval = 30000) => {
  const [data, setData] = useState(null);
  
  useEffect(() => {
    const fetchData = async () => {
      const result = await fetch(endpoint).then(r => r.json());
      setData(result);
    };
    
    fetchData();
    const timer = setInterval(fetchData, interval);
    
    return () => clearInterval(timer);
  }, [endpoint, interval]);
  
  return data;
};

// Use in components
const stats = useLiveData('/api/admin/stats', 30000); // Update every 30s
const analytics = useLiveData('/api/admin/analytics', 60000); // Update every minute
8. Activity Feed - Real Events
javascript// Track real events
const trackActivity = async (type, details) => {
  await db.activity_logs.create({
    type,
    details,
    timestamp: new Date()
  });
};

// In various parts of the app
trackActivity('user_registration', { userId: newUser.id });
trackActivity('order_completed', { orderId, amount });
trackActivity('product_added_to_cart', { productId, userId });
Summary of Implementation:

✅ All buttons now have onClick handlers
✅ Live data fetches from real API endpoints
✅ Auto-refresh for real-time updates
✅ Export functionality works
✅ System health shows real metrics
✅ User management has all CRUD operations
✅ Product management fully functional
✅ Analytics show real data

Please implement all these features to make the developer dashboard fully operational with live, real-time data.