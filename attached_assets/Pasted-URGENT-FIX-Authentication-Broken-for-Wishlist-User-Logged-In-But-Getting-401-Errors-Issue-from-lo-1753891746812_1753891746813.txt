URGENT FIX: Authentication Broken for Wishlist - User Logged In But Getting 401 Errors
Issue from logs:

User is logged in (cleanandflipyt@gmail.com)
Admin routes work fine (authentication successful)
Wishlist routes return 401 "Authentication required"
userId: undefined in some requests despite user being logged in

Root Problem: The authentication token/session isn't being passed or recognized consistently across endpoints.
Fix Required:
1. Check Auth Middleware Consistency:
javascript// Make sure ALL authenticated routes use the SAME auth middleware
// Currently seems like admin routes work but wishlist routes don't

// Fix requireAuth middleware to match what's working for admin:
export const requireAuth = async (req, res, next) => {
  console.log('Auth Debug:', {
    headers: req.headers,
    session: req.session,
    user: req.user,
    isAuthenticated: req.isAuthenticated?.()
  });
  
  // If using Passport.js (which seems to be working for admin)
  if (req.isAuthenticated && req.isAuthenticated()) {
    req.userId = req.user.id;
    return next();
  }
  
  // If using JWT tokens
  const token = req.headers.authorization?.split(' ')[1];
  if (token) {
    try {
      const decoded = jwt.verify(token, process.env.JWT_SECRET);
      req.userId = decoded.userId || decoded.id;
      return next();
    } catch (error) {
      console.error('JWT verification failed:', error);
    }
  }
  
  // Check session
  if (req.session?.userId || req.session?.passport?.user) {
    req.userId = req.session.userId || req.session.passport.user;
    return next();
  }
  
  return res.status(401).json({ 
    error: 'Authentication required',
    message: 'Please log in to add items to your wishlist'
  });
};
2. Fix Frontend Auth Token Passing:
javascript// Check if the frontend is actually sending auth headers
// In your API client/fetch calls:

const apiClient = {
  getAuthHeaders: () => {
    const token = localStorage.getItem('token');
    const headers = {
      'Content-Type': 'application/json',
    };
    
    if (token) {
      headers['Authorization'] = `Bearer ${token}`;
    }
    
    return headers;
  },
  
  // For wishlist check
  checkWishlist: async (productId) => {
    const response = await fetch('/api/wishlist/check', {
      method: 'POST',
      headers: apiClient.getAuthHeaders(),
      credentials: 'include', // IMPORTANT: Include cookies/session
      body: JSON.stringify({ productId })
    });
    return response.json();
  },
  
  // For adding to wishlist
  addToWishlist: async (productId) => {
    const response = await fetch('/api/wishlist', {
      method: 'POST',
      headers: apiClient.getAuthHeaders(),
      credentials: 'include', // IMPORTANT: Include cookies/session
      body: JSON.stringify({ productId })
    });
    return response.json();
  }
};
3. Ensure Session/Cookie Configuration:
javascript// In server setup, make sure sessions are configured properly
app.use(session({
  secret: process.env.SESSION_SECRET,
  resave: false,
  saveUninitialized: false,
  cookie: {
    secure: process.env.NODE_ENV === 'production',
    httpOnly: true,
    maxAge: 24 * 60 * 60 * 1000, // 24 hours
    sameSite: 'lax' // Important for CORS
  }
}));

// Make sure Passport is initialized AFTER session
app.use(passport.initialize());
app.use(passport.session());
4. Fix Cart userId Issue:
javascript// In cart endpoints, get userId consistently
app.get('/api/cart', async (req, res) => {
  const userId = req.user?.id || req.session?.passport?.user || req.userId;
  const sessionId = req.sessionID;
  
  console.log('Get cart - userId:', userId, 'sessionId:', sessionId);
  
  // Rest of cart logic
});
5. Add Global Auth State Check:
javascript// Add a middleware to log auth state for debugging
app.use((req, res, next) => {
  if (req.path.startsWith('/api/')) {
    console.log('Request Auth State:', {
      path: req.path,
      isAuthenticated: req.isAuthenticated?.(),
      userId: req.user?.id,
      sessionUser: req.session?.passport?.user,
      hasAuthHeader: !!req.headers.authorization
    });
  }
  next();
});
6. Frontend Auth State Sync:
javascript// Make sure frontend knows user is logged in
const AuthContext = () => {
  const checkAuthStatus = async () => {
    try {
      const response = await fetch('/api/user', {
        credentials: 'include' // Always include credentials
      });
      
      if (response.ok) {
        const userData = await response.json();
        setUser(userData);
        setIsAuthenticated(true);
      } else {
        setUser(null);
        setIsAuthenticated(false);
      }
    } catch (error) {
      console.error('Auth check failed:', error);
    }
  };
  
  // Check on mount and after any auth action
  useEffect(() => {
    checkAuthStatus();
  }, []);
};
Quick Debug Test:

Add extensive logging to requireAuth middleware
Check if frontend is sending credentials with ALL requests
Verify session is being maintained between requests
Ensure auth middleware is applied consistently

The key issue appears to be:

Authentication works for /api/user and admin routes
But fails for wishlist routes
This suggests different auth middleware or missing credentials

Fix the auth middleware consistency and ensure credentials: 'include' is on ALL API calls!