Add Complete Category Management System to Developer Dashboard
Requirements:

Full CRUD operations for categories in admin dashboard
Categories on homepage link to /products?category={category-slug}
Editable category names, images, and display order
Real-time synchronization (changes reflect immediately on frontend)

Database Schema Updates Needed:
sqlCREATE TABLE categories (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  name text NOT NULL,
  slug text UNIQUE NOT NULL,
  image_url text,
  description text,
  display_order integer DEFAULT 0,
  is_active boolean DEFAULT true,
  product_count integer DEFAULT 0,
  created_at timestamp DEFAULT now(),
  updated_at timestamp DEFAULT now()
);

-- Add category relationship to products
ALTER TABLE products 
ADD COLUMN category_id uuid REFERENCES categories(id),
ADD COLUMN subcategory text;

-- Create index for performance
CREATE INDEX idx_products_category ON products(category_id);
Admin Dashboard Features:
1. Category Management Page:
javascript// /admin/categories page
const CategoryManager = () => {
  // Features needed:
  // - List all categories with drag-and-drop reordering
  // - Edit category name, slug, image
  // - Upload category images to Cloudinary
  // - Show live product count per category
  // - Toggle active/inactive status
  // - Delete category (with confirmation)
  
  return (
    <div className="space-y-6">
      <div className="flex justify-between items-center">
        <h2 className="text-2xl font-bold">Category Management</h2>
        <button onClick={openAddModal} className="bg-blue-600 text-white px-4 py-2 rounded">
          Add Category
        </button>
      </div>
      
      <DragDropContext onDragEnd={handleReorder}>
        <Droppable droppableId="categories">
          {(provided) => (
            <div {...provided.droppableProps} ref={provided.innerRef}>
              {categories.map((category, index) => (
                <Draggable key={category.id} draggableId={category.id} index={index}>
                  {(provided) => (
                    <CategoryCard 
                      category={category}
                      onEdit={handleEdit}
                      onDelete={handleDelete}
                      provided={provided}
                    />
                  )}
                </Draggable>
              ))}
              {provided.placeholder}
            </div>
          )}
        </Droppable>
      </DragDropContext>
    </div>
  );
};
2. Category Edit Modal:
javascriptconst CategoryEditModal = ({ category, onSave }) => {
  return (
    <Modal>
      <form onSubmit={handleSubmit}>
        {/* Category Name */}
        <input 
          name="name" 
          value={formData.name}
          onChange={updateSlug} // Auto-generate slug
          placeholder="Category Name"
        />
        
        {/* Slug (auto-generated but editable) */}
        <input 
          name="slug" 
          value={formData.slug}
          placeholder="category-slug"
        />
        
        {/* Image Upload */}
        <ImageUploader
          currentImage={formData.image_url}
          onUpload={handleImageUpload}
          folder="categories"
        />
        
        {/* Description */}
        <textarea 
          name="description"
          placeholder="Category description (optional)"
        />
        
        {/* Active Status */}
        <label>
          <input type="checkbox" checked={formData.is_active} />
          Active (show on homepage)
        </label>
        
        <button type="submit">Save Category</button>
      </form>
    </Modal>
  );
};
3. API Endpoints:
javascript// Get all categories with product count
app.get('/api/admin/categories', requireAdmin, async (req, res) => {
  const categories = await db
    .select({
      ...categories,
      productCount: sql`count(products.id)`.as('productCount')
    })
    .from(categories)
    .leftJoin(products, eq(categories.id, products.categoryId))
    .groupBy(categories.id)
    .orderBy(categories.displayOrder);
    
  res.json(categories);
});

// Update category
app.put('/api/admin/categories/:id', requireAdmin, upload.single('image'), async (req, res) => {
  const { name, slug, description, is_active, display_order } = req.body;
  
  // Handle image upload to Cloudinary
  let image_url = req.body.existing_image_url;
  if (req.file) {
    const result = await cloudinary.uploader.upload(req.file.path, {
      folder: 'categories',
      transformation: [{ width: 800, height: 600, crop: 'fill' }]
    });
    image_url = result.secure_url;
    
    // Delete old image if exists
    if (req.body.old_image_url) {
      await deleteFromCloudinary(req.body.old_image_url);
    }
  }
  
  await storage.updateCategory(req.params.id, {
    name, slug, description, is_active, display_order, image_url
  });
  
  // Invalidate caches
  invalidateCategoryCache();
  
  res.json({ success: true });
});

// Reorder categories
app.post('/api/admin/categories/reorder', requireAdmin, async (req, res) => {
  const { categoryOrder } = req.body; // Array of category IDs in new order
  
  await storage.reorderCategories(categoryOrder);
  invalidateCategoryCache();
  
  res.json({ success: true });
});
4. Homepage Category Display:
javascript// Homepage component
const CategoryGrid = () => {
  const { data: categories } = useQuery({
    queryKey: ['categories', 'active'],
    queryFn: () => fetch('/api/categories?active=true').then(r => r.json()),
    staleTime: 0 // Always fresh
  });
  
  return (
    <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6">
      {categories?.map(category => (
        <Link 
          key={category.id}
          href={`/products?category=${category.slug}`}
          className="group relative overflow-hidden rounded-lg"
        >
          <div className="aspect-square relative">
            <img 
              src={category.image_url || '/placeholder-category.jpg'} 
              alt={category.name}
              className="w-full h-full object-cover group-hover:scale-105 transition-transform"
            />
            <div className="absolute inset-0 bg-gradient-to-t from-black/60 to-transparent" />
            <div className="absolute bottom-0 left-0 right-0 p-4">
              <h3 className="text-white font-semibold text-lg">{category.name}</h3>
              <p className="text-white/80 text-sm">{category.productCount} items</p>
            </div>
          </div>
        </Link>
      ))}
    </div>
  );
};
5. Products Page Filter Integration:
javascript// Products page - auto-apply category filter from URL
const ProductsPage = () => {
  const searchParams = useSearchParams();
  const categorySlug = searchParams.get('category');
  
  const [filters, setFilters] = useState({
    category: categorySlug || 'all',
    // other filters...
  });
  
  // Fetch products with category filter
  const { data: products } = useQuery({
    queryKey: ['products', filters],
    queryFn: () => fetch(`/api/products?${new URLSearchParams(filters)}`).then(r => r.json()),
    staleTime: 0
  });
  
  return (
    <div>
      {/* Show active category in UI */}
      {categorySlug && (
        <div className="mb-4">
          <span className="text-sm text-gray-600">Viewing:</span>
          <h1 className="text-2xl font-bold">{getCategoryName(categorySlug)}</h1>
        </div>
      )}
      {/* Rest of products display */}
    </div>
  );
};
6. Real-time Synchronization:
javascript// Global category update system
export const categoryEvents = new EventTarget();

// After any category update in admin
const updateCategory = async (categoryId, updates) => {
  const response = await fetch(`/api/admin/categories/${categoryId}`, {
    method: 'PUT',
    body: formData
  });
  
  if (response.ok) {
    // Broadcast update
    categoryEvents.dispatchEvent(
      new CustomEvent('categoryUpdated', { 
        detail: { categoryId, updates } 
      })
    );
    
    // Invalidate all category queries
    queryClient.invalidateQueries(['categories']);
    queryClient.invalidateQueries(['products']); // Products may have category changes
  }
};

// Listen in all components showing categories
useEffect(() => {
  const handleCategoryUpdate = () => {
    refetch(); // Refetch categories
  };
  
  categoryEvents.addEventListener('categoryUpdated', handleCategoryUpdate);
  return () => categoryEvents.removeEventListener('categoryUpdated', handleCategoryUpdate);
}, []);
7. Additional Essential Features:

SEO-friendly URLs: Auto-generate slugs from category names
Category stats: Show views, clicks, conversion rates
Bulk actions: Activate/deactivate multiple categories
Category hierarchy: Support for subcategories if needed
Import/Export: CSV upload for bulk category creation
Search: Quick search within category manager
Image optimization: Auto-resize and compress category images
Fallback images: Default image if category image fails

Testing Checklist:

 Create new category → Appears on homepage immediately
 Edit category name → Updates everywhere instantly
 Change category image → Reflects on homepage without refresh
 Reorder categories → Homepage order updates immediately
 Click category on homepage → Products page shows filtered results
 Delete category → Removed from homepage, products updated
 Toggle active status → Show/hide from homepage instantly

Make sure category management is as seamless as product management with perfect synchronization!