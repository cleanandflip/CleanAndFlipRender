Fix the Fetch Method Error
The error shows that the URL /api/addresses is being passed as the HTTP method instead of GET, POST, etc. This is a parameter ordering issue in the API request function.
1. Check the apiRequest Function Parameters
In src/lib/queryClient.ts, the function signature should be:
typescriptasync function apiRequest(
  url: string,
  method: string = 'GET',
  data?: unknown
): Promise<Response> {
  const res = await fetch(url, {
    method,
    headers: data ? { "Content-Type": "application/json" } : {},
    credentials: 'include',
    body: data ? JSON.stringify(data) : undefined,
  });
  
  if (!res.ok) {
    throw new Error(`API request failed: ${res.statusText}`);
  }
  
  return res;
}
2. Fix the Call in dashboard.tsx
Find the mutation in src/pages/dashboard.tsx around line 48 and fix the parameter order:
typescript// WRONG - URL passed as method
mutationFn: () => apiRequest('/api/addresses', data)

// CORRECT - Method, then URL
mutationFn: () => apiRequest('/api/addresses', 'POST', data)

// OR if it's a GET request
queryFn: () => apiRequest('/api/addresses', 'GET')
3. Update All API Calls
Search for all uses of apiRequest and ensure they follow the correct pattern:
typescript// For GET requests
apiRequest('/api/addresses', 'GET')

// For POST requests
apiRequest('/api/addresses', 'POST', addressData)

// For DELETE requests
apiRequest(`/api/addresses/${id}`, 'DELETE')

// For PUT requests
apiRequest(`/api/addresses/${id}`, 'PUT', updateData)
4. Alternative Fix - Use a More Explicit API
Create clearer API functions:
typescript// src/lib/api.ts
export const api = {
  get: (url: string) => 
    fetch(url, { 
      method: 'GET', 
      credentials: 'include' 
    }),
    
  post: (url: string, data: any) => 
    fetch(url, { 
      method: 'POST', 
      credentials: 'include',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(data)
    }),
    
  delete: (url: string) => 
    fetch(url, { 
      method: 'DELETE', 
      credentials: 'include' 
    }),
    
  put: (url: string, data: any) => 
    fetch(url, { 
      method: 'PUT', 
      credentials: 'include',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(data)
    })
};
Then use it like:
typescript// In dashboard.tsx
const { data: addresses } = useQuery({
  queryKey: ['addresses'],
  queryFn: async () => {
    const res = await api.get('/api/addresses');
    if (!res.ok) throw new Error('Failed to fetch addresses');
    return res.json();
  }
});
5. Quick Fix for dashboard.tsx
Update the addresses query in dashboard.tsx:
typescript// Find this section and update it
const { data: addresses, isLoading } = useQuery({
  queryKey: ['addresses'],
  queryFn: async () => {
    // Direct fetch instead of apiRequest
    const res = await fetch('/api/addresses', {
      method: 'GET',
      credentials: 'include'
    });
    if (!res.ok) throw new Error('Failed to fetch addresses');
    return res.json();
  }
});
The issue is a simple parameter mismatch - the URL is being passed where the HTTP method should be. Fix the parameter order in all apiRequest calls throughout the application.