Comprehensive Instructions for Equipment Submission System with Reference Tracking
1. Database Schema Updates
ts
// shared/schema.ts - Update equipment_submissions table

export const equipmentSubmissions = pgTable('equipment_submissions', {
  id: uuid('id').primaryKey().defaultRandom(),
  
  // ADD REFERENCE NUMBER - This is the key tracking identifier
  referenceNumber: text('reference_number').notNull().unique(), // Format: REF-YYYYMMDD-XXXX
  
  userId: uuid('user_id').references(() => users.id),
  
  // Equipment details
  equipmentName: text('equipment_name').notNull(),
  brand: text('brand').notNull(),
  condition: text('condition').notNull(),
  weight: text('weight'),
  askingPrice: text('asking_price'),
  description: text('description'),
  
  // Contact & Location
  phoneNumber: text('phone_number').notNull(),
  email: text('email').notNull(),
  userCity: text('user_city'),
  userState: text('user_state'),
  userZipCode: text('user_zip_code'),
  isLocal: boolean('is_local').default(false),
  distance: text('distance'),
  
  // Status Management
  status: text('status').default('pending'), // pending, under_review, accepted, declined, scheduled, completed, cancelled
  statusHistory: jsonb('status_history').$type<StatusHistoryEntry[]>().default([]),
  
  // Admin fields
  adminNotes: text('admin_notes'),
  internalNotes: text('internal_notes'), // Not visible to users
  offerAmount: text('offer_amount'),
  declineReason: text('decline_reason'),
  
  // Scheduling
  scheduledPickupDate: timestamp('scheduled_pickup_date'),
  pickupWindowStart: text('pickup_window_start'), // e.g., "9:00 AM"
  pickupWindowEnd: text('pickup_window_end'), // e.g., "12:00 PM"
  
  // Images
  images: jsonb('images').$type<string[]>().default([]),
  
  // Tracking
  viewedByAdmin: boolean('viewed_by_admin').default(false),
  lastViewedAt: timestamp('last_viewed_at'),
  assignedTo: uuid('assigned_to').references(() => users.id), // Admin who's handling this
  
  // Timestamps
  createdAt: timestamp('created_at').defaultNow(),
  updatedAt: timestamp('updated_at').defaultNow(),
  reviewedAt: timestamp('reviewed_at'),
  completedAt: timestamp('completed_at')
});

// Add indexes for performance
export const submissionIndexes = {
  referenceIdx: index('idx_reference_number').on(equipmentSubmissions.referenceNumber),
  statusIdx: index('idx_status').on(equipmentSubmissions.status),
  userIdx: index('idx_user_id').on(equipmentSubmissions.userId),
  createdIdx: index('idx_created_at').on(equipmentSubmissions.createdAt)
};

// Type for status history tracking
type StatusHistoryEntry = {
  status: string;
  timestamp: string;
  changedBy: string;
  notes?: string;
};
2. Reference Number Generation System
ts
// server/utils/referenceGenerator.ts

export function generateReferenceNumber(): string {
  const date = new Date();
  const year = date.getFullYear();
  const month = String(date.getMonth() + 1).padStart(2, '0');
  const day = String(date.getDate()).padStart(2, '0');
  
  // Generate random 4-digit number
  const random = Math.floor(1000 + Math.random() * 9000);
  
  return `REF-${year}${month}${day}-${random}`;
}

// Ensure uniqueness
export async function generateUniqueReference(db: Database): Promise<string> {
  let reference: string;
  let isUnique = false;
  
  while (!isUnique) {
    reference = generateReferenceNumber();
    const existing = await db.select()
      .from(equipmentSubmissions)
      .where(eq(equipmentSubmissions.referenceNumber, reference))
      .limit(1);
    
    isUnique = existing.length === 0;
  }
  
  return reference!;
}
3. Updated Submission Success Page
tsx
// client/src/pages/SubmissionSuccess.tsx

import { useEffect, useState } from 'react';
import { useSearchParams, Link } from 'wouter';
import { Card } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { CheckCircle, Clock, DollarSign, Truck, Copy, ExternalLink } from 'lucide-react';
import { toast } from '@/hooks/use-toast';

export function SubmissionSuccess() {
  const [searchParams] = useSearchParams();
  const referenceNumber = searchParams.get('ref');
  const [copied, setCopied] = useState(false);
  
  // Scroll to top on mount
  useEffect(() => {
    window.scrollTo(0, 0);
  }, []);
  
  const copyReference = () => {
    navigator.clipboard.writeText(referenceNumber || '');
    setCopied(true);
    toast({
      title: "Reference number copied!",
      description: "You can use this to track your submission.",
    });
    setTimeout(() => setCopied(false), 2000);
  };
  
  if (!referenceNumber) {
    return <div>Error: No reference number found</div>;
  }
  
  return (
    <div className="min-h-screen bg-gradient-to-b from-gray-900 to-black py-12 px-4">
      <div className="max-w-2xl mx-auto">
        {/* Success Icon */}
        <div className="flex justify-center mb-8">
          <div className="bg-green-500/20 p-8 rounded-full">
            <CheckCircle className="w-16 h-16 text-green-500" />
          </div>
        </div>
        
        {/* Main Card */}
        <Card className="p-8 bg-gray-800/50 backdrop-blur-sm border-gray-700">
          <h1 className="text-3xl font-bold text-center mb-6">
            Submission Received!
          </h1>
          
          {/* Reference Number */}
          <div className="bg-gray-900/50 rounded-lg p-6 mb-6">
            <p className="text-gray-400 text-sm mb-2">Your Reference Number</p>
            <div className="flex items-center justify-between">
              <code className="text-2xl font-mono text-blue-400">
                {referenceNumber}
              </code>
              <Button
                variant="ghost"
                size="icon"
                onClick={copyReference}
                className="hover:bg-gray-700"
              >
                <Copy className={`w-5 h-5 ${copied ? 'text-green-500' : ''}`} />
              </Button>
            </div>
            <p className="text-xs text-gray-500 mt-2">
              Save this number to track your submission
            </p>
          </div>
          
          <p className="text-gray-300 text-center mb-8">
            Thank you for choosing Clean & Flip. We've received your equipment 
            submission and our team will review it within 48 hours.
          </p>
          
          {/* What's Next */}
          <div className="space-y-4 mb-8">
            <h2 className="text-xl font-semibold mb-4">What happens next?</h2>
            
            <div className="flex items-start gap-4">
              <Clock className="w-5 h-5 text-blue-400 mt-1" />
              <div>
                <h3 className="font-medium">Quick Review</h3>
                <p className="text-sm text-gray-400">
                  We'll review your submission within 48 hours
                </p>
              </div>
            </div>
            
            <div className="flex items-start gap-4">
              <DollarSign className="w-5 h-5 text-green-400 mt-1" />
              <div>
                <h3 className="font-medium">Fair Offer</h3>
                <p className="text-sm text-gray-400">
                  We'll send you a competitive offer via email
                </p>
              </div>
            </div>
            
            <div className="flex items-start gap-4">
              <Truck className="w-5 h-5 text-purple-400 mt-1" />
              <div>
                <h3 className="font-medium">Free Pickup</h3>
                <p className="text-sm text-gray-400">
                  Once accepted, we'll schedule a convenient pickup time
                </p>
              </div>
            </div>
          </div>
          
          {/* Action Buttons */}
          <div className="flex flex-col sm:flex-row gap-4">
            <Link href={`/track-submission?ref=${referenceNumber}`} className="flex-1">
              <Button className="w-full" variant="default">
                <ExternalLink className="w-4 h-4 mr-2" />
                Track Your Submission
              </Button>
            </Link>
            
            <Link href="/sell-to-us" className="flex-1">
              <Button className="w-full" variant="outline">
                Submit Another Item
              </Button>
            </Link>
          </div>
          
          <p className="text-center text-sm text-gray-400 mt-6">
            Check your email for a confirmation and tracking link.
          </p>
        </Card>
      </div>
    </div>
  );
}
4. Submission Tracking Page
tsx
// client/src/pages/TrackSubmission.tsx

import { useState } from 'react';
import { useSearchParams } from 'wouter';
import { Card } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { useQuery } from '@tanstack/react-query';
import { 
  Package, 
  Clock, 
  CheckCircle, 
  XCircle, 
  Calendar,
  DollarSign,
  MessageSquare 
} from 'lucide-react';

export function TrackSubmission() {
  const [searchParams] = useSearchParams();
  const [referenceInput, setReferenceInput] = useState(searchParams.get('ref') || '');
  const [searchRef, setSearchRef] = useState(searchParams.get('ref') || '');
  
  const { data: submission, isLoading, error } = useQuery({
    queryKey: ['track-submission', searchRef],
    queryFn: async () => {
      if (!searchRef) return null;
      const res = await fetch(`/api/submissions/track/${searchRef}`);
      if (!res.ok) throw new Error('Submission not found');
      return res.json();
    },
    enabled: !!searchRef
  });
  
  const statusConfig = {
    pending: { 
      label: 'Pending Review', 
      color: 'yellow', 
      icon: Clock,
      description: 'Your submission is waiting to be reviewed by our team.'
    },
    under_review: { 
      label: 'Under Review', 
      color: 'blue', 
      icon: Package,
      description: 'Our team is currently evaluating your equipment.'
    },
    accepted: { 
      label: 'Offer Made', 
      color: 'green', 
      icon: CheckCircle,
      description: 'We\'ve made an offer! Check your email for details.'
    },
    declined: { 
      label: 'Declined', 
      color: 'red', 
      icon: XCircle,
      description: 'Unfortunately, we cannot accept this item at this time.'
    },
    scheduled: { 
      label: 'Pickup Scheduled', 
      color: 'purple', 
      icon: Calendar,
      description: 'Pickup has been scheduled. We\'ll see you soon!'
    },
    completed: { 
      label: 'Completed', 
      color: 'gray', 
      icon: CheckCircle,
      description: 'This submission has been completed. Thank you!'
    }
  };
  
  const handleSearch = (e: React.FormEvent) => {
    e.preventDefault();
    setSearchRef(referenceInput.toUpperCase());
  };
  
  return (
    <div className="min-h-screen bg-gradient-to-b from-gray-900 to-black py-12 px-4">
      <div className="max-w-4xl mx-auto">
        <h1 className="text-3xl font-bold text-center mb-8">
          Track Your Submission
        </h1>
        
        {/* Search Bar */}
        <Card className="p-6 mb-8 bg-gray-800/50 backdrop-blur-sm border-gray-700">
          <form onSubmit={handleSearch} className="flex gap-4">
            <Input
              type="text"
              placeholder="Enter your reference number (e.g., REF-20250731-1234)"
              value={referenceInput}
              onChange={(e) => setReferenceInput(e.target.value)}
              className="flex-1"
            />
            <Button type="submit">
              Track
            </Button>
          </form>
        </Card>
        
        {/* Results */}
        {isLoading && (
          <Card className="p-8 text-center">
            <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500 mx-auto"></div>
            <p className="mt-4 text-gray-400">Loading submission details...</p>
          </Card>
        )}
        
        {error && (
          <Card className="p-8 text-center bg-red-900/20 border-red-700">
            <XCircle className="w-12 h-12 text-red-500 mx-auto mb-4" />
            <p className="text-red-400">
              No submission found with reference: {searchRef}
            </p>
          </Card>
        )}
        
        {submission && (
          <>
            {/* Status Card */}
            <Card className="p-6 mb-6 bg-gray-800/50 backdrop-blur-sm border-gray-700">
              <div className="flex items-center justify-between mb-4">
                <div>
                  <p className="text-sm text-gray-400">Reference Number</p>
                  <p className="text-xl font-mono">{submission.referenceNumber}</p>
                </div>
                <Badge variant={statusConfig[submission.status].color}>
                  {statusConfig[submission.status].label}
                </Badge>
              </div>
              
              <div className="flex items-start gap-4 p-4 bg-gray-900/50 rounded-lg">
                {React.createElement(statusConfig[submission.status].icon, {
                  className: `w-6 h-6 text-${statusConfig[submission.status].color}-500`
                })}
                <p className="text-gray-300">
                  {statusConfig[submission.status].description}
                </p>
              </div>
            </Card>
            
            {/* Submission Details */}
            <Card className="p-6 mb-6 bg-gray-800/50 backdrop-blur-sm border-gray-700">
              <h2 className="text-xl font-semibold mb-4">Submission Details</h2>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <p className="text-sm text-gray-400">Equipment</p>
                  <p className="font-medium">{submission.equipmentName}</p>
                </div>
                <div>
                  <p className="text-sm text-gray-400">Brand</p>
                  <p className="font-medium">{submission.brand}</p>
                </div>
                <div>
                  <p className="text-sm text-gray-400">Condition</p>
                  <p className="font-medium capitalize">{submission.condition}</p>
                </div>
                <div>
                  <p className="text-sm text-gray-400">Submitted</p>
                  <p className="font-medium">
                    {new Date(submission.createdAt).toLocaleDateString()}
                  </p>
                </div>
              </div>
              
              {submission.askingPrice && (
                <div className="mt-4 p-4 bg-gray-900/50 rounded-lg">
                  <p className="text-sm text-gray-400">Your Asking Price</p>
                  <p className="text-2xl font-bold text-green-400">
                    ${submission.askingPrice}
                  </p>
                </div>
              )}
            </Card>
            
            {/* Offer Details (if accepted) */}
            {submission.status === 'accepted' && submission.offerAmount && (
              <Card className="p-6 mb-6 bg-green-900/20 border-green-700">
                <div className="flex items-center gap-4">
                  <DollarSign className="w-8 h-8 text-green-500" />
                  <div>
                    <h3 className="text-xl font-semibold">Our Offer</h3>
                    <p className="text-3xl font-bold text-green-400">
                      ${submission.offerAmount}
                    </p>
                    <p className="text-sm text-gray-400 mt-2">
                      Please check your email for acceptance instructions
                    </p>
                  </div>
                </div>
              </Card>
            )}
            
            {/* Pickup Details (if scheduled) */}
            {submission.status === 'scheduled' && submission.scheduledPickupDate && (
              <Card className="p-6 mb-6 bg-purple-900/20 border-purple-700">
                <div className="flex items-center gap-4">
                  <Calendar className="w-8 h-8 text-purple-500" />
                  <div>
                    <h3 className="text-xl font-semibold">Pickup Scheduled</h3>
                    <p className="text-lg">
                      {new Date(submission.scheduledPickupDate).toLocaleDateString()}
                    </p>
                    <p className="text-sm text-gray-400">
                      {submission.pickupWindowStart} - {submission.pickupWindowEnd}
                    </p>
                  </div>
                </div>
              </Card>
            )}
            
            {/* Timeline */}
            <Card className="p-6 bg-gray-800/50 backdrop-blur-sm border-gray-700">
              <h2 className="text-xl font-semibold mb-4">Timeline</h2>
              <div className="space-y-4">
                {submission.statusHistory?.map((entry, index) => (
                  <div key={index} className="flex gap-4">
                    <div className="w-2 h-2 bg-blue-500 rounded-full mt-2"></div>
                    <div className="flex-1">
                      <p className="font-medium">{entry.status}</p>
                      <p className="text-sm text-gray-400">
                        {new Date(entry.timestamp).toLocaleString()}
                      </p>
                      {entry.notes && (
                        <p className="text-sm text-gray-300 mt-1">{entry.notes}</p>
                      )}
                    </div>
                  </div>
                ))}
              </div>
            </Card>
          </>
        )}
      </div>
    </div>
  );
}
5. Admin Review Dashboard
tsx
// client/src/pages/admin/SubmissionReview.tsx

import { useState } from 'react';
import { useQuery, useMutation } from '@tanstack/react-query';
import { Card } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { Badge } from '@/components/ui/badge';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { 
  Search, 
  Filter, 
  CheckCircle, 
  XCircle, 
  Clock,
  Eye,
  MessageSquare,
  Calendar,
  DollarSign,
  Phone,
  MapPin
} from 'lucide-react';

export function SubmissionReview() {
  const [selectedSubmission, setSelectedSubmission] = useState(null);
  const [filters, setFilters] = useState({
    status: 'all',
    search: '',
    isLocal: null
  });
  
  const { data: submissions, refetch } = useQuery({
    queryKey: ['admin-submissions', filters],
    queryFn: async () => {
      const params = new URLSearchParams();
      if (filters.status !== 'all') params.append('status', filters.status);
      if (filters.search) params.append('search', filters.search);
      if (filters.isLocal !== null) params.append('isLocal', filters.isLocal.toString());
      
      const res = await fetch(`/api/admin/submissions?${params}`);
      return res.json();
    }
  });
  
  const updateSubmission = useMutation({
    mutationFn: async ({ id, updates, action }) => {
      const res = await fetch(`/api/admin/submissions/${id}/${action}`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(updates)
      });
      return res.json();
    },
    onSuccess: () => {
      refetch();
      toast({ title: "Submission updated successfully" });
    }
  });
  
  const statusTabs = [
    { value: 'all', label: 'All', count: submissions?.total || 0 },
    { value: 'pending', label: 'Pending', count: submissions?.pending || 0 },
    { value: 'under_review', label: 'Under Review', count: submissions?.underReview || 0 },
    { value: 'accepted', label: 'Accepted', count: submissions?.accepted || 0 },
    { value: 'scheduled', label: 'Scheduled', count: submissions?.scheduled || 0 }
  ];
  
  const handleQuickAction = async (submission, action) => {
    if (action === 'review') {
      await updateSubmission.mutateAsync({
        id: submission.id,
        action: 'status',
        updates: { status: 'under_review' }
      });
    }
  };
  
  return (
    <div className="p-6">
      <div className="flex justify-between items-center mb-6">
        <h1 className="text-2xl font-bold">Equipment Submissions</h1>
        <div className="flex gap-4">
          <div className="relative">
            <Search className="absolute left-3 top-1/2 -translate-y-1/2 w-4 h-4 text-gray-400" />
            <Input
              placeholder="Search by ref# or name..."
              value={filters.search}
              onChange={(e) => setFilters({ ...filters, search: e.target.value })}
              className="pl-10 w-64"
            />
          </div>
          <Button variant="outline">
            <Filter className="w-4 h-4 mr-2" />
            Filters
          </Button>
        </div>
      </div>
      
      {/* Status Tabs */}
      <Tabs value={filters.status} onValueChange={(v) => setFilters({ ...filters, status: v })}>
        <TabsList className="mb-6">
          {statusTabs.map(tab => (
            <TabsTrigger key={tab.value} value={tab.value}>
              {tab.label}
              <Badge variant="secondary" className="ml-2">
                {tab.count}
              </Badge>
            </TabsTrigger>
          ))}
        </TabsList>
        
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
          {/* Submissions List */}
          <div className="lg:col-span-2 space-y-4">
            {submissions?.data?.map((submission) => (
              <Card 
                key={submission.id}
                className={`p-4 cursor-pointer transition-all ${
                  selectedSubmission?.id === submission.id 
                    ? 'ring-2 ring-blue-500' 
                    : 'hover:bg-gray-800/50'
                }`}
                onClick={() => setSelectedSubmission(submission)}
              >
                <div className="flex justify-between items-start mb-3">
                  <div>
                    <div className="flex items-center gap-2">
                      <h3 className="font-semibold text-lg">
                        {submission.equipmentName}
                      </h3>
                      {!submission.viewedByAdmin && (
                        <Badge variant="secondary" className="text-xs">
                          New
                        </Badge>
                      )}
                    </div>
                    <p className="text-sm text-gray-400 font-mono">
                      {submission.referenceNumber}
                    </p>
                  </div>
                  <Badge variant={getStatusVariant(submission.status)}>
                    {formatStatus(submission.status)}
                  </Badge>
                </div>
                
                <div className="grid grid-cols-2 gap-2 text-sm">
                  <div className="flex items-center gap-2 text-gray-400">
                    <DollarSign className="w-4 h-4" />
                    Asking: ${submission.askingPrice || 'Open'}
                  </div>
                  <div className="flex items-center gap-2 text-gray-400">
                    <Clock className="w-4 h-4" />
                    {getTimeAgo(submission.createdAt)}
                  </div>
                  {submission.isLocal && (
                    <div className="flex items-center gap-2 text-green-400">
                      <MapPin className="w-4 h-4" />
                      Local ({submission.distance} mi)
                    </div>
                  )}
                  <div className="flex items-center gap-2 text-gray-400">
                    <Phone className="w-4 h-4" />
                    {submission.phoneNumber}
                  </div>
                </div>
                
                {submission.status === 'pending' && (
                  <div className="mt-3 flex gap-2">
                    <Button
                      size="sm"
                      variant="outline"
                      onClick={(e) => {
                        e.stopPropagation();
                        handleQuickAction(submission, 'review');
                      }}
                    >
                      <Eye className="w-4 h-4 mr-1" />
                      Start Review
                    </Button>
                  </div>
                )}
              </Card>
            ))}
          </div>
          
          {/* Detail Panel */}
          {selectedSubmission && (
            <SubmissionDetailPanel
              submission={selectedSubmission}
              onUpdate={(updates) => {
                updateSubmission.mutate({
                  id: selectedSubmission.id,
                  updates
                });
              }}
              onClose={() => setSelectedSubmission(null)}
            />
          )}
        </div>
      </Tabs>
    </div>
  );
}

// Separate component for the detail panel
function SubmissionDetailPanel({ submission, onUpdate, onClose }) {
  const [offerAmount, setOfferAmount] = useState('');
  const [adminNotes, setAdminNotes] = useState('');
  const [declineReason, setDeclineReason] = useState('');
  const [pickupDate, setPickupDate] = useState('');
  const [pickupTime, setPickupTime] = useState('');
  
  const handleAccept = () => {
    onUpdate({
      action: 'accept',
      updates: {
        status: 'accepted',
        offerAmount,
        adminNotes
      }
    });
  };
  
  const handleDecline = () => {
    onUpdate({
      action: 'decline',
      updates: {
        status: 'declined',
        declineReason,
        adminNotes
      }
    });
  };
  
  const handleSchedule = () => {
    onUpdate({
      action: 'schedule',
      updates: {
        status: 'scheduled',
        scheduledPickupDate: pickupDate,
        pickupWindowStart: pickupTime.split('-')[0],
        pickupWindowEnd: pickupTime.split('-')[1]
      }
    });
  };
  
  return (
    <Card className="p-6 h-fit sticky top-6">
      <div className="flex justify-between items-start mb-4">
        <h2 className="text-xl font-semibold">Submission Details</h2>
        <Button
          size="icon"
          variant="ghost"
          onClick={onClose}
        >
          <X className="w-4 h-4" />
        </Button>
      </div>
      
      {/* Reference Info */}
      <div className="bg-gray-900/50 rounded-lg p-4 mb-4">
        <p className="text-sm text-gray-400">Reference Number</p>
        <p className="font-mono text-lg">{submission.referenceNumber}</p>
      </div>
      
      {/* Images */}
      {submission.images?.length > 0 && (
        <div className="grid grid-cols-2 gap-2 mb-4">
          {submission.images.map((img, idx) => (
            <img 
              key={idx}
              src={img} 
              alt={`Equipment ${idx + 1}`}
              className="rounded-lg w-full h-32 object-cover cursor-pointer hover:opacity-80"
              onClick={() => window.open(img, '_blank')}
            />
          ))}
        </div>
      )}
      
      {/* Equipment Info */}
      <div className="space-y-3 mb-6">
        <div>
          <label className="text-sm text-gray-400">Equipment</label>
          <p className="font-medium">{submission.equipmentName}</p>
        </div>
        <div>
          <label className="text-sm text-gray-400">Brand</label>
          <p>{submission.brand}</p>
        </div>
        <div>
          <label className="text-sm text-gray-400">Condition</label>
          <p className="capitalize">{submission.condition}</p>
        </div>
        <div>
          <label className="text-sm text-gray-400">Weight</label>
          <p>{submission.weight || 'Not specified'} lbs</p>
        </div>
        <div>
          <label className="text-sm text-gray-400">Description</label>
          <p className="text-sm">{submission.description || 'No description provided'}</p>
        </div>
      </div>
      
      {/* Contact Info */}
      <div className="bg-gray-900/50 rounded-lg p-4 mb-6">
        <h3 className="font-medium mb-3">Contact Information</h3>
        <div className="space-y-2 text-sm">
          <p>{submission.userName}</p>
          <p>{submission.email}</p>
          <p>{submission.phoneNumber}</p>
          <p>{submission.userCity}, {submission.userState} {submission.userZipCode}</p>
        </div>
      </div>
      
      {/* Action Panel based on status */}
      {submission.status === 'pending' || submission.status === 'under_review' ? (
        <div className="space-y-4">
          <Tabs defaultValue="accept">
            <TabsList className="grid w-full grid-cols-2">
              <TabsTrigger value="accept">Accept</TabsTrigger>
              <TabsTrigger value="decline">Decline</TabsTrigger>
            </TabsList>
            
            <TabsContent value="accept" className="space-y-4">
              <div>
                <label className="text-sm text-gray-400">Offer Amount</label>
                <div className="relative">
                  <span className="absolute left-3 top-1/2 -translate-y-1/2">$</span>
                  <Input
                    type="number"
                    value={offerAmount}
                    onChange={(e) => setOfferAmount(e.target.value)}
                    placeholder="Enter offer amount"
                    className="pl-8"
                  />
                </div>
              </div>
              <div>
                <label className="text-sm text-gray-400">Notes (visible to user)</label>
                <Textarea
                  value={adminNotes}
                  onChange={(e) => setAdminNotes(e.target.value)}
                  placeholder="Add any notes for the user..."
                />
              </div>
              <Button 
                onClick={handleAccept} 
                className="w-full"
                disabled={!offerAmount}
              >
                <CheckCircle className="w-4 h-4 mr-2" />
                Send Offer
              </Button>
            </TabsContent>
            
            <TabsContent value="decline" className="space-y-4">
              <div>
                <label className="text-sm text-gray-400">Reason for Decline</label>
                <Textarea
                  value={declineReason}
                  onChange={(e) => setDeclineReason(e.target.value)}
                  placeholder="Explain why we cannot accept this item..."
                  rows={4}
                />
              </div>
              <Button 
                onClick={handleDecline} 
                variant="destructive" 
                className="w-full"
                disabled={!declineReason}
              >
                <XCircle className="w-4 h-4 mr-2" />
                Decline Submission
              </Button>
            </TabsContent>
          </Tabs>
        </div>
      ) : submission.status === 'accepted' ? (
        <div className="space-y-4">
          <div className="bg-green-900/20 border border-green-700 rounded-lg p-4">
            <p className="text-green-400">Offer sent: ${submission.offerAmount}</p>
          </div>
          <div>
            <label className="text-sm text-gray-400">Schedule Pickup</label>
            <Input
              type="date"
              value={pickupDate}
              onChange={(e) => setPickupDate(e.target.value)}
              min={new Date().toISOString().split('T')[0]}
            />
            <select 
              className="mt-2 w-full p-2 bg-gray-800 border border-gray-700 rounded-md"
              value={pickupTime}
              onChange={(e) => setPickupTime(e.target.value)}
            >
              <option value="">Select time window</option>
              <option value="9:00 AM-12:00 PM">Morning (9:00 AM - 12:00 PM)</option>
              <option value="12:00 PM-3:00 PM">Afternoon (12:00 PM - 3:00 PM)</option>
              <option value="3:00 PM-6:00 PM">Evening (3:00 PM - 6:00 PM)</option>
            </select>
          </div>
          <Button 
            onClick={handleSchedule}
            className="w-full"
            disabled={!pickupDate || !pickupTime}
          >
            <Calendar className="w-4 h-4 mr-2" />
            Schedule Pickup
          </Button>
        </div>
      ) : (
        <div className="text-center text-gray-400">
          <p>Status: {formatStatus(submission.status)}</p>
        </div>
      )}
    </Card>
  );
}
6. API Routes for the System
ts
// server/routes.ts - Add these comprehensive routes

import { generateUniqueReference } from './utils/referenceGenerator';
import { sendSubmissionEmail, sendOfferEmail } from './utils/emailService';

// Create submission with reference number
app.post('/api/equipment-submissions', requireAuth, async (req, res) => {
  try {
    const referenceNumber = await generateUniqueReference(db);
    const { askingPrice, weight, ...otherData } = req.body;
    
    // Get user details
    const user = await db.select()
      .from(users)
      .where(eq(users.id, req.session.userId))
      .limit(1);
    
    if (!user[0]) {
      return res.status(404).json({ error: 'User not found' });
    }
    
    // Calculate distance if coordinates available
    let isLocal = false;
    let distance = null;
    if (user[0].latitude && user[0].longitude) {
      distance = calculateDistance(
        user[0].latitude,
        user[0].longitude,
        ASHEVILLE_LAT,
        ASHEVILLE_LNG
      );
      isLocal = distance <= 50; // 50 mile radius
    }
    
    const submission = await db.insert(equipmentSubmissions).values({
      referenceNumber,
      userId: req.session.userId,
      equipmentName: otherData.equipmentName,
      brand: otherData.brand,
      condition: otherData.condition,
      weight: weight ? String(weight) : null,
      askingPrice: askingPrice ? String(askingPrice) : null,
      description: otherData.description,
      phoneNumber: otherData.phoneNumber || user[0].phone,
      email: user[0].email,
      userCity: user[0].city,
      userState: user[0].state,
      userZipCode: user[0].zipCode,
      isLocal,
      distance: distance ? distance.toFixed(1) : null,
      images: otherData.images || [],
      statusHistory: [{
        status: 'pending',
        timestamp: new Date().toISOString(),
        changedBy: 'system',
        notes: 'Submission created'
      }]
    }).returning();
    
    // Send confirmation email
    await sendSubmissionEmail(user[0].email, submission[0]);
    
    res.json({ 
      success: true, 
      referenceNumber,
      submissionId: submission[0].id 
    });
  } catch (error) {
    console.error('Error creating submission:', error);
    res.status(500).json({ error: 'Failed to create submission' });
  }
});

// Track submission by reference number
app.get('/api/submissions/track/:reference', async (req, res) => {
  try {
    const { reference } = req.params;
    
    const submission = await db.select({
      referenceNumber: equipmentSubmissions.referenceNumber,
      equipmentName: equipmentSubmissions.equipmentName,
      brand: equipmentSubmissions.brand,
      condition: equipmentSubmissions.condition,
      askingPrice: equipmentSubmissions.askingPrice,
      status: equipmentSubmissions.status,
      statusHistory: equipmentSubmissions.statusHistory,
      offerAmount: equipmentSubmissions.offerAmount,
      scheduledPickupDate: equipmentSubmissions.scheduledPickupDate,
      pickupWindowStart: equipmentSubmissions.pickupWindowStart,
      pickupWindowEnd: equipmentSubmissions.pickupWindowEnd,
      createdAt: equipmentSubmissions.createdAt,
      reviewedAt: equipmentSubmissions.reviewedAt
    })
    .from(equipmentSubmissions)
    .where(eq(equipmentSubmissions.referenceNumber, reference.toUpperCase()))
    .limit(1);
    
    if (!submission[0]) {
      return res.status(404).json({ error: 'Submission not found' });
    }
    
    res.json(submission[0]);
  } catch (error) {
    console.error('Error tracking submission:', error);
    res.status(500).json({ error: 'Failed to track submission' });
  }
});

// Admin: Get all submissions with filters
app.get('/api/admin/submissions', requireAdmin, async (req, res) => {
  try {
    const { status, search, isLocal, page = 1, limit = 20 } = req.query;
    
    let query = db.select({
      submission: equipmentSubmissions,
      user: {
        name: users.name,
        email: users.email
      }
    })
    .from(equipmentSubmissions)
    .leftJoin(users, eq(equipmentSubmissions.userId, users.id));
    
    // Apply filters
    const conditions = [];
    if (status && status !== 'all') {
      conditions.push(eq(equipmentSubmissions.status, status));
    }
    if (search) {
      conditions.push(
        or(
          ilike(equipmentSubmissions.referenceNumber, `%${search}%`),
          ilike(equipmentSubmissions.equipmentName, `%${search}%`)
        )
      );
    }
    if (isLocal !== null) {
      conditions.push(eq(equipmentSubmissions.isLocal, isLocal === 'true'));
    }
    
    if (conditions.length > 0) {
      query = query.where(and(...conditions));
    }
    
    // Get counts for each status
    const statusCounts = await db.select({
      status: equipmentSubmissions.status,
      count: count()
    })
    .from(equipmentSubmissions)
    .groupBy(equipmentSubmissions.status);
    
    const submissions = await query
      .orderBy(desc(equipmentSubmissions.createdAt))
      .limit(Number(limit))
      .offset((Number(page) - 1) * Number(limit));
    
    // Mark as viewed
    const unviewedIds = submissions
      .filter(s => !s.submission.viewedByAdmin)
      .map(s => s.submission.id);
    
    if (unviewedIds.length > 0) {
      await db.update(equipmentSubmissions)
        .set({ 
          viewedByAdmin: true,
          lastViewedAt: new Date()
        })
        .where(inArray(equipmentSubmissions.id, unviewedIds));
    }
    
    res.json({
      data: submissions.map(s => ({
        ...s.submission,
        userName: s.user?.name,
        userEmail: s.user?.email
      })),
      total: submissions.length,
      ...Object.fromEntries(
        statusCounts.map(s => [s.status, s.count])
      )
    });
  } catch (error) {
    console.error('Error fetching admin submissions:', error);
    res.status(500).json({ error: 'Failed to fetch submissions' });
  }
});

// Admin: Update submission status
app.post('/api/admin/submissions/:id/:action', requireAdmin, async (req, res) => {
  try {
    const { id } = req.params;
    const { action } = req.params;
    const updates = req.body.updates;
    const adminUser = req.session.user;
    
    // Get current submission
    const [submission] = await db.select()
      .from(equipmentSubmissions)
      .where(eq(equipmentSubmissions.id, id))
      .limit(1);
    
    if (!submission) {
      return res.status(404).json({ error: 'Submission not found' });
    }
    
    // Update status history
    const newHistory = [
      ...(submission.statusHistory || []),
      {
        status: updates.status,
        timestamp: new Date().toISOString(),
        changedBy: adminUser.name,
        notes: updates.adminNotes
      }
    ];
    
    // Prepare update data
    const updateData = {
      ...updates,
      statusHistory: newHistory,
      updatedAt: new Date(),
      assignedTo: adminUser.id
    };
    
    if (action === 'accept') {
      updateData.reviewedAt = new Date();
    }
    
    // Update submission
    await db.update(equipmentSubmissions)
      .set(updateData)
      .where(eq(equipmentSubmissions.id, id));
    
    // Get user for notifications
    const [user] = await db.select()
      .from(users)
      .where(eq(users.id, submission.userId))
      .limit(1);
    
    // Send appropriate email
    if (action === 'accept' && user) {
      await sendOfferEmail(user.email, {
        ...submission,
        ...updateData
      });
    }
    
    res.json({ success: true });
  } catch (error) {
    console.error('Error updating submission:', error);
    res.status(500).json({ error: 'Failed to update submission' });
  }
});

// Add to user dashboard
app.get('/api/my-submissions', requireAuth, async (req, res) => {
  try {
    const submissions = await db.select()
      .from(equipmentSubmissions)
      .where(eq(equipmentSubmissions.userId, req.session.userId))
      .orderBy(desc(equipmentSubmissions.createdAt));
    
    res.json(submissions);
  } catch (error) {
    console.error('Error fetching user submissions:', error);
    res.status(500).json({ error: 'Failed to fetch submissions' });
  }
});
7. Email Service for Notifications
ts
// server/utils/emailService.ts

export async function sendSubmissionEmail(email: string, submission: any) {
  const trackingUrl = `${process.env.SITE_URL}/track-submission?ref=${submission.referenceNumber}`;
  
  const html = `
    <h1>Equipment Submission Received</h1>
    <p>Thank you for submitting your equipment to Clean & Flip!</p>
    
    <div style="background: #f3f4f6; padding: 20px; border-radius: 8px; margin: 20px 0;">
      <h2>Reference Number: ${submission.referenceNumber}</h2>
      <p>Equipment: ${submission.equipmentName}</p>
      <p>Brand: ${submission.brand}</p>
      <p>Condition: ${submission.condition}</p>
      ${submission.askingPrice ? `<p>Asking Price: $${submission.askingPrice}</p>` : ''}
    </div>
    
    <p>We'll review your submission within 48 hours.</p>
    
    <a href="${trackingUrl}" style="display: inline-block; background: #3b82f6; color: white; padding: 12px 24px; text-decoration: none; border-radius: 6px;">
      Track Your Submission
    </a>
  `;
  
  // Send email using your email service
  await sendEmail({
    to: email,
    subject: `Submission Received - ${submission.referenceNumber}`,
    html
  });
}

export async function sendOfferEmail(email: string, submission: any) {
  const html = `
    <h1>We've Made an Offer!</h1>
    <p>Good news! We've reviewed your equipment and would like to make an offer.</p>
    
    <div style="background: #10b981; color: white; padding: 20px; border-radius: 8px; margin: 20px 0; text-align: center;">
      <h2 style="margin: 0; font-size: 36px;">$${submission.offerAmount}</h2>
      <p style="margin: 10px 0 0 0;">Our offer for your ${submission.equipmentName}</p>
    </div>
    
    <p>To accept this offer, please reply to this email or call us at (828) 555-0123.</p>
    
    <a href="${process.env.SITE_URL}/track-submission?ref=${submission.referenceNumber}" style="display: inline-block; background: #3b82f6; color: white; padding: 12px 24px; text-decoration: none; border-radius: 6px;">
      View Submission Details
    </a>
  `;
  
  await sendEmail({
    to: email,
    subject: `Offer Made - ${submission.referenceNumber}`,
    html
  });
}
8. Update Navigation and Routes
tsx
// client/src/App.tsx - Add new routes

import { TrackSubmission } from './pages/TrackSubmission';
import { SubmissionSuccess } from './pages/SubmissionSuccess';
import { SubmissionReview } from './pages/admin/SubmissionReview';

// Add routes
<Route path="/submission-success" component={SubmissionSuccess} />
<Route path="/track-submission" component={TrackSubmission} />
<Route path="/admin/submissions" component={SubmissionReview} />

// Update SellToUs form to redirect on success
const handleSubmit = async (e) => {
  e.preventDefault();
  
  try {
    const response = await submitEquipment(formData);
    if (response.referenceNumber) {
      navigate(`/submission-success?ref=${response.referenceNumber}`);
    }
  } catch (error) {
    console.error('Submission error:', error);
  }
};

// Add tracking link to main navigation or footer
<Link href="/track-submission">Track Submission</Link>
9. Database Migration Script
sql
-- migrations/002_comprehensive_submission_system.sql

-- Add all missing columns to equipment_submissions
ALTER TABLE equipment_submissions
ADD COLUMN IF NOT EXISTS reference_number TEXT UNIQUE NOT NULL,
ADD COLUMN IF NOT EXISTS phone_number TEXT NOT NULL,
ADD COLUMN IF NOT EXISTS email TEXT NOT NULL,
ADD COLUMN IF NOT EXISTS user_city TEXT,
ADD COLUMN IF NOT EXISTS user_state TEXT,
ADD COLUMN IF NOT EXISTS user_zip_code TEXT,
ADD COLUMN IF NOT EXISTS is_local BOOLEAN DEFAULT false,
ADD COLUMN IF NOT EXISTS distance TEXT,
ADD COLUMN IF NOT EXISTS status TEXT DEFAULT 'pending',
ADD COLUMN IF NOT EXISTS status_history JSONB DEFAULT '[]'::jsonb,
ADD COLUMN IF NOT EXISTS admin_notes TEXT,
ADD COLUMN IF NOT EXISTS internal_notes TEXT,
ADD COLUMN IF NOT EXISTS offer_amount TEXT,
ADD COLUMN IF NOT EXISTS decline_reason TEXT,
ADD COLUMN IF NOT EXISTS scheduled_pickup_date TIMESTAMP,
ADD COLUMN IF NOT EXISTS pickup_window_start TEXT,
ADD COLUMN IF NOT EXISTS pickup_window_end TEXT,
ADD COLUMN IF NOT EXISTS images JSONB DEFAULT '[]'::jsonb,
ADD COLUMN IF NOT EXISTS viewed_by_admin BOOLEAN DEFAULT false,
ADD COLUMN IF NOT EXISTS last_viewed_at TIMESTAMP,
ADD COLUMN IF NOT EXISTS assigned_to UUID REFERENCES users(id),
ADD COLUMN IF NOT EXISTS reviewed_at TIMESTAMP,
ADD COLUMN IF NOT EXISTS completed_at TIMESTAMP;

-- Create indexes for performance
CREATE INDEX IF NOT EXISTS idx_equipment_submissions_reference ON equipment_submissions(reference_number);
CREATE INDEX IF NOT EXISTS idx_equipment_submissions_status ON equipment_submissions(status);
CREATE INDEX IF NOT EXISTS idx_equipment_submissions_user_id ON equipment_submissions(user_id);
CREATE INDEX IF NOT EXISTS idx_equipment_submissions_created ON equipment_submissions(created_at DESC);
CREATE INDEX IF NOT EXISTS idx_equipment_submissions_local ON equipment_submissions(is_local) WHERE is_local = true;

-- Add check constraint for valid statuses
ALTER TABLE equipment_submissions 
ADD CONSTRAINT valid_status CHECK (
  status IN ('pending', 'under_review', 'accepted', 'declined', 'scheduled', 'completed', 'cancelled')
);
Instructions for Replit:
Update Database Schema - Run the migration to add all necessary columns
Create Reference Generator - Implement the unique reference number system
Build Submission Success Page - Create the success page with reference display
Create Tracking Page - Build the public tracking interface
Build Admin Review Dashboard - Complete admin interface for managing submissions
Update API Routes - Add all the new endpoints for the system
Set Up Email Service - Configure email notifications
Update Navigation - Add tracking links and admin menu items
Test Full Flow - Submit a test item and track it through the entire process
Clean Up Legacy Code - Remove any old submission handling code
This comprehensive system will provide:

Unique reference numbers for every submission
Public tracking interface
Complete admin workflow
Email notifications at each step
Full status history tracking
Local/non-local differentiation
Professional SOP compliance



