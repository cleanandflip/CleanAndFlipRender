Instructions to Fix Reference Number Display and Navigation Issues
1. Fix Reference Number Not Showing on Success Page
The issue is that the reference number isn't being passed to the success page. Fix the submission form redirect:
tsx// client/src/pages/SellToUs.tsx or EquipmentSubmissionForm.tsx

// Fix the form submission handler
const handleSubmit = async (e) => {
  e.preventDefault();
  
  try {
    const response = await fetch('/api/equipment-submissions', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(formData)
    });
    
    const data = await response.json();
    
    if (data.success && data.referenceNumber) {
      // Navigate with reference number in URL
      navigate(`/submission-success?ref=${data.referenceNumber}`);
    } else {
      throw new Error('No reference number received');
    }
  } catch (error) {
    console.error('Submission error:', error);
    toast({
      title: "Error",
      description: "Failed to submit equipment. Please try again.",
      variant: "destructive"
    });
  }
};
2. Fix Submission Success Page to Display Reference Number
tsx// client/src/pages/SubmissionSuccess.tsx - Fix reference display

import { useEffect, useState } from 'react';
import { useLocation, useSearch } from 'wouter';
import { Card } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { CheckCircle, Clock, DollarSign, Truck, Copy, ExternalLink, Loader2 } from 'lucide-react';

export function SubmissionSuccess() {
  const [, setLocation] = useLocation();
  const search = useSearch();
  const referenceNumber = new URLSearchParams(search).get('ref');
  const [copied, setCopied] = useState(false);
  
  // Scroll to top on mount
  useEffect(() => {
    window.scrollTo(0, 0);
    
    // If no reference number, redirect to sell page
    if (!referenceNumber) {
      console.error('No reference number found in URL');
      setLocation('/sell-to-us');
    }
  }, [referenceNumber, setLocation]);
  
  const copyReference = () => {
    if (referenceNumber) {
      navigator.clipboard.writeText(referenceNumber);
      setCopied(true);
      setTimeout(() => setCopied(false), 2000);
    }
  };
  
  return (
    <div className="min-h-screen bg-gradient-to-b from-gray-900 to-black py-12 px-4">
      <div className="max-w-2xl mx-auto">
        {/* Success Icon */}
        <div className="flex justify-center mb-8">
          <div className="bg-green-500/20 p-8 rounded-full">
            <CheckCircle className="w-16 h-16 text-green-500" />
          </div>
        </div>
        
        {/* Main Card */}
        <Card className="p-8 bg-gray-800/50 backdrop-blur-sm border-gray-700">
          <h1 className="text-3xl font-bold text-center mb-6">
            Submission Received!
          </h1>
          
          {/* Reference Number */}
          <div className="bg-gray-900/50 rounded-lg p-6 mb-6">
            <p className="text-gray-400 text-sm mb-2">Your Reference Number</p>
            <div className="flex items-center justify-between">
              {referenceNumber ? (
                <>
                  <code className="text-2xl font-mono text-blue-400">
                    {referenceNumber}
                  </code>
                  <Button
                    variant="ghost"
                    size="icon"
                    onClick={copyReference}
                    className="hover:bg-gray-700"
                  >
                    <Copy className={`w-5 h-5 ${copied ? 'text-green-500' : ''}`} />
                  </Button>
                </>
              ) : (
                <div className="flex items-center gap-2">
                  <Loader2 className="w-5 h-5 animate-spin" />
                  <span className="text-gray-400">Loading...</span>
                </div>
              )}
            </div>
            <p className="text-xs text-gray-500 mt-2">
              Save this number to track your submission
            </p>
          </div>
          
          {/* Rest of the component remains the same */}
          <p className="text-gray-300 text-center mb-8">
            Thank you for choosing Clean & Flip. We've received your equipment 
            submission and our team will review it within 48 hours.
          </p>
          
          {/* Action Buttons */}
          <div className="flex flex-col sm:flex-row gap-4">
            <Link href={`/track-submission?ref=${referenceNumber}`} className="flex-1">
              <Button className="w-full" variant="default">
                <ExternalLink className="w-4 h-4 mr-2" />
                Track Your Submission
              </Button>
            </Link>
            
            <Link href="/sell-to-us" className="flex-1">
              <Button className="w-full" variant="outline">
                Submit Another Item
              </Button>
            </Link>
          </div>
        </Card>
      </div>
    </div>
  );
}
3. Add Submissions to Navigation Profile Dropdown
tsx// client/src/components/layout/NavigationBar.tsx or similar

// Add to the profile dropdown menu
import { Package } from 'lucide-react';

// In the dropdown menu items
<DropdownMenuItem asChild>
  <Link href="/dashboard?tab=submissions" className="flex items-center gap-2">
    <Package className="w-4 h-4" />
    My Submissions
  </Link>
</DropdownMenuItem>
4. Fix Track Button to Auto-Navigate with Reference
tsx// client/src/pages/Dashboard.tsx - Fix the Track button

// In the submissions list, update the Track button
<Link href={`/track-submission?ref=${submission.referenceNumber}`}>
  <Button variant="outline" size="sm">
    <Eye className="w-4 h-4 mr-1" />
    Track
  </Button>
</Link>
5. Update Track Submission Page to Auto-Load Reference
tsx// client/src/pages/TrackSubmission.tsx - Auto-load reference from URL

import { useEffect, useState } from 'react';
import { useSearch } from 'wouter';

export function TrackSubmission() {
  const search = useSearch();
  const urlRef = new URLSearchParams(search).get('ref');
  const [referenceInput, setReferenceInput] = useState(urlRef || '');
  const [searchRef, setSearchRef] = useState(urlRef || '');
  
  // Auto-search if reference is in URL
  useEffect(() => {
    if (urlRef) {
      setReferenceInput(urlRef);
      setSearchRef(urlRef);
    }
  }, [urlRef]);
  
  // Rest of component...
}
6. Comprehensive System Check Script
Create a test script to verify all functionality:
ts// server/utils/systemCheck.ts

export async function runSystemCheck(db: Database) {
  const checks = {
    database: false,
    referenceGeneration: false,
    emailService: false,
    fileUpload: false,
    userFlow: false,
    adminFlow: false
  };
  
  console.log('🔍 Running comprehensive system check...\n');
  
  // 1. Database connectivity
  try {
    const testQuery = await db.select().from(users).limit(1);
    checks.database = true;
    console.log('✅ Database connection: OK');
  } catch (error) {
    console.log('❌ Database connection: FAILED', error);
  }
  
  // 2. Reference number generation
  try {
    const testRef = await generateUniqueReference(db);
    if (testRef && testRef.match(/^REF-\d{8}-\d{4}$/)) {
      checks.referenceGeneration = true;
      console.log('✅ Reference generation: OK');
    }
  } catch (error) {
    console.log('❌ Reference generation: FAILED', error);
  }
  
  // 3. Check required tables exist
  const requiredTables = [
    'users', 'equipment_submissions', 'products', 'categories', 
    'orders', 'cart_items', 'wishlist'
  ];
  
  for (const table of requiredTables) {
    try {
      const result = await db.execute(
        sql`SELECT EXISTS (
          SELECT FROM information_schema.tables 
          WHERE table_name = ${table}
        )`
      );
      console.log(`✅ Table ${table}: EXISTS`);
    } catch (error) {
      console.log(`❌ Table ${table}: MISSING`);
    }
  }
  
  // 4. Check required columns in equipment_submissions
  const requiredColumns = [
    'reference_number', 'phone_number', 'status', 'status_history',
    'is_local', 'offer_amount', 'images'
  ];
  
  console.log('\n📋 Checking equipment_submissions columns:');
  for (const column of requiredColumns) {
    try {
      const result = await db.execute(
        sql`SELECT column_name FROM information_schema.columns 
            WHERE table_name = 'equipment_submissions' 
            AND column_name = ${column}`
      );
      if (result.rows.length > 0) {
        console.log(`✅ Column ${column}: EXISTS`);
      } else {
        console.log(`❌ Column ${column}: MISSING`);
      }
    } catch (error) {
      console.log(`❌ Column ${column}: ERROR`, error);
    }
  }
  
  return checks;
}

// Add API endpoint for system check (admin only)
app.get('/api/admin/system-check', requireAdmin, async (req, res) => {
  const results = await runSystemCheck(db);
  res.json(results);
});
7. Fix All Navigation and State Issues
tsx// client/src/App.tsx - Ensure all routes are properly defined

import { Route, Switch, Redirect } from 'wouter';
import { SubmissionSuccess } from './pages/SubmissionSuccess';
import { TrackSubmission } from './pages/TrackSubmission';

// In your routes
<Switch>
  <Route path="/submission-success" component={SubmissionSuccess} />
  <Route path="/track-submission" component={TrackSubmission} />
  {/* Other routes */}
</Switch>

// Update Dashboard to handle tab parameter
export function Dashboard() {
  const [, params] = useRoute('/dashboard');
  const search = useSearch();
  const urlTab = new URLSearchParams(search).get('tab');
  const [selectedTab, setSelectedTab] = useState(urlTab || 'orders');
  
  useEffect(() => {
    if (urlTab) {
      setSelectedTab(urlTab);
    }
  }, [urlTab]);
  
  // Rest of component
}
8. Create Missing Database Migration
sql-- migrations/004_fix_missing_columns.sql

-- Ensure all required columns exist
ALTER TABLE equipment_submissions
ADD COLUMN IF NOT EXISTS reference_number TEXT UNIQUE,
ADD COLUMN IF NOT EXISTS phone_number TEXT,
ADD COLUMN IF NOT EXISTS email TEXT,
ADD COLUMN IF NOT EXISTS status TEXT DEFAULT 'pending',
ADD COLUMN IF NOT EXISTS status_history JSONB DEFAULT '[]'::jsonb,
ADD COLUMN IF NOT EXISTS is_local BOOLEAN DEFAULT false,
ADD COLUMN IF NOT EXISTS images JSONB DEFAULT '[]'::jsonb;

-- Add NOT NULL constraint to reference_number after backfilling
UPDATE equipment_submissions 
SET reference_number = 'REF-' || to_char(created_at, 'YYYYMMDD') || '-' || 
    lpad(row_number() OVER (ORDER BY created_at)::text, 4, '0')
WHERE reference_number IS NULL;

ALTER TABLE equipment_submissions 
ALTER COLUMN reference_number SET NOT NULL;
Instructions for Replit to Implement:

Fix Success Page Navigation

Update form submission to properly pass reference number
Fix SubmissionSuccess component to read from URL params
Ensure reference number displays instead of clock icon


Add Profile Dropdown Navigation

Add "My Submissions" to profile dropdown menu
Link to dashboard with submissions tab selected


Fix Track Button Behavior

Update track buttons to include reference in URL
Auto-load reference on tracking page


Run Database Migration

Execute migration to ensure all columns exist
Backfill any missing reference numbers


System Verification

Run comprehensive checks on all endpoints
Verify user flow: submit → success → track → cancel
Verify admin flow: view → review → accept/decline → schedule


Test Complete Flow

Submit new equipment
Verify reference shows on success page
Track submission with auto-filled reference
Test cancellation from dashboard
Check admin can see and manage submissions


Fix Any Console Errors

Check browser console for errors
Fix any 404s or undefined references
Ensure all API calls return expected data



This comprehensive fix will ensure:

Reference numbers display properly on success page
Navigation works seamlessly between pages
Track buttons auto-fill reference numbers
Profile dropdown includes submissions link
All database fields are properly set up
Complete system works end-to-end