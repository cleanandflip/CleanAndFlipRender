Here’s a tight, end-to-end plan Replit can follow to standardize every dropdown across the app, match the site theme, and purge all legacy dropdown code (dev dashboard included).

Objective
One canonical Dropdown component used everywhere (site + admin/dev).

Zero direct usage of <select> or one-off Radix/shadcn wrappers outside the canonical component.

Theme-consistent visuals, behavior, motion, and a11y.

All legacy dropdowns removed (files, exports, styles, stories, tests).

0) Pick the foundation (don’t mix)
Use one of these and stick to it everywhere:

Option A (recommended): shadcn/ui Select wrapper (Radix under the hood, already battle-tested).

Option B: native <select> with our styled wrapper (if you want the lightest bundle).

Replit: choose A or B once. The rest of this plan works for either.

1) Create the canonical component
File: src/components/ui/Dropdown.tsx

API (keep it stable site-wide):

ts
Copy
Edit
export type DropdownOption = { value: string; label: string; disabled?: boolean };
export type DropdownProps = {
  value?: string | null;
  onChange: (value: string) => void;
  options: DropdownOption[];
  placeholder?: string;
  disabled?: boolean;
  id?: string;
  name?: string;
  ariaLabel?: string;
  // Optional niceties
  fullWidth?: boolean;
  size?: "sm" | "md" | "lg";
  error?: string | null;
  // Async mode (for fetch-on-open lists)
  loading?: boolean;
};
export default function Dropdown(props: DropdownProps) { /* wraps chosen foundation */ }
Behavior (must-haves):

Keyboard: Up/Down, Home/End, Enter/Space, Esc all work.

Controlled value; emits onChange(value).

Optional loading shows a small spinner in the menu/trigger.

Optional error shows helper text and sets aria-invalid.

Respects prefers-reduced-motion.

Theming (no hardcoded colors):

Use existing design tokens/util classes from your theme.

Provide size variants that align with button heights (sm/md/lg).

Focus ring matches the rest of your site.

2) Build “form controller” glue once
For react-hook-form (or your form lib), ship a single adapter so teams don’t hand-roll:

File: src/components/form/DropdownField.tsx

tsx
Copy
Edit
// Usage: <DropdownField control={control} name="condition" options={...} />
Encapsulates <Controller> wiring and error display.

Export this and use it in all forms.

3) Inventory & replace all existing dropdowns
Search everywhere (site + dev dashboard):

nginx
Copy
Edit
rg -n "SelectTrigger|SelectValue|SelectContent|SelectItem" src
rg -n "@radix-ui/react-select" src
rg -n "<select\\b" src
rg -n "StandardDropdown|Dropdown|ComboBox|Listbox|Downshift" src
Replace patterns:

If you find Radix used directly, replace with Dropdown.

If you find shadcn/ui Select used directly, replace with Dropdown.

If you find native <select>, replace with Dropdown.

If you find any one-off dropdown (e.g., ProjectSelect, BrandSelect), convert to headless wrappers around Dropdown that only supply options (no UI divergence).

Example headless wrapper:

tsx
Copy
Edit
export function BrandDropdown(props: Omit<DropdownProps,"options">) {
  const options = useBrandOptions(); // fetch/map labels
  return <Dropdown {...props} options={options} />;
}
4) Codemod pass (fast, safe migration)
Create a simple TS-aware codemod (or just use search/replace with review) to:

Replace imports of old components with @/components/ui/Dropdown.

Replace <select> blocks that map options with <Dropdown options={...}>.

Greps to confirm completion:

nginx
Copy
Edit
rg -n "@radix-ui/react-select" src            # expect 0 matches
rg -n "SelectTrigger|SelectItem" src          # expect 0 matches (outside Dropdown.tsx)
rg -n "<select\\b" src                        # expect 0 matches (outside Dropdown.tsx)
rg -n "StandardDropdown|ComboBox|Listbox" src # expect 0 matches
5) Kill legacy code (all traces)
Delete old dropdown components in:

src/components/**/Select*.tsx, *Dropdown*.tsx, dev dashboard UI kits.

Remove CSS/modules/story files for those components.

Update barrel exports (index.ts) that re-exported them.

Remove any theme files for the old kits (tokens, variables).

Delete tests and stories for removed components.

Block reintroduction:

Add ESLint rule to prohibit direct Radix imports / <select> in app code:

.eslintrc.cjs

js
Copy
Edit
rules: {
  "no-restricted-imports": ["error", { "paths": ["@radix-ui/react-select"] }],
  "no-restricted-syntax": [
    "error",
    {
      "selector": "JSXOpeningElement[name.name='select']",
      "message": "Use <Dropdown /> instead of <select>."
    }
  ]
}
6) Motion & a11y unification
Motion: one easing/duration for open/close (e.g., 180–220ms). Disable with prefers-reduced-motion.

Focus: consistent ring/shadow to match Button.

Menu max-height + scroll with visible focus for long lists.

Labels: every field must have <label htmlFor> or aria-label.

Error: aria-invalid, aria-describedby point to helper text id.

7) Theme match (what to implement, not colors)
Trigger height/rounded matches Button md.

Spacing tokens for paddings (left icon space optional).

States: default / hover / focus / disabled / invalid.

Menu: same surface as popovers/tooltips; shadows & radius consistent.

Option states: selected checkmark, focus highlight, disabled opacity.

8) Admin/Dev Dashboard
Repeat the same replacement in dashboard code. Do not maintain a second UI kit.

If the dashboard needs multi-select, expose DropdownMulti (separate component, same theme).

9) QA / Acceptance
 No Radix or <select> usages outside Dropdown.tsx.

 All forms (site + dashboard) use Dropdown or DropdownField.

 Keyboard interaction works everywhere (Up/Down/Home/End/Enter/Esc/Typeahead).

 Error + disabled states render correctly and read by screen readers.

 Visuals match site theme (trigger/menu/focus rings/shadows).

 Motion is consistent and respects reduced motion.

 Bundle diff shows removal of duplicate dropdown libs.

 Lint prevents re-adding old patterns.

10) Rollout strategy
Land Dropdown.tsx + DropdownField.tsx with full theme & tests.

Migrate customer-facing pages first (higher traffic).

Migrate dashboard next.

Remove legacy code & enable lint rules in the same PR (or follow-up PR).

Add a Storybook story: Default, WithError, Disabled, LongList, AsyncLoading.

11) Troubleshooting gotchas
Two Reacts cause Radix crashes. Verify:

bash
Copy
Edit
npm ls react react-dom
Expect exactly one version each; otherwise dedupe.

Path aliases: ensure @ points to src in both tsconfig.json and vite.config.ts.

SSR/Hydration: if you hydrate modals/portals, ensure same container for menus (e.g., portal to document.body consistently).

