COMPLETE CODEBASE ERROR FIX INSTRUCTIONS
IMPORTANT: Read This First
The codebase scanner found 219 issues total. The 2 "critical" eval() errors are FALSE POSITIVES (the scanner detecting its own detection code). We'll handle those separately.

SECTION 1: Handle False Positives (DON'T FIX THESE)
ðŸ“Œ Eval() Detection - SKIP THESE
typescript// In server/routes/admin/codebaseScanner.ts
// ADD this at line ~65 (inside the file scanning loop):

if (filePath.includes('codebaseScanner.ts')) {
  continue; // Skip scanning the scanner itself
}

// This prevents the scanner from flagging its own eval() detection code
// The scanner is CORRECTLY checking for eval() - these aren't real errors!

SECTION 2: Fix Missing Error Handling (33 instances)
ðŸ“Œ Apply This Pattern to ALL Async Operations:
For Frontend Fetch Calls:
typescript// REPLACE this pattern:
const response = await fetch('/api/endpoint');

// WITH this pattern:
try {
  const response = await fetch('/api/endpoint');
  if (!response.ok) {
    throw new Error(`HTTP ${response.status}: ${response.statusText}`);
  }
  const data = await response.json();
  // ... continue with data
} catch (error) {
  ErrorLogger.logError(error as Error, { 
    context: 'API call failed',
    endpoint: '/api/endpoint' 
  });
  // Show user-friendly error
  toast.error('Failed to load data. Please try again.');
  return; // or handle appropriately
}
For Backend Cache Operations:
typescript// REPLACE this pattern in server/config/cache.ts:
return await cache.get('key');

// WITH:
try {
  return await cache.get('key');
} catch (error) {
  logger.error('Cache operation failed:', error);
  return null; // Return null if cache fails (graceful degradation)
}
ðŸ“Œ Files to Fix (Apply Above Patterns):
CLIENT FILES:
âœ“ client/src/components/admin/ProductModal.tsx - Lines 109, 126
âœ“ client/src/components/admin/category-filter-config.tsx - Line 34
âœ“ client/src/components/admin/category-management.tsx - Lines 120, 279, 290, 319
âœ“ client/src/components/categories/category-grid.tsx - Line 19
âœ“ client/src/components/coupons/CouponInput.tsx - Line 31
âœ“ client/src/components/products/filter-sidebar.tsx - Lines 38, 50
âœ“ client/src/components/reviews/ProductReviews.tsx - Lines 50, 73
âœ“ client/src/components/shared/ImageUploadZone.tsx - Line 64
âœ“ client/src/components/shipping/ShippingCalculator.tsx - Line 43
âœ“ client/src/pages/admin/AnalyticsTab.tsx - Line 12
âœ“ client/src/pages/admin/SystemManager.tsx - Line 47

SERVER FILES:
âœ“ server/config/cache.ts - Lines 8, 12, 17, 21, 26, 30, 36, 39, 40
âœ“ vite.config.ts - Line 13

SECTION 3: Replace Console.log Statements (150+ instances)
ðŸ“Œ Mass Replace Strategy:
Step 1: Add ErrorLogger Import to Files
typescript// For CLIENT files, add at top:
import { ErrorLogger } from '@/lib/errorLogger';

// For SERVER files, add at top:
import { logger } from '@/utils/logger';
Step 2: Use Find & Replace (Regex)
regex// FIND (Regex):
console\.log\((.*?)\);?

// REPLACE WITH (for development/info logs):
ErrorLogger.logInfo($1);

// OR for production (just remove them):
// DELETE the line entirely
Step 3: Special Cases to Keep (Convert to Logger)
typescript// Keep these but convert to proper logging:

// DATABASE/SERVER STARTUP (convert to logger.info):
server/config/database.ts - Lines 19, 25, 32, 38, 43, 58, 62, 82, 105, 123-133, 146, 154, 171-172
server/config/environment.ts - Lines 161-166, 174
server/config/security.ts - Lines 87, 176-182, 193

// CRITICAL OPERATIONS (convert to logger.error or logger.warn):
server/websocket.ts - Lines 41, 69, 88, 119, 138, 145
server/services/simple-password-reset.ts - All lines (this is debugging, should be logger.debug)
Step 4: Bulk Remove These (Not Needed):
typescript// These are debug logs that should be DELETED entirely:
client/src/components/ui/UnifiedSearch.tsx - ALL console.logs (Lines 192, 248-250, 254, 302, 326, 473, 479, 513, 519)
client/src/components/ui/address-autocomplete.tsx - ALL console.logs (Lines 64, 68, 82, 87, 89)
client/src/hooks/useCloudinaryUpload.tsx - ALL console.logs
client/src/hooks/useWebSocket.ts - ALL console.logs
client/src/pages/admin/*.tsx - ALL console.logs in admin pages

SECTION 4: Address TODO/FIXME Comments (6 instances)
ðŸ“Œ Quick Fixes:
typescript// 1. server/routes.ts - Line 169
// TODO: Re-enable with proper auth route exclusion
// FIX: Add auth middleware exclusion list:
const AUTH_EXCLUDED_ROUTES = ['/api/health', '/api/auth/login', '/api/auth/register'];

// 2. server/routes.ts - Line 3395
// TODO: Check if user actually purchased this product
// FIX: Add purchase verification:
const hasPurchased = await db.query(
  'SELECT 1 FROM order_items oi JOIN orders o ON oi.order_id = o.id WHERE o.user_id = $1 AND oi.product_id = $2',
  [userId, productId]
);
verifiedPurchase: !!hasPurchased.rows[0]

// 3. server/routes/admin/codebaseScanner.ts - Lines 83-84, 88
// These TODO checks are PART of the scanner - leave them!
// They're detecting TODOs in other files - working as intended

SECTION 5: Performance Issue
ðŸ“Œ Fix DOM Query in Loop Warning:
typescript// server/routes/admin/codebaseScanner.ts - Line 174
// This is also the scanner checking for performance issues - NOT AN ERROR!
// But if you want to improve it:

// Change the check to be more specific:
if (trimmedLine.includes('document.') && 
    (trimmedLine.includes('for(') || trimmedLine.includes('forEach') || trimmedLine.includes('while('))) {
  // This is a more accurate check for DOM queries in loops
}

SECTION 6: Systematic Fix Order
ðŸ“Œ Execute in This Order:

First Pass - Add Error Handling:

Open each file listed in Section 2
Wrap async operations with try-catch
Add appropriate error handling


Second Pass - Remove Console.logs:

Use Find & Replace across project
Keep only critical startup logs (convert to logger)
Delete all debug console.logs


Third Pass - Fix TODOs:

Address the 2 real TODO items
Leave the scanner's TODO detection alone


Final Pass - Test:

Run the codebase scanner again
Should see dramatic reduction in errors
Only keep necessary logging




EXPECTED RESULTS AFTER FIXES:
BEFORE: 219 issues
- 2 Critical (false positives - ignored)
- 33 Warnings (async error handling - FIXED)
- 6 TODO comments (2 fixed, 4 are scanner checks)
- 150+ Info (console.logs - REMOVED)

AFTER: ~10 issues
- 0 Critical
- 0 Missing error handling
- 4 TODO detection rules (part of scanner)
- ~6 Info (necessary startup logs converted to logger)
This will clean up your entire codebase and implement proper error handling throughout! ðŸš€