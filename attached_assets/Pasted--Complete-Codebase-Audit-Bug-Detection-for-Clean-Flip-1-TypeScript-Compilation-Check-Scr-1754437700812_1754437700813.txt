# Complete Codebase Audit & Bug Detection for Clean & Flip

## 1. TypeScript Compilation Check Script

Create `/server/scripts/full-audit.sh`:

```bash
#!/bin/bash

echo "=========================================="
echo "🔍 CLEAN & FLIP COMPLETE CODEBASE AUDIT"
echo "=========================================="
echo ""

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# 1. TypeScript Compilation Check
echo "1. TYPESCRIPT COMPILATION CHECK"
echo "-------------------------------"
cd /home/runner/workspace

# Full TypeScript check
echo "Running complete TypeScript compilation check..."
npx tsc --noEmit 2>&1 | tee typescript-errors.log

# Count errors
TS_ERRORS=$(grep -c "error TS" typescript-errors.log || echo "0")
echo -e "\n${RED}Total TypeScript Errors: $TS_ERRORS${NC}\n"

# Show first 20 errors with context
if [ $TS_ERRORS -gt 0 ]; then
  echo "First 20 TypeScript errors:"
  grep -A 2 -B 2 "error TS" typescript-errors.log | head -60
fi

# 2. Check for missing dependencies
echo -e "\n2. DEPENDENCY CHECK"
echo "-------------------"
echo "Checking for missing dependencies..."

# Check if all imports can be resolved
find . -name "*.ts" -o -name "*.tsx" | while read file; do
  grep -E "^import .* from ['\"]" "$file" | grep -v "node_modules" | while read import; do
    module=$(echo $import | sed -E "s/.*from ['\"]([^'\"]+)['\"].*/\1/")
    if [[ $module == ./* ]] || [[ $module == @/* ]]; then
      # Check if local file exists
      if [[ $module == @/* ]]; then
        # Handle path aliases
        resolved_path=$(echo $module | sed 's|@/||' | sed 's|@server|server|' | sed 's|@client|client|' | sed 's|@shared|shared|')
        if [ ! -f "$resolved_path.ts" ] && [ ! -f "$resolved_path.tsx" ] && [ ! -f "$resolved_path/index.ts" ] && [ ! -d "$resolved_path" ]; then
          echo -e "${RED}Missing local module: $module in $file${NC}"
        fi
      fi
    fi
  done
done

# 3. Database Schema Consistency Check
echo -e "\n3. DATABASE SCHEMA CHECK"
echo "------------------------"

# Check if schema file exists
if [ -f "server/db/schema.ts" ]; then
  echo "✓ Schema file found"
  
  # Check for table definitions
  echo "Tables defined in schema:"
  grep -E "export const .+ = pgTable" server/db/schema.ts | sed 's/export const /  - /' | sed 's/ = pgTable.*//'
  
  # Check for missing tables mentioned in codebase
  echo -e "\nChecking for table references not in schema..."
  tables_in_code=$(grep -r "from(" server/ --include="*.ts" | grep -oE "from\([a-zA-Z]+\)" | sort | uniq | sed 's/from(//' | sed 's/)//')
  
  for table in $tables_in_code; do
    if ! grep -q "export const $table" server/db/schema.ts 2>/dev/null; then
      echo -e "${YELLOW}Warning: Table '$table' referenced but not found in schema${NC}"
    fi
  done
else
  echo -e "${RED}Schema file not found at server/db/schema.ts${NC}"
fi

# 4. Security Audit
echo -e "\n4. SECURITY AUDIT"
echo "-----------------"

# Check for hardcoded secrets
echo "Checking for hardcoded secrets..."
grep -r -i -E "(api_key|apikey|password|secret|private_key)" . \
  --include="*.ts" --include="*.tsx" --include="*.js" --include="*.jsx" \
  --exclude-dir="node_modules" --exclude-dir="dist" \
  | grep -v -E "(process\.env|import|export|interface|type|password\:)" \
  | grep -E "=\s*['\"][^'\"]+['\"]" | head -10

# Check for console.logs that might leak sensitive data
echo -e "\nChecking for console.logs in production code..."
grep -r "console\." server/ --include="*.ts" | grep -v "logger" | wc -l

# 5. API Endpoint Validation
echo -e "\n5. API ENDPOINT VALIDATION"
echo "--------------------------"

# Find all route definitions
echo "Scanning for API endpoints..."
grep -r -E "(router\.|app\.)(get|post|put|delete|patch)\(" server/ --include="*.ts" | \
  sed -E 's/.*\.(get|post|put|delete|patch)\(["\x27]([^"\x27]+)["\x27].*/\1 \2/' | \
  sort | uniq > api-endpoints.txt

echo "Total endpoints found: $(wc -l < api-endpoints.txt)"

# Check for duplicate routes
echo -e "\nChecking for duplicate routes..."
sort api-endpoints.txt | uniq -d | while read dup; do
  echo -e "${YELLOW}Duplicate route: $dup${NC}"
done

# 6. Environment Variable Check
echo -e "\n6. ENVIRONMENT VARIABLE CHECK"
echo "-----------------------------"

# Find all env vars used in code
echo "Environment variables referenced in code:"
grep -r "process\.env\." . --include="*.ts" --include="*.tsx" --exclude-dir="node_modules" | \
  grep -oE "process\.env\.[A-Z_]+" | sort | uniq | sed 's/process\.env\.//' > used-env-vars.txt

# Check if .env.example exists
if [ -f ".env.example" ]; then
  echo "Checking against .env.example..."
  while read var; do
    if ! grep -q "^$var=" .env.example; then
      echo -e "${YELLOW}Missing in .env.example: $var${NC}"
    fi
  done < used-env-vars.txt
else
  echo -e "${YELLOW}No .env.example file found${NC}"
  echo "Required environment variables:"
  cat used-env-vars.txt
fi

# 7. Database Query Audit
echo -e "\n7. DATABASE QUERY AUDIT"
echo "-----------------------"

# Check for potential N+1 queries
echo "Checking for potential N+1 query patterns..."
grep -r -A 5 -B 5 "forEach\|map" server/ --include="*.ts" | grep -B 5 -A 5 "await.*db\." | head -20

# Check for missing indexes
echo -e "\nChecking for queries without proper indexes..."
grep -r "where(" server/ --include="*.ts" | grep -oE "where\(eq\([a-zA-Z]+\.[a-zA-Z]+," | \
  sed 's/where(eq(//' | sed 's/,//' | sort | uniq > queried-fields.txt

echo "Fields being queried (check if indexed):"
cat queried-fields.txt

# 8. Frontend Component Check
echo -e "\n8. FRONTEND COMPONENT CHECK"
echo "---------------------------"

# Check for unused components
echo "Checking for potentially unused components..."
find client/src/components -name "*.tsx" -o -name "*.jsx" | while read component; do
  component_name=$(basename "$component" .tsx | basename - .jsx)
  # Check if component is imported anywhere
  if ! grep -r "import.*$component_name" client/src --include="*.tsx" --include="*.jsx" --include="*.ts" --include="*.js" | grep -v "$component" > /dev/null; then
    echo -e "${YELLOW}Potentially unused component: $component${NC}"
  fi
done

# 9. Integration Health Check
echo -e "\n9. INTEGRATION HEALTH CHECK"
echo "---------------------------"

# Check Stripe integration
echo "Checking Stripe integration..."
if grep -q "stripe" package.json; then
  echo "✓ Stripe package installed"
  if grep -q "STRIPE_SECRET_KEY" used-env-vars.txt; then
    echo "✓ Stripe environment variable referenced"
  else
    echo -e "${RED}✗ STRIPE_SECRET_KEY not found in code${NC}"
  fi
fi

# Check Cloudinary integration
echo -e "\nChecking Cloudinary integration..."
if grep -q "cloudinary" package.json; then
  echo "✓ Cloudinary package installed"
  if grep -q "CLOUDINARY_URL" used-env-vars.txt; then
    echo "✓ Cloudinary environment variable referenced"
  else
    echo -e "${RED}✗ CLOUDINARY_URL not found in code${NC}"
  fi
fi

# Check Resend integration
echo -e "\nChecking Resend (email) integration..."
if grep -q "resend" package.json; then
  echo "✓ Resend package installed"
  if grep -q "RESEND_API_KEY" used-env-vars.txt; then
    echo "✓ Resend environment variable referenced"
  else
    echo -e "${RED}✗ RESEND_API_KEY not found in code${NC}"
  fi
fi

# 10. Performance Issues
echo -e "\n10. PERFORMANCE AUDIT"
echo "---------------------"

# Check for synchronous file operations
echo "Checking for synchronous file operations..."
grep -r "Sync\(" server/ --include="*.ts" | grep -v "hashSync" | head -5

# Check for missing await keywords
echo -e "\nChecking for potential missing await keywords..."
grep -r "\.then\(" server/ --include="*.ts" | head -10

# Generate Summary Report
echo -e "\n=========================================="
echo "📊 AUDIT SUMMARY"
echo "=========================================="
echo -e "TypeScript Errors: ${RED}$TS_ERRORS${NC}"
echo -e "Security Issues: $(grep -c "api_key\|password" . --include="*.ts" 2>/dev/null || echo 0)"
echo -e "Total API Endpoints: $(wc -l < api-endpoints.txt 2>/dev/null || echo 0)"
echo -e "Console.logs in server: $(grep -r "console\." server/ --include="*.ts" | grep -v "logger" | wc -l)"
echo "=========================================="

# Save full report
echo -e "\nFull audit report saved to: audit-report-$(date +%Y%m%d-%H%M%S).txt"
```

## 2. Quick Bug Detection Commands

Run these individually for specific checks:

### TypeScript Errors (All Files)
```bash
cd /home/runner/workspace && npx tsc --noEmit 2>&1 | grep -E "error TS[0-9]+" | nl
```

### Find All TODO/FIXME Comments
```bash
grep -r -n -E "(TODO|FIXME|HACK|XXX|BUG)" . --include="*.ts" --include="*.tsx" --exclude-dir="node_modules"
```

### Check for Async Issues
```bash
# Missing await keywords
grep -r "Promise<" server/ --include="*.ts" | grep -v "async\|await\|return.*Promise"

# Functions that should be async
grep -r "\.then\(" server/ --include="*.ts" -B 2 | grep -B 2 "function\|=>"
```

### Database Schema Mismatches
```bash
# Find all table references
grep -r -oE "(from|into|update|delete from)\([a-zA-Z_]+\)" server/ --include="*.ts" | sort | uniq

# Find all column references
grep -r -oE "\.[a-zA-Z_]+\s*=" server/ --include="*.ts" | grep -v "process\." | sort | uniq
```

## 3. Common Issues to Fix Based on Codebase

### Issue 1: Missing Type Exports
```typescript
// Add to /shared/types.ts
export interface User {
  id: number;
  email: string;
  name?: string;
  role: 'user' | 'admin' | 'developer';
  createdAt: Date;
  updatedAt: Date;
}

export interface Product {
  id: number;
  name: string;
  description?: string;
  price: number;
  images?: string[];
  category?: string;
  subcategory?: string;
  featured: boolean;
  stock: number;
  brand?: string;
  condition?: string;
  size?: string;
  createdAt: Date;
  updatedAt: Date;
}

export interface Order {
  id: number;
  userId: number;
  status: 'pending' | 'processing' | 'shipped' | 'delivered' | 'cancelled';
  total: number;
  createdAt: Date;
  updatedAt: Date;
}
```

### Issue 2: Fix Import Paths
```typescript
// Update tsconfig.json paths
{
  "compilerOptions": {
    "paths": {
      "@/*": ["./src/*"],
      "@server/*": ["./server/*"],
      "@client/*": ["./client/src/*"],
      "@shared/*": ["./shared/*"],
      "@db/*": ["./server/db/*"]
    }
  }
}
```

### Issue 3: Add Missing Tables to Schema
```typescript
// Add to /server/db/schema.ts
export const passwordResetTokens = pgTable('password_reset_tokens', {
  id: serial('id').primaryKey(),
  userId: integer('user_id').notNull().references(() => users.id),
  token: varchar('token', { length: 255 }).notNull(),
  expiresAt: timestamp('expires_at').notNull(),
  used: boolean('used').default(false),
  createdAt: timestamp('created_at').defaultNow()
});

export const emailLogs = pgTable('email_logs', {
  id: serial('id').primaryKey(),
  to: varchar('to_email', { length: 255 }).notNull(),
  from: varchar('from_email', { length: 255 }).notNull(),
  subject: varchar('subject', { length: 255 }),
  templateType: varchar('template_type', { length: 50 }),
  status: varchar('status', { length: 20 }).default('pending'),
  sentAt: timestamp('sent_at'),
  error: text('error'),
  metadata: jsonb('metadata'),
  createdAt: timestamp('created_at').defaultNow()
});

export const activityLogs = pgTable('activity_logs', {
  id: serial('id').primaryKey(),
  userId: integer('user_id').references(() => users.id),
  action: varchar('action', { length: 255 }).notNull(),
  type: varchar('type', { length: 50 }),
  metadata: jsonb('metadata'),
  ipAddress: varchar('ip_address', { length: 45 }),
  userAgent: text('user_agent'),
  createdAt: timestamp('created_at').defaultNow()
});
```

## 4. Performance Optimization Checks

### Database Query Optimization
```bash
# Find queries without limits
grep -r "from(" server/ --include="*.ts" | grep -v "limit\|first\|LIMIT" | head -10

# Find potential N+1 queries
grep -r -B 3 -A 3 "await.*map\|await.*forEach" server/ --include="*.ts"
```

### Bundle Size Analysis
```bash
# Frontend bundle analysis
cd client && npm run build -- --analyze

# Check for large dependencies
npm list --depth=0 | awk '{print $2}' | xargs -I {} sh -c 'echo "{}: $(npm view {} size)"'
```

## 5. Security Vulnerability Scan

```bash
# Run npm audit
npm audit --audit-level=moderate

# Check for known vulnerabilities
npm audit fix --dry-run

# Check for outdated packages with security issues
npm outdated
```

## 6. Final Validation Script

Create `/server/scripts/validate-deployment.sh`:

```bash
#!/bin/bash

echo "🚀 DEPLOYMENT VALIDATION"
echo "========================"

# 1. Build Check
echo "1. Testing build..."
npm run build
if [ $? -eq 0 ]; then
  echo "✅ Build successful"
else
  echo "❌ Build failed"
  exit 1
fi

# 2. TypeScript Check
echo -e "\n2. TypeScript validation..."
npx tsc --noEmit
if [ $? -eq 0 ]; then
  echo "✅ No TypeScript errors"
else
  echo "❌ TypeScript errors found"
fi

# 3. Database Connection Test
echo -e "\n3. Testing database connection..."
node -e "
const { db } = require('./dist/db');
db.execute('SELECT 1')
  .then(() => console.log('✅ Database connection successful'))
  .catch(err => console.error('❌ Database connection failed:', err.message));
"

# 4. API Health Check
echo -e "\n4. API endpoints test..."
npm start &
SERVER_PID=$!
sleep 5

curl -s http://localhost:5000/api/health > /dev/null
if [ $? -eq 0 ]; then
  echo "✅ API responding"
else
  echo "❌ API not responding"
fi

kill $SERVER_PID

echo -e "\n✅ Validation complete!"
```

## Run Complete Audit

Execute this command to run the full audit:

```bash
chmod +x server/scripts/full-audit.sh && ./server/scripts/full-audit.sh
```

This comprehensive audit will identify:
- All TypeScript compilation errors
- Missing dependencies and imports
- Database schema inconsistencies
- Security vulnerabilities
- Performance issues
- Integration problems
- Unused code
- API endpoint issues

The audit will generate a detailed report with all findings and suggested fixes.