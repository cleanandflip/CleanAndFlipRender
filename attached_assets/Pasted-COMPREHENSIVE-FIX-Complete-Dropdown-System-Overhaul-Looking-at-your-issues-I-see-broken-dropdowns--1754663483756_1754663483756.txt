COMPREHENSIVE FIX: Complete Dropdown System Overhaul
Looking at your issues, I see broken dropdowns everywhere - user menu, form selects, search bars. Here's a complete rebuild:

PHASE 1: DELETE ALL EXISTING DROPDOWN CODE
bashTASK: Complete removal of all dropdown-related code

1. DELETE these files completely:
   - /client/src/components/ui/dropdown.tsx
   - /client/src/components/ui/select.tsx
   - /client/src/components/ui/search-dropdown.tsx
   - /client/src/components/ui/combobox.tsx
   - /client/src/components/ui/popover.tsx
   - /client/src/components/ui/command.tsx
   - /client/src/components/UserDropdown.tsx
   - /client/src/components/SearchBar.tsx
   - /client/src/components/NavigationDropdown.tsx
   - Any file with "dropdown", "select", or "popover" in the name

2. REMOVE from package.json dependencies:
   - @radix-ui/react-dropdown-menu
   - @radix-ui/react-select
   - @radix-ui/react-popover
   - react-select
   - @headlessui/react
   - cmdk

3. Run: npm uninstall @radix-ui/react-dropdown-menu @radix-ui/react-select @radix-ui/react-popover react-select @headlessui/react cmdk

PHASE 2: CREATE TWO UNIFIED COMPONENTS
File 1: /client/src/components/ui/UnifiedDropdown.tsx
typescript// UNIFIED DROPDOWN FOR ALL REGULAR SELECTS
import { useState, useRef, useEffect } from 'react';
import { ChevronDown, Check, X } from 'lucide-react';
import { cn } from '@/lib/utils';

export interface DropdownOption {
  value: string;
  label: string;
  icon?: React.ReactNode;
  disabled?: boolean;
}

interface UnifiedDropdownProps {
  options: DropdownOption[] | string[];
  value: string | string[];
  onChange: (value: string | string[]) => void;
  placeholder?: string;
  label?: string;
  error?: string;
  disabled?: boolean;
  required?: boolean;
  clearable?: boolean;
  multiple?: boolean;
  className?: string;
  buttonClassName?: string;
}

export function UnifiedDropdown({
  options,
  value,
  onChange,
  placeholder = "Select...",
  label,
  error,
  disabled = false,
  required = false,
  clearable = false,
  multiple = false,
  className = "",
  buttonClassName = ""
}: UnifiedDropdownProps) {
  const [isOpen, setIsOpen] = useState(false);
  const dropdownRef = useRef<HTMLDivElement>(null);
  const buttonRef = useRef<HTMLButtonElement>(null);

  // Normalize options
  const normalizedOptions: DropdownOption[] = options.map(opt => 
    typeof opt === 'string' ? { value: opt, label: opt } : opt
  );

  // Get selected option(s)
  const selectedValues = Array.isArray(value) ? value : [value].filter(Boolean);
  const selectedOptions = normalizedOptions.filter(opt => 
    selectedValues.includes(opt.value)
  );

  // Close on outside click
  useEffect(() => {
    const handleClickOutside = (e: MouseEvent) => {
      if (dropdownRef.current && !dropdownRef.current.contains(e.target as Node)) {
        setIsOpen(false);
      }
    };

    if (isOpen) {
      document.addEventListener('mousedown', handleClickOutside);
      document.addEventListener('keydown', handleEscape);
    }

    function handleEscape(e: KeyboardEvent) {
      if (e.key === 'Escape') setIsOpen(false);
    }

    return () => {
      document.removeEventListener('mousedown', handleClickOutside);
      document.removeEventListener('keydown', handleEscape);
    };
  }, [isOpen]);

  const handleSelect = (option: DropdownOption) => {
    if (option.disabled) return;

    if (multiple) {
      const newValues = selectedValues.includes(option.value)
        ? selectedValues.filter(v => v !== option.value)
        : [...selectedValues, option.value];
      onChange(newValues);
    } else {
      onChange(option.value);
      setIsOpen(false);
    }
  };

  const handleClear = (e: React.MouseEvent) => {
    e.stopPropagation();
    onChange(multiple ? [] : '');
  };

  const displayText = multiple
    ? selectedOptions.length > 0 
      ? `${selectedOptions.length} selected`
      : placeholder
    : selectedOptions[0]?.label || placeholder;

  return (
    <div className={cn("relative w-full", className)} ref={dropdownRef}>
      {label && (
        <label className="block text-sm font-medium text-gray-300 mb-2">
          {label} {required && <span className="text-red-500">*</span>}
        </label>
      )}
      
      <button
        ref={buttonRef}
        type="button"
        onClick={() => !disabled && setIsOpen(!isOpen)}
        disabled={disabled}
        className={cn(
          "w-full px-4 py-2.5 rounded-lg",
          "bg-gray-800/50 border border-gray-700",
          "text-left text-white",
          "flex items-center justify-between",
          "transition-all duration-200",
          !disabled && "hover:bg-gray-800/70 hover:border-gray-600",
          disabled && "opacity-50 cursor-not-allowed",
          isOpen && "ring-2 ring-blue-500/50 border-blue-500/50",
          error && "border-red-500",
          buttonClassName
        )}
      >
        <span className={cn(
          "truncate",
          !selectedOptions.length && "text-gray-400"
        )}>
          {displayText}
        </span>
        
        <div className="flex items-center gap-2 ml-2">
          {clearable && selectedValues.length > 0 && !disabled && (
            <X 
              className="w-4 h-4 text-gray-400 hover:text-white"
              onClick={handleClear}
            />
          )}
          <ChevronDown className={cn(
            "w-4 h-4 text-gray-400 transition-transform",
            isOpen && "rotate-180"
          )} />
        </div>
      </button>

      {error && (
        <p className="mt-1 text-sm text-red-500">{error}</p>
      )}

      {/* Dropdown Menu */}
      {isOpen && !disabled && (
        <div className={cn(
          "absolute z-50 w-full mt-2",
          "bg-gray-800 border border-gray-700 rounded-lg",
          "shadow-xl max-h-64 overflow-auto",
          "animate-in fade-in-0 zoom-in-95 duration-200"
        )}>
          {normalizedOptions.length === 0 ? (
            <div className="px-4 py-3 text-gray-400 text-center">
              No options available
            </div>
          ) : (
            normalizedOptions.map((option) => (
              <button
                key={option.value}
                type="button"
                onClick={() => handleSelect(option)}
                disabled={option.disabled}
                className={cn(
                  "w-full px-4 py-2.5 text-left",
                  "flex items-center justify-between",
                  "transition-colors duration-150",
                  "text-white",
                  !option.disabled && "hover:bg-gray-700/50",
                  option.disabled && "opacity-50 cursor-not-allowed",
                  selectedValues.includes(option.value) && "bg-gray-700/30"
                )}
              >
                <div className="flex items-center gap-3">
                  {option.icon && <span className="w-5 h-5">{option.icon}</span>}
                  <span>{option.label}</span>
                </div>
                {selectedValues.includes(option.value) && (
                  <Check className="w-4 h-4 text-blue-500" />
                )}
              </button>
            ))
          )}
        </div>
      )}
    </div>
  );
}
File 2: /client/src/components/ui/UnifiedSearch.tsx
typescript// UNIFIED SEARCH FOR NAVIGATION AND SEARCH BARS
import { useState, useRef, useEffect } from 'react';
import { Search, X, TrendingUp, Clock, Loader2 } from 'lucide-react';
import { cn } from '@/lib/utils';
import { useDebounce } from '@/hooks/useDebounce';
import { useNavigate } from 'wouter';

export interface SearchResult {
  id: string;
  type: 'product' | 'category' | 'page';
  title: string;
  subtitle?: string;
  url: string;
  image?: string;
  price?: string;
}

interface UnifiedSearchProps {
  placeholder?: string;
  className?: string;
  inputClassName?: string;
  showTrending?: boolean;
  showRecent?: boolean;
  apiEndpoint?: string;
  onSearch?: (query: string) => void;
  onSelect?: (result: SearchResult) => void;
  variant?: 'navbar' | 'page';
}

export function UnifiedSearch({
  placeholder = "Search equipment...",
  className = "",
  inputClassName = "",
  showTrending = true,
  showRecent = true,
  apiEndpoint = "/api/search",
  onSearch,
  onSelect,
  variant = 'navbar'
}: UnifiedSearchProps) {
  const [query, setQuery] = useState('');
  const [isOpen, setIsOpen] = useState(false);
  const [results, setResults] = useState<SearchResult[]>([]);
  const [loading, setLoading] = useState(false);
  const [recentSearches, setRecentSearches] = useState<string[]>([]);
  
  const searchRef = useRef<HTMLDivElement>(null);
  const inputRef = useRef<HTMLInputElement>(null);
  const debouncedQuery = useDebounce(query, 300);
  const [, navigate] = useNavigate();

  // Sample trending items (replace with API call)
  const trendingItems = ['Dumbbells', 'Bench Press', 'Protein', 'Yoga Mat'];

  // Load recent searches
  useEffect(() => {
    const recent = localStorage.getItem('recentSearches');
    if (recent) {
      setRecentSearches(JSON.parse(recent).slice(0, 5));
    }
  }, []);

  // Fetch search results
  useEffect(() => {
    if (debouncedQuery.length >= 2) {
      setLoading(true);
      fetch(`${apiEndpoint}?q=${encodeURIComponent(debouncedQuery)}`)
        .then(res => res.json())
        .then(data => {
          setResults(data.results || []);
          setLoading(false);
        })
        .catch(() => {
          setResults([]);
          setLoading(false);
        });
    } else {
      setResults([]);
    }
  }, [debouncedQuery, apiEndpoint]);

  // Close on outside click
  useEffect(() => {
    const handleClickOutside = (e: MouseEvent) => {
      if (searchRef.current && !searchRef.current.contains(e.target as Node)) {
        setIsOpen(false);
      }
    };

    if (isOpen) {
      document.addEventListener('mousedown', handleClickOutside);
    }

    return () => {
      document.removeEventListener('mousedown', handleClickOutside);
    };
  }, [isOpen]);

  const handleSearch = (searchQuery: string) => {
    // Save to recent
    const newRecent = [searchQuery, ...recentSearches.filter(s => s !== searchQuery)].slice(0, 5);
    setRecentSearches(newRecent);
    localStorage.setItem('recentSearches', JSON.stringify(newRecent));
    
    if (onSearch) {
      onSearch(searchQuery);
    } else {
      navigate(`/search?q=${encodeURIComponent(searchQuery)}`);
    }
    
    setIsOpen(false);
    setQuery('');
  };

  const handleSelect = (result: SearchResult) => {
    if (onSelect) {
      onSelect(result);
    } else {
      navigate(result.url);
    }
    setIsOpen(false);
    setQuery('');
  };

  return (
    <div ref={searchRef} className={cn("relative", className)}>
      <div className="relative">
        <Search className="absolute left-3 top-1/2 -translate-y-1/2 w-5 h-5 text-gray-400 pointer-events-none" />
        <input
          ref={inputRef}
          type="text"
          value={query}
          onChange={(e) => setQuery(e.target.value)}
          onFocus={() => setIsOpen(true)}
          onKeyPress={(e) => {
            if (e.key === 'Enter' && query) {
              handleSearch(query);
            }
          }}
          placeholder={placeholder}
          className={cn(
            "w-full pl-10 pr-10 py-2.5 rounded-lg",
            "bg-gray-800/50 border border-gray-700",
            "text-white placeholder-gray-400",
            "focus:outline-none focus:ring-2 focus:ring-blue-500/50",
            "transition-all duration-200",
            inputClassName
          )}
        />
        {query && (
          <button
            type="button"
            onClick={() => {
              setQuery('');
              inputRef.current?.focus();
            }}
            className="absolute right-3 top-1/2 -translate-y-1/2 text-gray-400 hover:text-white"
          >
            <X className="w-4 h-4" />
          </button>
        )}
      </div>

      {/* Search Results Dropdown */}
      {isOpen && (
        <div className={cn(
          "absolute z-50 w-full mt-2",
          "bg-gray-800 border border-gray-700 rounded-lg",
          "shadow-xl max-h-96 overflow-auto",
          variant === 'navbar' ? "min-w-[400px]" : "w-full"
        )}>
          {loading ? (
            <div className="p-6 text-center">
              <Loader2 className="w-6 h-6 animate-spin mx-auto text-gray-400" />
              <p className="mt-2 text-gray-400">Searching...</p>
            </div>
          ) : query.length >= 2 && results.length > 0 ? (
            <div>
              <div className="px-3 py-2 border-b border-gray-700">
                <p className="text-xs text-gray-400 uppercase tracking-wider">
                  Search Results
                </p>
              </div>
              {results.map(result => (
                <button
                  key={result.id}
                  onClick={() => handleSelect(result)}
                  className="w-full px-4 py-3 hover:bg-gray-700/50 transition-colors text-left flex items-center gap-3"
                >
                  {result.image && (
                    <img 
                      src={result.image} 
                      alt={result.title}
                      className="w-10 h-10 object-cover rounded"
                    />
                  )}
                  <div className="flex-1">
                    <div className="text-white font-medium">{result.title}</div>
                    {result.subtitle && (
                      <div className="text-sm text-gray-400">{result.subtitle}</div>
                    )}
                  </div>
                  {result.price && (
                    <div className="text-blue-400 font-semibold">{result.price}</div>
                  )}
                </button>
              ))}
            </div>
          ) : (
            <div>
              {showRecent && recentSearches.length > 0 && !query && (
                <div>
                  <div className="px-3 py-2 border-b border-gray-700 flex items-center gap-2">
                    <Clock className="w-3 h-3 text-gray-400" />
                    <p className="text-xs text-gray-400 uppercase tracking-wider">Recent</p>
                  </div>
                  {recentSearches.map((search, idx) => (
                    <button
                      key={idx}
                      onClick={() => {
                        setQuery(search);
                        handleSearch(search);
                      }}
                      className="w-full px-4 py-2.5 hover:bg-gray-700/50 text-left text-white transition-colors"
                    >
                      {search}
                    </button>
                  ))}
                </div>
              )}
              
              {showTrending && !query && (
                <div>
                  <div className="px-3 py-2 border-b border-gray-700 flex items-center gap-2">
                    <TrendingUp className="w-3 h-3 text-gray-400" />
                    <p className="text-xs text-gray-400 uppercase tracking-wider">Trending</p>
                  </div>
                  {trendingItems.map((item, idx) => (
                    <button
                      key={idx}
                      onClick={() => {
                        setQuery(item);
                        handleSearch(item);
                      }}
                      className="w-full px-4 py-2.5 hover:bg-gray-700/50 text-left text-white transition-colors"
                    >
                      {item}
                    </button>
                  ))}
                </div>
              )}

              {query.length > 0 && query.length < 2 && (
                <div className="p-4 text-center text-gray-400">
                  Type at least 2 characters to search
                </div>
              )}

              {query.length >= 2 && results.length === 0 && !loading && (
                <div className="p-4 text-center text-gray-400">
                  No results found for "{query}"
                </div>
              )}
            </div>
          )}
        </div>
      )}
    </div>
  );
}
File 3: /client/src/hooks/useDebounce.ts
typescriptimport { useState, useEffect } from 'react';

export function useDebounce<T>(value: T, delay: number): T {
  const [debouncedValue, setDebouncedValue] = useState(value);

  useEffect(() => {
    const handler = setTimeout(() => {
      setDebouncedValue(value);
    }, delay);

    return () => {
      clearTimeout(handler);
    };
  }, [value, delay]);

  return debouncedValue;
}

PHASE 3: UPDATE ALL COMPONENT REFERENCES
Navigation Component Fix
typescript// /client/src/components/Navigation.tsx
import { UnifiedDropdown } from '@/components/ui/UnifiedDropdown';
import { UnifiedSearch } from '@/components/ui/UnifiedSearch';
import { User, ShoppingCart, LogOut } from 'lucide-react';

// Replace user dropdown with:
<UnifiedDropdown
  options={[
    { value: 'dashboard', label: 'Dashboard', icon: <User className="w-4 h-4" /> },
    { value: 'orders', label: 'Order History' },
    { value: 'admin', label: 'Admin Dashboard' },
    { value: 'logout', label: 'Sign Out', icon: <LogOut className="w-4 h-4" /> }
  ]}
  value=""
  onChange={(value) => {
    if (value === 'logout') handleLogout();
    else navigate(`/${value}`);
  }}
  placeholder={user?.email || 'Account'}
  buttonClassName="!bg-transparent !border-0 !px-2"
/>

// Replace search bar with:
<UnifiedSearch
  placeholder="Search weightlifting equipment..."
  className="flex-1 max-w-xl"
  variant="navbar"
/>
Sell Equipment Form Fix
typescript// /client/src/pages/SellEquipment.tsx
import { UnifiedDropdown } from '@/components/ui/UnifiedDropdown';

// Replace condition dropdown:
<UnifiedDropdown
  label="Condition"
  required
  options={['Excellent', 'Good', 'Fair', 'Poor']}
  value={condition}
  onChange={setCondition}
  placeholder="Select condition"
/>

// Replace brand dropdown:
<UnifiedDropdown
  label="Brand"
  options={brands}
  value={brand}
  onChange={setBrand}
  placeholder="Search or select a brand..."
/>
Shop Page Search Fix
typescript// /client/src/pages/Shop.tsx
<UnifiedSearch
  placeholder="Search weightlifting equipment..."
  className="w-full mb-6"
  variant="page"
  onSearch={handleSearch}
/>

PHASE 4: ADD GLOBAL STYLES
Update /client/src/styles/globals.css
css/* Animation classes for dropdowns */
@keyframes animate-in {
  from {
    opacity: 0;
    transform: scale(0.95);
  }
  to {
    opacity: 1;
    transform: scale(1);
  }
}

.animate-in {
  animation: animate-in 200ms ease-out;
}

/* Scrollbar styling for dropdowns */
.overflow-auto::-webkit-scrollbar {
  width: 6px;
}

.overflow-auto::-webkit-scrollbar-track {
  background: rgba(31, 41, 55, 0.5);
}

.overflow-auto::-webkit-scrollbar-thumb {
  background: rgba(107, 114, 128, 0.5);
  border-radius: 3px;
}

.overflow-auto::-webkit-scrollbar-thumb:hover {
  background: rgba(107, 114, 128, 0.8);
}

/* Fix for dropdown z-index issues */
.z-50 {
  z-index: 50 !important;
}

PHASE 5: FIX ADMIN DASHBOARD
typescript// /client/src/pages/admin/Dashboard.tsx
import { UnifiedDropdown } from '@/components/ui/UnifiedDropdown';

// Replace ALL select elements with UnifiedDropdown:

// Status filter:
<UnifiedDropdown
  options={['All', 'Active', 'Inactive', 'Pending']}
  value={statusFilter}
  onChange={setStatusFilter}
  placeholder="Filter by status"
/>

// Bulk actions:
<UnifiedDropdown
  options={[
    { value: 'delete', label: 'Delete Selected' },
    { value: 'activate', label: 'Activate' },
    { value: 'deactivate', label: 'Deactivate' }
  ]}
  value=""
  onChange={handleBulkAction}
  placeholder="Bulk Actions"
  clearable
/>

PHASE 6: CLEANUP COMMANDS
bash# Run these commands in order:

# 1. Remove old packages
npm uninstall @radix-ui/react-dropdown-menu @radix-ui/react-select @radix-ui/react-popover react-select @headlessui/react cmdk

# 2. Clean install
rm -rf node_modules package-lock.json
npm install

# 3. Build to check for errors
npm run build

# 4. Search for any remaining old dropdown references
grep -r "Radix\|HeadlessUI\|react-select" --include="*.tsx" --include="*.ts"

# 5. Fix any TypeScript errors
npx tsc --noEmit

PHASE 7: TEST CHECKLIST
□ Navigation user dropdown opens and navigates correctly
□ Navigation search shows trending/recent items
□ Sell Equipment form dropdowns work
□ Shop page search filters products
□ Admin dashboard filters work
□ All dropdowns have consistent dark theme
□ No console errors
□ Mobile responsive
□ Keyboard navigation works (Tab, Enter, Escape)
□ Clear buttons work where enabled

EXPECTED RESULT:
After implementing these changes:

ONE UnifiedDropdown component for ALL dropdowns
ONE UnifiedSearch component for ALL search bars
Consistent dark glassmorphic styling
No more broken dropdowns or styling issues
Clean codebase with no duplicate dropdown code
Working user menu, forms, search, and admin panels

This will fix all the issues shown in your screenshots and provide a maintainable, unified dropdown system.