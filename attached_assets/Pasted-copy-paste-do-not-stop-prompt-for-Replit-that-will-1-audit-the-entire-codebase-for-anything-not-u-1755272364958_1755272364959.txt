copy-paste, do-not-stop prompt for Replit that will (1) audit the entire codebase for anything not using your SSOT locality system, (2) codemod/repair offenders, and (3) purge conflicting legacy code. It includes search passes, AST codemods, lint guardrails, and verification.

✅ Copy-paste into Replit (run sequentially)
You are refactoring the codebase to enforce a Single Source of Truth (SSOT) for Locality and purge all conflicting/legacy code. Follow these steps EXACTLY, produce the requested artifacts, and do not stop until all checks pass.

GOAL
- Every place that touches Locality/Eligibility/Fulfillment must go through the SSOT:
  ALLOWLIST MODULES:
    1) shared/locality.ts         // types, zip/validators, constants, SSOT_VERSION
    2) shared/geo.ts              // haversine + shared geo helpers
    3) shared/availability.ts     // computeEffectiveAvailability(productMode, userMode)
    4) server/services/localityService.ts  // getLocalityForRequest(req): LocalityResult
    5) client/src/hooks/useLocality.ts     // fetches /api/locality/status, exposes localityVersion
- All cart code uses V2 ONLY (legacy routes/hooks are forbidden).
- All other locality logic, duplicate helpers, and legacy cart code must be deleted or rewritten to call the SSOT.

SUCCESS CRITERIA
- `audit/locality-ssot-report.json` lists zero offenders at the end.
- All imports referencing legacy paths are removed or auto-fixed to SSOT modules.
- ESLint guardrails prevent reintroduction of legacy imports/usages.
- Unit + E2E tests pass; /api/locality/status contract is stable.
- Legacy cart route and legacy client cart hook do not exist or are hard-disabled (410).

======================================================================
PHASE 0 — Baseline Branch & Setup
======================================================================
1) Create a working branch:
   - git checkout -b chore/locality-ssot-enforcement

2) Ensure dev deps: ts-morph, eslint, eslint-plugin-import, @types/node, typescript, playwright/vitest as applicable.
   - If missing, add them.

3) Create a working dir for artifacts:
   - mkdir -p audit codemods scripts

======================================================================
PHASE 1 — Define What’s ALLOWED vs BANNED
======================================================================
Create `audit/locality-ssot-allowlist.json` with this content:
{
  "allowed": [
    "shared/locality.ts",
    "shared/geo.ts",
    "shared/availability.ts",
    "server/services/localityService.ts",
    "client/src/hooks/useLocality.ts"
  ],
  "bannedModules": [
    "server/lib/locality",
    "server/lib/localityChecker",
    "server/locality/getLocalityForRequest",
    "server/lib/geo",
    "client/src/hooks/use-cart",
    "server/routes/cart(\\.ts)?$"     // legacy cart route
  ],
  "bannedPatterns": [
    "\\bisLocal\\(",
    "\\bisLocalMiles\\(",
    "\\bLOCAL_ONLY\\b(?![\\s\\S]*modeFromProduct|computeEffectiveAvailability)",
    "\\bLOCAL_AND_SHIPPING\\b(?![\\s\\S]*modeFromProduct|computeEffectiveAvailability)",
    "/api/cart(?!\\.v2)",             // any non-v2 cart API usage
    "from\\s+['\"]server/lib/locality",
    "from\\s+['\"]server/lib/localityChecker",
    "from\\s+['\"]server/locality/getLocalityForRequest",
    "from\\s+['\"]client/src/hooks/use-cart",
    "from\\s+['\"]server/routes/cart['\"]",
    "require\\(['\"]server/routes/cart['\"]\\)"
  ]
}

======================================================================
PHASE 2 — Repo-wide Search & Report (ripgrep + node)
======================================================================
1) Run these searches and save outputs:

# Offending imports/usages
rg -n --no-heading -g '!node_modules' -e "from ['\"]server/lib/locality" -e "from ['\"]server/lib/localityChecker" -e "from ['\"]server/locality/getLocalityForRequest" -e "from ['\"]client/src/hooks/use-cart" -e "/api/cart(?!\\.v2)" -e "from ['\"]server/routes/cart['\"]" -e "require\\(['\"]server/routes/cart['\"]\\)" -e "\\bisLocal\\(" -e "\\bisLocalMiles\\(" -e "\\bLOCAL_ONLY\\b" -e "\\bLOCAL_AND_SHIPPING\\b" > audit/locality-offenders.rg.txt

# Any direct fetch to locality that bypasses api wrapper (optional):
rg -n --no-heading -g '!node_modules' -e "fetch\\(.*/api/locality/status" > audit/locality-fetch-bypass.rg.txt

# Places that use badges/chips/eligibility without computeEffectiveAvailability:
rg -n --no-heading -g '!node_modules' -e "Availability|Badge|Chip|ZipCheck|AddToCartButton|product-card|product-detail|product-grid" > audit/locality-ui-touchpoints.rg.txt

2) Create `scripts/scan-locality-offenders.ts` (ts-morph AST scan) to produce a machine-readable report:
- For every TS/TSX file (exclude node_modules):
  - Find ImportDeclarations whose moduleSpecifier matches any bannedModules.
  - Find CallExpressions named isLocal / isLocalMiles.
  - Find Identifier usage of LOCAL_ONLY / LOCAL_AND_SHIPPING outside shared/fulfillment.ts and shared/availability.ts.
  - Find usages of non-v2 cart paths or hooks.
- Output JSON: file, line, codeContext, offenderType, fixSuggestion.

(Implement; see PHASE 4 for code template.)

3) Run the scanner; write output to `audit/locality-ssot-report.json`.
- If any errors, continue; we will fix them next.

======================================================================
PHASE 3 — ESLint Guardrails (prevent regressions)
======================================================================
1) Update `.eslintrc.*` (or create) to include:

{
  "plugins": ["import"],
  "rules": {
    "no-restricted-imports": ["error", {
      "paths": [
        {"name": "server/lib/locality", "message": "Use server/services/localityService.ts (getLocalityForRequest) or shared/locality.ts."},
        {"name": "server/lib/localityChecker", "message": "Merged into server/services/localityService.ts."},
        {"name": "server/locality/getLocalityForRequest", "message": "Use server/services/localityService.ts."},
        {"name": "server/lib/geo", "message": "Use shared/geo.ts for shared helpers."},
        {"name": "client/src/hooks/use-cart", "message": "Use client/src/hooks/useCart.ts (V2) only."},
        {"name": "server/routes/cart", "message": "Legacy cart is forbidden. Use server/routes/cart.v2.ts only."}
      ]
    }],
    "no-restricted-syntax": ["error", {
      "selector": "CallExpression[callee.name='isLocal'], CallExpression[callee.name='isLocalMiles']",
      "message": "Locality checks must route through computeEffectiveAvailability + getLocalityForRequest."
    }]
  }
}

2) Add a pre-commit hook (.husky/pre-commit or package.json scripts) to run eslint + scanner:
- On failure, reject commit with a clear message to use SSOT modules.

======================================================================
PHASE 4 — Codemods (AST auto-fixes)
======================================================================
Create `codemods/fix-locality-imports.ts` with ts-morph. It must:
- Replace banned imports with SSOT equivalents.
- When replacing getLocalityForRequest imports, point to `server/services/localityService`.
- Replace `server/lib/geo` import with `shared/geo`.
- Replace `client/src/hooks/use-cart` with `client/src/hooks/useCart`.
- For direct references to legacy cart route, convert to cart.v2 or throw TODO tags.
- Add file-level TODO comments when logic needs human review (e.g., replacing isLocal(...) is non-trivial).

TEMPLATE (fill in paths as needed):

import { Project, SyntaxKind } from "ts-morph";
import * as fs from "fs";
const project = new Project({ tsConfigFilePath: "tsconfig.json", skipAddingFilesFromTsConfig: false });
project.addSourceFilesAtPaths(["**/*.ts", "**/*.tsx", "!node_modules/**"]);
const bannedToNew: Record<string, string> = {
  "server/lib/locality": "server/services/localityService",
  "server/lib/localityChecker": "server/services/localityService",
  "server/locality/getLocalityForRequest": "server/services/localityService",
  "server/lib/geo": "shared/geo",
  "client/src/hooks/use-cart": "client/src/hooks/useCart",
  "server/routes/cart": "server/routes/cart.v2"
};

const offenders: any[] = [];

for (const sf of project.getSourceFiles()) {
  let changed = false;

  // Rewrite banned imports
  sf.getImportDeclarations().forEach((imp) => {
    const spec = imp.getModuleSpecifierValue();
    const replacement = Object.keys(bannedToNew).find((b) => new RegExp(b).test(spec));
    if (replacement) {
      imp.setModuleSpecifier(bannedToNew[replacement]);
      changed = true;
      offenders.push({ file: sf.getFilePath(), offenderType: "banned-import", spec, fix: bannedToNew[replacement] });
    }
  });

  // Flag direct calls isLocal / isLocalMiles
  sf.forEachDescendant((node) => {
    if (node.getKind() === SyntaxKind.CallExpression) {
      const ce = node.asKind(SyntaxKind.CallExpression)!;
      const name = ce.getExpression().getText();
      if (name === "isLocal" || name === "isLocalMiles") {
        const { line } = sf.getLineAndColumnAtPos(ce.getStart());
        sf.insertText(ce.getStart(), "/* TODO(SSOT): replace with computeEffectiveAvailability(productMode, userMode). */ ");
        changed = true;
        offenders.push({ file: sf.getFilePath(), offenderType: "banned-call", name, line });
      }
    }
  });

  // Flag raw '/api/cart' (not .v2) usage
  sf.getText().replace(/\/api\/cart(?!\.v2)/g, (m, offset) => {
    const { line } = sf.getLineAndColumnAtPos(offset);
    sf.insertText(offset, "/* TODO(SSOT): legacy cart API -> use /api/cart.v2 */ ");
    changed = true;
    offenders.push({ file: sf.getFilePath(), offenderType: "legacy-cart-api", line });
    return m;
  });

  if (changed) sf.saveSync();
}

fs.writeFileSync("audit/locality-codemod-offenders.json", JSON.stringify(offenders, null, 2));

console.log("Codemod complete. Offenders recorded in audit/locality-codemod-offenders.json");

Run the codemod:
- ts-node codemods/fix-locality-imports.ts
- Expect: audit/locality-codemod-offenders.json created.

======================================================================
PHASE 5 — Manual Fixes for Business Logic (guided)
======================================================================
For each offender in `audit/locality-codemod-offenders.json` where TODO markers were inserted:
1) Replace any custom locality logic with:
   - const loc = await getLocalityForRequest(req) (server) OR useLocality() (client) 
   - const productMode = modeFromProduct(product)
   - const eff = computeEffectiveAvailability(productMode, loc.effectiveModeForUser)
   - Use `eff` for gating UI and server enforcement.

2) Replace any direct LOCAL_ONLY / LOCAL_AND_SHIPPING checks in UI with the shared `computeEffectiveAvailability`.

3) If a file fetches /api/locality/status manually, route it through `client/src/hooks/useLocality.ts` or your `apiJson` wrapper for consistent error handling and caching.

Mark each fixed file as done.

======================================================================
PHASE 6 — Purge Conflicting/Legacy Code
======================================================================
DELETE or HARD-DISABLE the following (if present):
- server/routes/cart.ts                   (legacy)  -> replace with 410 Gone, then delete once green.
- client/src/hooks/use-cart.tsx           (legacy)  -> delete; all code must use useCart.ts (V2).
- server/lib/locality.ts                  (duplicate) -> migrated into shared/geo.ts and localityService.
- server/lib/localityChecker.ts           -> merged into server/services/localityService.ts.
- server/locality/getLocalityForRequest.ts -> merged; file deleted.
- Any duplicated geo helpers now in shared/geo.ts.

If you hard-disable first:
  - Modify legacy route to return res.status(410).json({error:"LEGACY_ROUTE_FORBIDDEN"})
  - Log a metric when hit.
  - Remove after tests pass.

======================================================================
PHASE 7 — Contract & Types Validation
======================================================================
1) Verify `/api/locality/status` returns EXACT shape:

type LocalityStatusResponse = {
  status: 'LOCAL'|'OUT_OF_AREA'|'UNKNOWN';
  source: 'address'|'zip'|'ip'|'default';
  eligible: boolean;
  zip?: string;
  lat?: number; lon?: number;
  distanceMiles?: number;
  effectiveModeForUser: 'LOCAL_AND_SHIPPING'|'LOCAL_ONLY'|'SHIPPING_ONLY'|'NONE';
  reasons: string[];
  ssotVersion: string;
  asOfISO: string;
};

2) Ensure `shared/availability.ts` has:
- computeEffectiveAvailability(productMode, userMode) -> 'ADD_ALLOWED'|'PICKUP_ONLY'|'SHIPPING_ONLY'|'BLOCKED'

3) Ensure all cart mutations and checkout/shipping revalidate with:
- getLocalityForRequest(req)
- computeEffectiveAvailability()

======================================================================
PHASE 8 — Tests & CI
======================================================================
Add/Update tests:

Unit (Vitest/Jest):
- shared/availability.spec.ts : full matrix for userMode × productMode.
- localityService.spec.ts     : returns stable LocalityStatusResponse, includes ssotVersion, reasons[] non-empty on blocks.

API:
- GET /api/locality/status : 200 + exact typed shape; snapshot ssotVersion present.
- Cart V2: POST add local-only item while user is SHIPPING_ONLY -> 422 with reasons[].

E2E (Playwright):
- Change ZIP from LOCAL to OUT_OF_AREA -> cart auto-purges ineligible items, UI toast with reasons.
- PDP and Cart Drawer show matching availability; checkout re-blocks if invalid.

CI: run lints + scanner + tests. Fail build on offender regressions.

======================================================================
PHASE 9 — Final Audit & Artifact Collection
======================================================================
1) Re-run ripgrep searches (PHASE 2) and overwrite reports.
2) Re-run scripts/scan-locality-offenders.ts; overwrite audit/locality-ssot-report.json.
3) Confirm both files have ZERO offenses.
4) Produce a summary file `audit/locality-ssot-summary.md` containing:
   - Count of files modified
   - List of files deleted
   - Any manual TODOs remaining (should be none)
   - Confirmation that ESLint guardrails are active

======================================================================
PHASE 10 — Commit & PR Instructions
======================================================================
- git add .
- git commit -m "enforce locality SSOT: codemods, purge legacy cart/locality, guardrails, tests"
- Open PR with artifacts from /audit folder attached.
- In the PR body, paste the SUCCESS CRITERIA and tick all boxes.

DO NOT STOP until:
- All offenders = 0
- Tests pass
- ESLint passes
- Legacy routes/hooks removed or 410 + unreachable

Notes for you (context)

This script gives you both the detectors (ripgrep + ts-morph scanner), the fixers (codemod + manual guidance), and guardrails (ESLint + pre-commit).

It explicitly targets the legacy paths you listed and forces everything through:

server/services/localityService.ts (server truth),

shared/availability.ts (policy truth),

client/src/hooks/useLocality.ts (client truth),

shared/geo.ts (math truth).