Instructions to Fix Submissions Data Sync and Display
1. Verify Database Has Test Data
First, check if there are actually submissions in the database:
sql-- Run this query to check submissions
SELECT COUNT(*) as total_submissions FROM equipment_submissions;
SELECT * FROM equipment_submissions ORDER BY created_at DESC LIMIT 5;
2. Fix the Admin Dashboard Component
The dashboard seems to be using a different component. Update it to properly fetch submissions:
tsx// client/src/pages/admin/AdminDashboard.tsx or DeveloperDashboard.tsx

import { useQuery } from '@tanstack/react-query';
import { Package } from 'lucide-react';

export function DeveloperDashboard() {
  // Add submissions query
  const { data: submissions, isLoading: submissionsLoading } = useQuery({
    queryKey: ['admin-submissions-summary'],
    queryFn: async () => {
      const res = await fetch('/api/admin/submissions');
      if (!res.ok) throw new Error('Failed to fetch submissions');
      const data = await res.json();
      return data;
    }
  });
  
  // Extract counts
  const totalSubmissions = submissions?.total || 0;
  const pendingSubmissions = submissions?.pending || 0;
  
  // In the Equipment Submissions section
  return (
    <div>
      {/* ... other dashboard content ... */}
      
      <section className="mb-8">
        <h2 className="text-2xl font-bold mb-4">Equipment Submissions</h2>
        <p className="text-gray-400 mb-6">Review and manage equipment submissions</p>
        
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
          <Card className="p-6">
            {submissionsLoading ? (
              <div className="flex items-center justify-center h-40">
                <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-500"></div>
              </div>
            ) : submissions?.data && submissions.data.length > 0 ? (
              <div>
                <div className="flex justify-between items-center mb-4">
                  <h3 className="text-lg font-semibold">Recent Submissions</h3>
                  <Badge variant="secondary">{pendingSubmissions} pending</Badge>
                </div>
                <div className="space-y-3">
                  {submissions.data.slice(0, 5).map((submission) => (
                    <div key={submission.id} className="flex justify-between items-center p-3 bg-gray-800/50 rounded">
                      <div>
                        <p className="font-medium">{submission.equipmentName}</p>
                        <p className="text-sm text-gray-400">{submission.referenceNumber}</p>
                      </div>
                      <Badge variant={getStatusVariant(submission.status)}>
                        {submission.status}
                      </Badge>
                    </div>
                  ))}
                </div>
                <Link href="/admin/submissions" className="block mt-4">
                  <Button variant="outline" className="w-full">
                    View All Submissions
                  </Button>
                </Link>
              </div>
            ) : (
              <div className="text-center py-8">
                <Package className="mx-auto mb-4 text-gray-400" size={48} />
                <p className="text-gray-400 mb-4">No equipment submissions have been received yet.</p>
              </div>
            )}
          </Card>
          
          <Card className="p-6">
            <h3 className="text-lg font-semibold mb-4">Select a Submission</h3>
            <p className="text-gray-400">
              Click on a submission to view details and take action.
            </p>
            <Link href="/admin/submissions">
              <Button className="mt-4">
                Go to Submissions Manager
              </Button>
            </Link>
          </Card>
        </div>
      </section>
    </div>
  );
}
3. Debug and Fix API Endpoint
Add logging to verify the API is working:
ts// server/routes.ts - Add comprehensive logging

app.get('/api/admin/submissions', requireAdmin, async (req, res) => {
  try {
    console.log('Admin submissions endpoint called');
    console.log('User:', req.session.user);
    console.log('Query params:', req.query);
    
    const { status, search, isLocal, page = 1, limit = 20 } = req.query;
    
    // First, get total count
    const totalCount = await db
      .select({ count: count() })
      .from(equipmentSubmissions);
    
    console.log('Total submissions in DB:', totalCount[0]?.count);
    
    // Build query
    let query = db.select({
      submission: equipmentSubmissions,
      user: {
        name: users.name,
        email: users.email
      }
    })
    .from(equipmentSubmissions)
    .leftJoin(users, eq(equipmentSubmissions.userId, users.id));
    
    // Apply filters
    const conditions = [];
    if (status && status !== 'all') {
      conditions.push(eq(equipmentSubmissions.status, status));
    }
    
    if (conditions.length > 0) {
      query = query.where(and(...conditions));
    }
    
    // Execute query
    const submissions = await query
      .orderBy(desc(equipmentSubmissions.createdAt))
      .limit(Number(limit))
      .offset((Number(page) - 1) * Number(limit));
    
    console.log('Fetched submissions:', submissions.length);
    
    // Get status counts
    const statusCounts = await db
      .select({
        status: equipmentSubmissions.status,
        count: count()
      })
      .from(equipmentSubmissions)
      .groupBy(equipmentSubmissions.status);
    
    console.log('Status counts:', statusCounts);
    
    // Format response
    const response = {
      data: submissions.map(s => ({
        id: s.submission.id,
        referenceNumber: s.submission.referenceNumber,
        equipmentName: s.submission.equipmentName,
        brand: s.submission.brand,
        condition: s.submission.condition,
        askingPrice: s.submission.askingPrice,
        status: s.submission.status,
        createdAt: s.submission.createdAt,
        phoneNumber: s.submission.phoneNumber,
        email: s.submission.email,
        isLocal: s.submission.isLocal,
        distance: s.submission.distance,
        viewedByAdmin: s.submission.viewedByAdmin,
        userName: s.user?.name,
        userEmail: s.user?.email,
        images: s.submission.images
      })),
      total: Number(totalCount[0]?.count || 0),
      ...Object.fromEntries(
        statusCounts.map(sc => [sc.status, Number(sc.count)])
      )
    };
    
    console.log('Sending response with', response.data.length, 'submissions');
    res.json(response);
    
  } catch (error) {
    console.error('Error in admin submissions endpoint:', error);
    res.status(500).json({ 
      error: 'Failed to fetch submissions',
      details: error.message,
      data: [],
      total: 0
    });
  }
});
4. Create Test Data Script
Create a script to add test submissions:
ts// server/scripts/createTestSubmissions.ts

import { db } from '../db';
import { equipmentSubmissions, users } from '../../shared/schema';
import { generateUniqueReference } from '../utils/referenceGenerator';

async function createTestSubmissions() {
  try {
    // Get a test user
    const [testUser] = await db.select().from(users).limit(1);
    
    if (!testUser) {
      console.error('No users found. Please create a user first.');
      return;
    }
    
    // Create test submissions
    const testData = [
      {
        equipmentName: '45lb Olympic Barbell',
        brand: 'Rogue Fitness',
        condition: 'good',
        askingPrice: '250',
        weight: '45'
      },
      {
        equipmentName: 'Adjustable Dumbbells Set',
        brand: 'PowerBlock',
        condition: 'like-new',
        askingPrice: '400',
        weight: '90'
      },
      {
        equipmentName: 'Concept2 Rower Model D',
        brand: 'Concept2',
        condition: 'fair',
        askingPrice: '700',
        weight: '57'
      }
    ];
    
    for (const data of testData) {
      const referenceNumber = await generateUniqueReference(db);
      
      await db.insert(equipmentSubmissions).values({
        referenceNumber,
        userId: testUser.id,
        equipmentName: data.equipmentName,
        brand: data.brand,
        condition: data.condition,
        askingPrice: data.askingPrice,
        weight: data.weight,
        description: `Test submission for ${data.equipmentName}`,
        phoneNumber: '(828) 555-0123',
        email: testUser.email,
        userCity: 'Asheville',
        userState: 'NC',
        userZipCode: '28801',
        isLocal: true,
        distance: '5.2',
        status: 'pending',
        statusHistory: [{
          status: 'pending',
          timestamp: new Date().toISOString(),
          changedBy: 'system',
          notes: 'Test submission created'
        }],
        images: []
      });
      
      console.log(`Created test submission: ${referenceNumber}`);
    }
    
    console.log('âœ… Test submissions created successfully');
  } catch (error) {
    console.error('Error creating test submissions:', error);
  }
}

// Add to package.json scripts:
// "create-test-submissions": "tsx server/scripts/createTestSubmissions.ts"
5. Fix Authentication Check
Ensure the admin check is working correctly:
ts// server/auth.ts - Verify requireAdmin middleware

export const requireAdmin = (req: Request, res: Response, next: NextFunction) => {
  console.log('Admin check - User:', req.session?.user);
  console.log('Admin check - Role:', req.session?.user?.role);
  
  if (!req.session?.user) {
    return res.status(401).json({ error: 'Not authenticated' });
  }
  
  if (req.session.user.role !== 'admin' && req.session.user.role !== 'developer') {
    return res.status(403).json({ error: 'Admin access required' });
  }
  
  next();
};
6. Update Frontend to Show Loading and Error States
tsx// In the dashboard component where submissions are displayed

const SubmissionsSection = () => {
  const { data, isLoading, error, refetch } = useQuery({
    queryKey: ['admin-submissions'],
    queryFn: async () => {
      const res = await fetch('/api/admin/submissions', {
        credentials: 'include' // Important for session cookies
      });
      
      if (!res.ok) {
        const errorData = await res.json();
        throw new Error(errorData.error || 'Failed to fetch submissions');
      }
      
      return res.json();
    },
    retry: 2,
    onError: (error) => {
      console.error('Submissions fetch error:', error);
    }
  });
  
  if (isLoading) {
    return (
      <div className="flex justify-center items-center h-64">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500"></div>
      </div>
    );
  }
  
  if (error) {
    return (
      <div className="text-center py-8">
        <p className="text-red-400 mb-4">Error loading submissions: {error.message}</p>
        <Button onClick={() => refetch()} variant="outline">
          Retry
        </Button>
      </div>
    );
  }
  
  // Display data...
};
7. Create Comprehensive Debug Endpoint
ts// server/routes.ts - Add debug endpoint for admin

app.get('/api/admin/debug-submissions', requireAdmin, async (req, res) => {
  try {
    const counts = {
      total: await db.select({ count: count() }).from(equipmentSubmissions),
      byStatus: await db.select({
        status: equipmentSubmissions.status,
        count: count()
      }).from(equipmentSubmissions).groupBy(equipmentSubmissions.status),
      recent: await db.select().from(equipmentSubmissions)
        .orderBy(desc(equipmentSubmissions.createdAt))
        .limit(5)
    };
    
    res.json({
      database: 'connected',
      counts,
      timestamp: new Date().toISOString()
    });
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});
Instructions for Replit - Complete Sync Verification:

Run Database Check
bash# Check if submissions exist in database
npm run db:studio
# or run SQL query to check equipment_submissions table

Create Test Data
bash# Run the test data script
npm run create-test-submissions

Test API Endpoints
bash# Test as admin user
curl -X GET http://localhost:3000/api/admin/submissions \
  -H "Cookie: [your-session-cookie]"

# Test debug endpoint
curl -X GET http://localhost:3000/api/admin/debug-submissions \
  -H "Cookie: [your-session-cookie]"

Fix Component Data Flow

Update dashboard to use correct query key
Ensure authentication headers are sent
Add proper error handling
Display loading states


Verify Full Flow

Submit new equipment as regular user
Check it appears in database
Login as admin/developer
Verify it shows in dashboard
Click through to submissions manager
Ensure all data syncs correctly


Add Console Logging

Log API responses in browser console
Log database queries on server
Track data flow through components



This comprehensive approach will identify where the data sync is breaking and ensure submissions display correctly throughout the system.