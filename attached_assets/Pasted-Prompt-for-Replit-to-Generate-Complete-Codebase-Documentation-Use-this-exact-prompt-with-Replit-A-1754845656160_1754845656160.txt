Prompt for Replit to Generate Complete Codebase Documentation
Use this exact prompt with Replit:

"Analyze my entire Clean & Flip codebase and generate an EXTREMELY detailed documentation covering every single aspect. Create a comprehensive report with the following:
1. COMPLETE FILE STRUCTURE ANALYSIS

List EVERY file in the project with its purpose
Show the complete directory tree
Identify file sizes and last modified dates
Mark which files are actively used vs unused
List all dependencies in package.json with their versions

2. ROUTING DOCUMENTATION
Frontend Routes (React/Wouter)

List every route path with its component
Document route parameters and query strings
Show which routes are protected/public
List any dynamic routes
Document navigation flows between pages

Backend API Routes (Express)

List every API endpoint with method (GET/POST/PUT/DELETE)
Document required parameters for each endpoint
Show authentication requirements per endpoint
List request/response formats with examples
Document rate limiting per endpoint
Show which database tables each endpoint touches

3. DATABASE SCHEMA DOCUMENTATION

List EVERY table with ALL columns
Show data types, constraints, defaults for each column
Document all foreign key relationships
List all indexes
Show all unique constraints
Document any triggers or procedures
List enum values for all enum columns

4. COMPONENT INVENTORY
For EACH React Component:

Component name and file location
Props interface/types
State variables used
Hooks used (useState, useEffect, custom)
External dependencies
Child components rendered
Events handled
API calls made
CSS classes/styles applied

5. AUTHENTICATION & AUTHORIZATION FLOW

Complete login flow step-by-step
Session management details
Password hashing method
Token generation/validation
Google OAuth integration flow
Protected route logic
User role permissions matrix
Password reset flow

6. STATE MANAGEMENT

All React Context providers
What data each context holds
TanStack Query cache keys
WebSocket events and handlers
Local storage usage
Session storage usage

7. BUSINESS LOGIC DOCUMENTATION
Cart System:

Add to cart logic
Cart persistence method
Stock validation
Price calculation
Cart-to-order conversion

Checkout Process:

Step-by-step checkout flow
Payment processing with Stripe
Order creation logic
Inventory updates
Email notifications

Search System:

Search implementation details
PostgreSQL tsvector configuration
Search ranking logic
Filter implementation
Category filtering

Admin Features:

Product CRUD operations
Order management workflow
User management capabilities
Equipment submission review process
Dashboard metrics calculations

8. EXTERNAL INTEGRATIONS

Stripe: All API calls, webhooks, product sync
Cloudinary: Upload process, transformations
Resend: Email templates, sending logic
Neon Database: Connection pooling, SSL config

9. UI/UX SPECIFICATIONS
For Each Major UI Component:

Exact dimensions (height, width, padding)
Color values used
Font sizes and weights
Border radius values
Shadow specifications
Hover/active states
Mobile responsive breakpoints
Animation/transition details

10. FORMS DOCUMENTATION

List every form in the application
Field validation rules
Error message text
Submit handlers
Success/error flows

11. SECURITY IMPLEMENTATIONS

CORS configuration
Rate limiting rules
Input sanitization methods
SQL injection prevention
XSS protection measures
File upload restrictions
Session security settings

12. PERFORMANCE OPTIMIZATIONS

Lazy loading implementations
Image optimization settings
Database query optimizations
Caching strategies
Bundle splitting configuration

13. ERROR HANDLING

Global error boundaries
API error responses
Database error handling
User-facing error messages
Logging configuration

14. WEBSOCKET IMPLEMENTATION

All event types
Client connection management
Message formats
Broadcast logic
Reconnection strategy

15. BUILD & DEPLOYMENT

Build process steps
Environment variables required
Deployment configuration
Database migration process
Production vs development differences

16. CODE PATTERNS & STANDARDS

Naming conventions used
File organization patterns
Component composition patterns
Reusable utilities
Custom hooks implementations

17. MISSING OR BROKEN FEATURES

Non-functional components
TODO comments in code
Incomplete implementations
Deprecated code still present
Console errors/warnings

18. CONFIGURATION FILES

Content of .env variables needed
tsconfig.json settings
vite.config.ts configuration
tailwind.config.ts customizations
drizzle.config.ts settings

19. API RESPONSE FORMATS
Document the EXACT response format for every API endpoint including:

Success response structure
Error response structure
Status codes used
Example responses

20. USER FLOWS
Document complete user journeys:

New user registration flow
Product browsing to purchase flow
Admin product creation flow
Return/refund request flow
Equipment submission flow

21. DATA VALIDATION RULES

Email format requirements
Password complexity rules
Phone number formats
Address validation
Payment validation

22. TESTING TOUCHPOINTS

Critical paths that need testing
Edge cases to consider
Browser compatibility requirements
Mobile device testing needs

Format this as a structured markdown document with clear headings, code examples where relevant, and tables for structured data. Be EXTREMELY thorough - I need to understand every single aspect of how this application works, every file's purpose, every function's logic, and every component's behavior. Include file paths, function names, variable names, and any other specific implementation details.
Start with a table of contents, then provide the complete analysis. If you find any inconsistencies, deprecated code, or potential improvements, note them in a separate section."