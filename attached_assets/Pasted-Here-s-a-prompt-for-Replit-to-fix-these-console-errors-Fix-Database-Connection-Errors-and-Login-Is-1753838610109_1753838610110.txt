Here's a prompt for Replit to fix these console errors:

Fix Database Connection Errors and Login Issues
I'm seeing critical errors in the console that need to be fixed:
1. Database Connection Termination Error
error: terminating connection due to administrator command
This Neon database connection is being forcibly closed.
Fixes needed:
javascript// Add connection error handling and reconnection logic
const neonConfig = {
  connectionString: process.env.DATABASE_URL,
  max: 10,
  idleTimeoutMillis: 30000, // Increase from 10000
  connectionTimeoutMillis: 10000, // Add connection timeout
  // Add retry logic
  retry: {
    max: 3,
    backoff: true
  }
};

// Implement connection pool error handling
pool.on('error', (err, client) => {
  console.error('Unexpected error on idle client', err);
  // Don't exit the application
});

// Add graceful shutdown
process.on('SIGTERM', async () => {
  await pool.end();
});
2. Login Failing - "Invalid email or password"
The login is failing, likely due to case sensitivity issues.
Fix the login handler:
javascript// In the login endpoint
app.post('/api/login', async (req, res) => {
  const { email, password } = req.body;
  
  // Normalize email to lowercase
  const normalizedEmail = email.toLowerCase().trim();
  
  try {
    // Query with case-insensitive email
    const user = await db.query(
      'SELECT * FROM users WHERE LOWER(email) = LOWER($1)',
      [normalizedEmail]
    );
    
    if (!user) {
      return res.status(401).json({ message: 'Invalid email or password' });
    }
    
    // Verify password
    const validPassword = await bcrypt.compare(password, user.password_hash);
    
    if (!validPassword) {
      return res.status(401).json({ message: 'Invalid email or password' });
    }
    
    // Success - create session
  } catch (error) {
    console.error('Login error:', error);
    res.status(500).json({ message: 'Login failed' });
  }
});
3. WebSocket Connection Issues
The WebSocket connection to Neon is closing unexpectedly.
Add connection pooling with better error handling:
javascript// database.js or wherever you initialize the connection
import { neon } from '@neondatabase/serverless';
import { Pool } from 'pg';

let pool;

export function getPool() {
  if (!pool) {
    pool = new Pool({
      connectionString: process.env.DATABASE_URL,
      ssl: { rejectUnauthorized: false },
      max: 20,
      idleTimeoutMillis: 30000,
      connectionTimeoutMillis: 10000,
    });
    
    // Handle pool errors
    pool.on('error', (err) => {
      console.error('Database pool error:', err);
    });
    
    pool.on('connect', () => {
      console.log('Database connected');
    });
  }
  
  return pool;
}

// Use in queries
export async function query(text, params) {
  const pool = getPool();
  const start = Date.now();
  
  try {
    const res = await pool.query(text, params);
    const duration = Date.now() - start;
    console.log('Executed query', { text, duration, rows: res.rowCount });
    return res;
  } catch (error) {
    console.error('Database query error:', error);
    throw error;
  }
}
4. Add Connection Keep-Alive
Prevent connections from timing out:
javascript// Add to your database configuration
const dbConfig = {
  // ... existing config
  keepAlive: true,
  keepAliveInitialDelayMillis: 10000,
  statement_timeout: 30000, // 30 seconds
  query_timeout: 30000,
};

// Implement a connection test
setInterval(async () => {
  try {
    await pool.query('SELECT 1');
  } catch (err) {
    console.error('Keep-alive query failed:', err);
  }
}, 60000); // Every minute
5. Fix Case Sensitivity in User Lookup
Update all user queries to be case-insensitive:
javascript// Registration - store email as lowercase
const newUser = {
  email: email.toLowerCase().trim(),
  // ... other fields
};

// Any user lookup
const findUserByEmail = async (email) => {
  return await query(
    'SELECT * FROM users WHERE LOWER(email) = $1',
    [email.toLowerCase().trim()]
  );
};
6. Add Better Error Logging
javascript// Wrap all database operations
async function safeQuery(queryFn) {
  try {
    return await queryFn();
  } catch (error) {
    if (error.code === '57P01') {
      console.error('Database connection terminated - attempting reconnect');
      // Attempt to reconnect
      pool = null; // Force new connection
      return await queryFn(); // Retry once
    }
    throw error;
  }
}
Summary of Required Changes:

Increase connection timeouts
Add connection error handling and retry logic
Fix email case sensitivity in login
Implement connection pooling properly
Add keep-alive to prevent timeouts
Better error logging and recovery

Please implement these fixes to resolve the database connection issues and login problems.