Fix Screen Jitter/Jump Issues - Instructions for Replit
1. SCROLLBAR COMPENSATION (Most Common Cause)
css/* Add to global CSS to prevent layout shift when scrollbar appears/disappears */
html {
  overflow-y: scroll; /* Always show scrollbar */
}

/* OR use scrollbar-gutter */
html {
  scrollbar-gutter: stable;
}

/* For modal open states */
body.modal-open {
  overflow: hidden;
  padding-right: 15px; /* Compensate for scrollbar width */
}

/* Detect scrollbar width dynamically */
:root {
  --scrollbar-width: calc(100vw - 100%);
}

body.modal-open {
  padding-right: var(--scrollbar-width);
}
2. FIX MODAL/DIALOG COMPONENTS
typescript// In your Modal component, add scroll lock handling
import { useEffect } from 'react';

export function Modal({ isOpen, children }) {
  useEffect(() => {
    if (isOpen) {
      // Store original padding
      const originalPadding = document.body.style.paddingRight;
      const scrollbarWidth = window.innerWidth - document.documentElement.clientWidth;
      
      // Lock body scroll and compensate for scrollbar
      document.body.style.overflow = 'hidden';
      document.body.style.paddingRight = `${scrollbarWidth}px`;
      
      // Also fix any fixed elements
      const fixedElements = document.querySelectorAll('.fixed, nav, header');
      fixedElements.forEach(el => {
        el.style.paddingRight = `${scrollbarWidth}px`;
      });
      
      return () => {
        // Restore original state
        document.body.style.overflow = '';
        document.body.style.paddingRight = originalPadding;
        fixedElements.forEach(el => {
          el.style.paddingRight = '';
        });
      };
    }
  }, [isOpen]);
  
  // Modal JSX...
}
3. PREVENT LAYOUT SHIFT ON DROPDOWNS
css/* For dropdown menus */
.dropdown-menu {
  position: absolute;
  transform-origin: top;
  /* Use transform instead of display for smoother transitions */
  transform: scaleY(0);
  opacity: 0;
  transition: transform 0.2s ease, opacity 0.2s ease;
}

.dropdown-menu.open {
  transform: scaleY(1);
  opacity: 1;
}

/* Prevent container resize */
.dropdown-container {
  position: relative;
  /* Reserve space to prevent jump */
  min-height: 40px; /* or whatever your button height is */
}
4. FIX BUTTON CLICK JITTER
css/* Prevent button movement on click */
button, .btn {
  /* Remove outline that can cause shift */
  outline: none;
  
  /* Consistent focus styles that don't move layout */
  position: relative;
  transition: transform 0.1s ease;
}

button:focus-visible {
  /* Use box-shadow instead of border for focus */
  box-shadow: 0 0 0 2px rgba(59, 130, 246, 0.5);
}

button:active {
  /* Small scale instead of position change */
  transform: scale(0.98);
}

/* Prevent text selection on double-click */
button {
  user-select: none;
  -webkit-user-select: none;
}
5. GLOBAL ANTI-JITTER STYLES
css/* Add to your global styles */
* {
  /* Prevent margin collapse issues */
  margin-top: 0;
}

/* Smooth all transitions */
* {
  transition-property: none;
}

/* Only transition specific properties */
.smooth-transition {
  transition-property: opacity, transform;
  transition-duration: 200ms;
  transition-timing-function: ease-out;
}

/* Prevent layout shift from focus outlines */
*:focus {
  outline: none;
}

*:focus-visible {
  outline: 2px solid transparent;
  outline-offset: 2px;
  box-shadow: 0 0 0 2px rgba(59, 130, 246, 0.5);
}
6. RADIX UI / HEADLESS UI FIXES
If using component libraries:
css/* Radix UI Dialog fix */
[data-radix-portal] {
  position: fixed !important;
}

/* Headless UI transition fix */
[data-headlessui-state="open"] {
  animation: none !important;
}
7. REACT PORTAL FIXES
typescript// For any portal-based components (modals, tooltips, dropdowns)
import { createPortal } from 'react-dom';

function PortalComponent({ children }) {
  // Create a fixed container for portals
  useEffect(() => {
    const portalRoot = document.getElementById('portal-root');
    if (!portalRoot) {
      const div = document.createElement('div');
      div.id = 'portal-root';
      div.style.position = 'fixed';
      div.style.top = '0';
      div.style.left = '0';
      div.style.zIndex = '9999';
      document.body.appendChild(div);
    }
  }, []);
  
  return createPortal(children, document.getElementById('portal-root'));
}
8. COMPREHENSIVE MODAL FIX
typescript// Complete modal implementation without jitter
export function Modal({ isOpen, onClose, children }) {
  useEffect(() => {
    if (isOpen) {
      // Calculate scrollbar width
      const scrollbarWidth = window.innerWidth - document.documentElement.clientWidth;
      
      // Store original values
      const originalOverflow = document.body.style.overflow;
      const originalPaddingRight = document.body.style.paddingRight;
      
      // Apply fixes
      document.body.style.overflow = 'hidden';
      document.body.style.paddingRight = `${scrollbarWidth}px`;
      
      // Fix header/nav if it's fixed
      const header = document.querySelector('header, nav');
      if (header) {
        header.style.paddingRight = `${scrollbarWidth}px`;
      }
      
      // Cleanup function
      return () => {
        document.body.style.overflow = originalOverflow;
        document.body.style.paddingRight = originalPaddingRight;
        if (header) {
          header.style.paddingRight = '';
        }
      };
    }
  }, [isOpen]);

  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 z-50 overflow-y-auto">
      <div className="flex min-h-screen items-center justify-center">
        {/* Backdrop */}
        <div 
          className="fixed inset-0 bg-black/50 transition-opacity"
          onClick={onClose}
        />
        
        {/* Modal content */}
        <div className="relative bg-white rounded-lg shadow-xl transform transition-all">
          {children}
        </div>
      </div>
    </div>
  );
}
9. CSS RESET FOR SMOOTH EXPERIENCE
css/* Add to the top of your global CSS */
html {
  scroll-behavior: smooth;
  overflow-y: scroll; /* Always show scrollbar */
}

body {
  overflow-x: hidden;
  position: relative;
}

/* Prevent all default animations initially */
@media (prefers-reduced-motion: reduce) {
  * {
    animation-duration: 0.01ms !important;
    animation-iteration-count: 1 !important;
    transition-duration: 0.01ms !important;
  }
}
10. DEBUG HELPERS
Add temporarily to identify issues:
css/* Highlight layout shifts */
* {
  outline: 1px solid rgba(255, 0, 0, 0.1);
}

/* Log when body styles change */
body {
  transition: padding-right 0.3s ease;
  background-color: rgba(255, 0, 0, 0.05); /* Will flash red on change */
}
QUICK CHECKLIST

Add overflow-y: scroll to html
Update all Modal components with scrollbar compensation
Use transform instead of display for dropdowns
Remove focus outlines that cause shifts
Add user-select: none to interactive elements
Fix any fixed position headers when modals open
Use consistent transition properties
Test with browser DevTools open (different scrollbar behavior)

These fixes will eliminate 99% of jitter/jump issues when interacting with UI elements!