TO: REPLIT — EXACT, END-TO-END INSTRUCTIONS
0) Immediate security: rotate DB passwords

We disclosed DSNs. In both Neon projects (dev + prod):

Roles → neondb_owner → Reset password.

Use the pooled hosts for all app connections (host contains -pooler.).

Build the new DSNs (keep sslmode=require, remove any channel_binding=require param):

PROD (muddy-moon, us-east-2, pooled)
postgresql://neondb_owner:<NEW_PROD_PASS>@ep-muddy-moon-…-pooler.c-2.us-east-2.aws.neon.tech/neondb?sslmode=require

DEV (lingering-flower, us-west-2, pooled)
postgresql://neondb_owner:<NEW_DEV_PASS>@ep-lingering-flower-…-pooler.c-2.us-west-2.aws.neon.tech/neondb?sslmode=require

NOTE: the password authentication failed crashes you saw came from DSNs using channel binding (unsupported with Neon serverless driver). Removing it is required.

1) Secrets: final, canonical list (delete everything else)
A) Deployment (Production) secrets

Keep only these (exact names; case-sensitive):

APP_ENV = production

PROD_DATABASE_URL = new prod pooled DSN

SESSION_SECRET

RESEND_API_KEY

RESEND_FROM

SUPPORT_TO

STRIPE_SECRET_KEY

STRIPE_WEBHOOK_SECRET (keep if webhooks are actually used; otherwise delete)

CLOUDINARY_API_KEY

CLOUDINARY_API_SECRET

CLOUDINARY_CLOUD_NAME

GOOGLE_CLIENT_ID

GOOGLE_CLIENT_SECRET

VITE_STRIPE_PUBLIC_KEY

VITE_GEOAPIFY_API_KEY

Delete from Deployment if present:
DATABASE_URL, DEV_DATABASE_URL, DATABASE_URL_PROD, any PG* vars (PGHOST, PGUSER, PGPASSWORD, PGDATABASE, PGPORT), EXPECTED_DB_HOST, FRONTEND_URL, APP_URL, NODE_ENV, any duplicate/unused keys.

B) Account/Workspace (Development) secrets

Keep only:

APP_ENV = development

DEV_DATABASE_URL = new dev pooled DSN

plus the same non-DB keys you need locally (SESSION_SECRET, RESEND_API_KEY, CLOUDINARY_*, STRIPE_SECRET_KEY, VITE_STRIPE_PUBLIC_KEY, VITE_GEOAPIFY_API_KEY, GOOGLE_CLIENT_*).

Delete from Account if present:
DATABASE_URL, any PG* vars, EXPECTED_DB_HOST, duplicates.

C) Clear the “9 secrets out of sync” banner

Go to Deployments → Secrets:

For each “out of sync” item not in the lists above → ⋮ → Remove from workspace.

If any required key is missing → Add secret with the correct value.
The banner should disappear when all keys match the canonical lists.

2) Run command (production)

In Deployments → Settings → Run command set exactly:

NODE_ENV=production node dist/index.js


Do not set or export any DB envs here. They must come from Deployment secrets.

3) Code changes: enforce 2-URL model and hard guards

Goal: No code may read DATABASE_URL, PGHOST, etc. Only PROD_DATABASE_URL / DEV_DATABASE_URL and APP_ENV.

A) Create/replace server/config/database.ts
type AppEnv = 'production' | 'development';

const APP_ENV = (process.env.APP_ENV || 'development') as AppEnv;

const PROD = process.env.PROD_DATABASE_URL?.trim();
const DEV  = process.env.DEV_DATABASE_URL?.trim();

if (APP_ENV === 'production' && !PROD) {
  throw new Error('PROD_DATABASE_URL is required when APP_ENV=production');
}
if (APP_ENV === 'development' && !DEV) {
  throw new Error('DEV_DATABASE_URL is required when APP_ENV=development');
}

export const DATABASE_URL =
  APP_ENV === 'production' ? (PROD as string) : (DEV as string);

export const getDbHost = () => new URL(DATABASE_URL).host;
export const getAppEnv = () => APP_ENV;

B) Add a production guard in server/index.ts (before DB init)
import { DATABASE_URL, getDbHost, getAppEnv } from './config/database';

const env = getAppEnv();
const host = getDbHost();

if (env === 'production') {
  // Guard: production must be on the muddy-moon pooled host
  if (!host.includes('muddy-moon') || !host.includes('pooler')) {
    console.error('[CRITICAL] ❌ Production attempted to use non-prod DB host:', host);
    process.exit(1);
  }
  console.log('[PRODUCTION] ✅ Using production DB host:', host);
} else {
  console.log('[DEV] Using development DB host:', host);
}

C) Migrations behavior

Do not auto-run schema migrations on every boot in production. Gate them:

Read RUN_MIGRATIONS and only run when RUN_MIGRATIONS=true.

Default is off.

When you intentionally migrate prod: temporarily add RUN_MIGRATIONS=true to Deployment secrets → deploy once → remove it → redeploy.

D) Purge legacy env references

In the Replit shell, run and fix anything that prints:

rg -n -g '!node_modules' 'process\.env\.(DATABASE_URL|PGHOST|PGUSER|PGPASSWORD|PGDATABASE|PGPORT|EXPECTED_DB_HOST)'


Also remove typos/dupes:

rg -n -g '!node_modules' '(DATABASE_URL_PROD|DATABASE_URL_DEV)'

E) Remove queries referencing dropped columns

Errors showed references to removed columns: profile_address_id, onboarding_completed_at. Remove or refactor any code that selects/joins/updates those.

rg -n -g '!node_modules' '(profile_address_id|onboarding_completed_at)'


Fix the SQL/Drizzle queries accordingly and recompile.

4) Neon sanity

Verify pooled hosts are used in both DSNs (contain -pooler.).

In Neon → Branches/Projects, confirm dev/prod are separate projects/branches.

(Optional) Create application roles (later): app_user_prod and app_user_dev with least privileges; rotate secrets again, and stop using the owner role at runtime.

5) Deploy flow (one time)

Apply the code changes above and push the build (ensure dist/ is current).

Update Deployment secrets with the new PROD_DATABASE_URL and APP_ENV=production.

Ensure no DEV_DATABASE_URL or DATABASE_URL in Deployment.

Deploy. Logs must show:

APP_ENV: production (your banner does this)

[PRODUCTION] ✅ Using production DB host: ep-muddy-moon-...-pooler...

No password/auth failures, no schema missing-column errors.

If you still see missing-column errors and you removed those fields from code, your prod DB schema is behind. Proceed to 6).

6) If schema is out-of-date in prod (choose one)

Option A — Apply migrations to prod

Temporarily set RUN_MIGRATIONS=true in Deployment secrets.

Deploy once; verify [MIGRATIONS] complete successfully.

Remove RUN_MIGRATIONS and redeploy.

Option B — Reset prod to a clean schema (data destructive)

Create a fresh Neon branch/project for prod.

Run migrations there from a local machine.

Point PROD_DATABASE_URL to that new branch’s pooled DSN.

Keep the old branch as a snapshot backup.

7) Acceptance checklist (must all pass)

 Deployment “Secrets out of sync” banner is gone.

 rg finds no references to DATABASE_URL, PG*, EXPECTED_DB_HOST.

 Production logs show the muddy-moon pooled host and never the dev host.

 No password authentication failed or channel binding errors.

 No queries reference profile_address_id or onboarding_completed_at.

 App boots once and stays healthy (no crash loop).

 (If webhooks enabled) Stripe webhook succeeds.

 Contact form (Resend) sends successfully.

8) Troubleshooting quick refs

Auth failed (NeonDbError)
→ Wrong password, or DSN includes channel_binding=require, or non-pooled host. Fix DSN.

App exits immediately
→ Production guard detected wrong DB host. Check PROD_DATABASE_URL.

Missing columns
→ Code still selects removed columns or prod schema is not migrated. See §3E and §6.

“Secrets out of sync” won’t clear
→ You still have extra keys not in the canonical lists. Remove them from the Deployment screen.

9) Notes on client keys

Frontend must use only VITE_* keys at build-time (VITE_STRIPE_PUBLIC_KEY, VITE_GEOAPIFY_API_KEY).
Do not expose server secrets (Stripe secret, DB, session) to the client.

Perform steps 0 → 9 in order. After this, production can only boot on the muddy-moon pooled Neon DB, development only uses lingering-flower pooled, legacy secrets are removed, migrations are controlled, and the prior crashes and schema errors are eliminated.