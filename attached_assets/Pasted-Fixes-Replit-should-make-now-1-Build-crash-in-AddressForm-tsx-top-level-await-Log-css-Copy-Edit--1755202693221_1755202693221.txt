Fixes Replit should make now
1) Build crash in AddressForm.tsx (top-level await)
Log

css
Copy
Edit
Pre-transform error: Unexpected reserved word 'await' (78:8)
... AddressForm.tsx:78
You’re using await inside a non-async scope (likely directly in a component body or a non-async callback).

Fix (make the surrounding function async or wrap it in an IIFE).
If this is inside the submit handler, do this:

tsx
Copy
Edit
// AddressForm.tsx (fix)
const onSubmit = form.handleSubmit(async (values) => {
  // ...your existing submit logic

  if (form.getValues('setDefault')) {
    await Promise.all([
      queryClient.invalidateQueries({ queryKey: ['addresses'] }),
      queryClient.invalidateQueries({ queryKey: ['cart'] }),
      queryClient.invalidateQueries({ queryKey: ['user'] }),
    ]);
  }
});
If that block must stay in a non-async scope (e.g., inside useEffect or plain component code), wrap it:

tsx
Copy
Edit
if (form.getValues('setDefault')) {
  (async () => {
    await Promise.all([
      queryClient.invalidateQueries({ queryKey: ['addresses'] }),
      queryClient.invalidateQueries({ queryKey: ['cart'] }),
      queryClient.invalidateQueries({ queryKey: ['user'] }),
    ]);
  })();
}
Also: do not use window events to “refresh” pages; rely on those three React Query invalidations instead (you already noted this in comments).

2) Cart add/remove flapping for LOCAL_ONLY items
Logs show we POST /api/cart/items (200), then immediately delete the same item via DELETE /api/cart/items/:id. That means we’re allowing an ineligible add, then cleaning it up. It feels like a race and causes confusing UX.

Server-side fix (block early and return an error):

ts
Copy
Edit
// server: POST /api/cart/items
const product = await db.products.getById(productId);
if (!product) return res.status(404).json({ error: "NOT_FOUND" });

if (product.fulfillment_mode === "LOCAL_ONLY") {
  const isLocal = await localityService.isLocal(zip ?? req.session.zip);
  if (!isLocal) {
    return res.status(409).json({
      error: "LOCAL_ONLY_NOT_ELIGIBLE",
      message: "This product is only available for local delivery in your area.",
    });
  }
}

// … proceed to insert the line item and return 201/200
Client-side fix (don’t “optimistically add then delete”):
In AddToCartButton (or the mutation hook), treat 409 specially:

ts
Copy
Edit
onError: (err: any) => {
  if (err?.response?.status === 409 &&
      err?.response?.data?.error === "LOCAL_ONLY_NOT_ELIGIBLE") {
    toast({
      title: "Not available in your area",
      description: "This item is local delivery only.",
      variant: "destructive"
    });
    return;
  }
  // …default error handling
}
Remove any code that “auto-prunes” an item after adding it. The server should prevent the add entirely.

3) Checkout refresh loops (stability)
Earlier you reported an endless refresh on checkout; this usually comes from effects that call navigate('/checkout') or window.location.reload() when queries refetch, or from window events.

Do this across Cart/Checkout:

Never use window.location = … or custom window events for cart changes.

Use React Query and WS only.

In checkout, disable noisy refetch triggers:

ts
Copy
Edit
useQuery({
  queryKey: ['cart'],
  queryFn: fetchCart,
  refetchOnWindowFocus: false,
  refetchOnReconnect: false,
  retry: 1,
  staleTime: 30_000
});
Guard any redirecting useEffect with a first-render ref:

ts
Copy
Edit
const first = useRef(true);
useEffect(() => {
  if (first.current) { first.current = false; return; }
  // …react to real changes only, no redirects unless necessary
}, [/* deps */]);
4) WebSocket payload shape — keep it consistent
We previously aligned around:

json
Copy
Edit
{ "type": "product:update", "payload": { "id": "uuid", ... } }
Verify the server publish is exactly that, and the client listener uses .type (not .topic). Search for any remaining topic usages and replace with type.

5) Performance warnings (slow CSS / dev boot)
You have recurring “slow request” warnings for index.css and main.tsx in dev. Typical culprits: Tailwind scanning too many files and Vite not pre-bundling heavy deps.

Tailwind: tighten the content globs

js
Copy
Edit
// tailwind.config.cjs or .js
content: [
  "./index.html",
  "./client/src/**/*.{ts,tsx,js,jsx}",
  "./shared/**/*.{ts,tsx}"
],
Avoid **/* at repo root.

Vite config hygiene

ts
Copy
Edit
// vite.config.ts
export default defineConfig({
  server: { hmr: true },
  css: { devSourcemap: false },
  optimizeDeps: {
    include: ["lucide-react", "framer-motion", "@radix-ui/react-*"],
  },
  cacheDir: "node_modules/.vite", // ensure persistent cache
});
6) Local-only enforcement in totals
Make sure totals never include shipping when any line is LOCAL_ONLY.

Server totals builder:

ts
Copy
Edit
const hasLocalOnly = cart.items.some(i => i.fulfillment_mode === "LOCAL_ONLY");
const shippingCost = hasLocalOnly
  ? 0
  : await shippingService.quote(cart.items.filter(i => i.fulfillment_mode === "LOCAL_AND_SHIPPING"));
Checkout UI:

Hide shipping selector when hasLocalOnly === true.

Show banner: “Local order — delivery ETA 24–48 hours.”

7) Graceful unauthenticated state
You have a single 401 /api/user from a headless request. Ensure the client hook returns { user: null } and does not throw on 401.

ts
Copy
Edit
// use-auth.tsx
try { /* fetch */ }
catch (e) {
  if (is401(e)) return { user: null }; // not an error state
  throw e;
}
8) Clean up any “Shipping only” code paths
Per the spec, only two modes exist:

LOCAL_ONLY

LOCAL_AND_SHIPPING
Audit shared/fulfillment.ts, badge renderers, filters, and DB defaults to ensure "SHIPPING_ONLY" can’t be produced or displayed.

9) Regression tests to add (Playwright)
add-local-only-nonlocal.spec.ts → expect 409, toast shown, cart unchanged.

checkout-local-only-no-shipping.spec.ts → no shipping UI; ETA banner present.

ws-update-fulfillment-flip.spec.ts → badge flips and illegal cart item is prevented (no add).

10) Quick sanity checklist
 AddressForm.tsx no longer throws “await” build error.

 POST /api/cart/items returns 409 for non-local + local-only.

 Client shows “Not available in your area” toast and doesn’t add then delete.

 Checkout no longer refreshes; no window reloads.

 WS messages use { type, payload } everywhere.

 Tailwind/Vite tweaks reduce “slow request” warnings.

If you apply the above, the build error will unblock immediately, the cart will stop flapping, checkout will stop reloading, and the locality rules will be enforced end-to-end with clearer UX.








Ask ChatGPT
