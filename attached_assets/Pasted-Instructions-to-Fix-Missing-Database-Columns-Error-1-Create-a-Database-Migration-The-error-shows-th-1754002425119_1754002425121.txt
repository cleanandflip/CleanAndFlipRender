Instructions to Fix Missing Database Columns Error
1. Create a Database Migration
The error shows that the phone_number column (and likely other columns) don't exist in the database. Create a migration file:
ts// migrations/add_equipment_submissions_columns.ts

import { sql } from 'drizzle-orm';

export async function up(db) {
  // Add missing columns to equipment_submissions table
  await db.execute(sql`
    ALTER TABLE equipment_submissions
    ADD COLUMN IF NOT EXISTS phone_number TEXT,
    ADD COLUMN IF NOT EXISTS user_city TEXT,
    ADD COLUMN IF NOT EXISTS user_state TEXT,
    ADD COLUMN IF NOT EXISTS user_zip_code TEXT,
    ADD COLUMN IF NOT EXISTS is_local BOOLEAN DEFAULT false,
    ADD COLUMN IF NOT EXISTS distance TEXT,
    ADD COLUMN IF NOT EXISTS status TEXT DEFAULT 'pending',
    ADD COLUMN IF NOT EXISTS admin_notes TEXT,
    ADD COLUMN IF NOT EXISTS offer_amount TEXT,
    ADD COLUMN IF NOT EXISTS scheduled_pickup_date TIMESTAMP,
    ADD COLUMN IF NOT EXISTS images JSONB DEFAULT '[]'::jsonb
  `);
}

export async function down(db) {
  // Remove columns if rolling back
  await db.execute(sql`
    ALTER TABLE equipment_submissions
    DROP COLUMN IF EXISTS phone_number,
    DROP COLUMN IF EXISTS user_city,
    DROP COLUMN IF EXISTS user_state,
    DROP COLUMN IF EXISTS user_zip_code,
    DROP COLUMN IF EXISTS is_local,
    DROP COLUMN IF EXISTS distance,
    DROP COLUMN IF EXISTS status,
    DROP COLUMN IF EXISTS admin_notes,
    DROP COLUMN IF EXISTS offer_amount,
    DROP COLUMN IF EXISTS scheduled_pickup_date,
    DROP COLUMN IF EXISTS images
  `);
}
2. Run the Migration
Tell Replit to run this command:
bashnpm run db:push
Or if you have a migration script:
bashnpm run db:migrate
3. Quick Alternative: Update Schema and Push
If migrations aren't set up, update the schema file and push changes:
ts// shared/schema.ts - Update the equipment_submissions table

export const equipmentSubmissions = pgTable('equipment_submissions', {
  id: uuid('id').primaryKey().defaultRandom(),
  userId: uuid('user_id').references(() => users.id),
  
  // Equipment details
  equipmentName: text('equipment_name').notNull(),
  brand: text('brand').notNull(),
  condition: text('condition').notNull(),
  weight: text('weight'),
  askingPrice: text('asking_price'),
  description: text('description'),
  
  // Contact & Location (ADD THESE)
  phoneNumber: text('phone_number'),
  userCity: text('user_city'),
  userState: text('user_state'),
  userZipCode: text('user_zip_code'),
  isLocal: boolean('is_local').default(false),
  distance: text('distance'),
  
  // Admin fields (ADD THESE)
  status: text('status').default('pending'),
  adminNotes: text('admin_notes'),
  offerAmount: text('offer_amount'),
  scheduledPickupDate: timestamp('scheduled_pickup_date'),
  
  // Images (ADD THIS)
  images: jsonb('images').$type<string[]>().default([]),
  
  // Timestamps
  createdAt: timestamp('created_at').defaultNow(),
  updatedAt: timestamp('updated_at').defaultNow()
});
4. Temporary Fix for Immediate Testing
While waiting for the migration, update the submission creation to only use existing columns:
ts// server/routes.ts or storage.ts - In createEquipmentSubmission

// Remove phone_number and other new fields temporarily
const submission = await db.insert(equipmentSubmissions).values({
  userId: req.session.userId,
  equipmentName: data.equipmentName,
  brand: data.brand,
  condition: data.condition,
  weight: data.weight ? String(data.weight) : null,
  askingPrice: data.askingPrice ? String(data.askingPrice) : null,
  description: data.description,
  // Comment out new fields until migration runs
  // phoneNumber: data.phoneNumber,
  // userCity: data.userCity,
  // etc...
});
5. Check Current Table Structure
Run this query to see what columns currently exist:
sql-- In your database console or through a query tool
SELECT column_name, data_type 
FROM information_schema.columns 
WHERE table_name = 'equipment_submissions';
6. Full Migration Script
Create a complete migration script:
bash# Create migration file
touch migrations/001_add_equipment_submission_fields.sql
sql-- migrations/001_add_equipment_submission_fields.sql

-- Add new columns to equipment_submissions table
ALTER TABLE equipment_submissions
ADD COLUMN IF NOT EXISTS phone_number TEXT,
ADD COLUMN IF NOT EXISTS user_city TEXT,
ADD COLUMN IF NOT EXISTS user_state TEXT,
ADD COLUMN IF NOT EXISTS user_zip_code TEXT,
ADD COLUMN IF NOT EXISTS is_local BOOLEAN DEFAULT false,
ADD COLUMN IF NOT EXISTS distance TEXT,
ADD COLUMN IF NOT EXISTS status TEXT DEFAULT 'pending',
ADD COLUMN IF NOT EXISTS admin_notes TEXT,
ADD COLUMN IF NOT EXISTS offer_amount TEXT,
ADD COLUMN IF NOT EXISTS scheduled_pickup_date TIMESTAMP,
ADD COLUMN IF NOT EXISTS images JSONB DEFAULT '[]'::jsonb;

-- Add index for performance
CREATE INDEX IF NOT EXISTS idx_equipment_submissions_status ON equipment_submissions(status);
CREATE INDEX IF NOT EXISTS idx_equipment_submissions_user_id ON equipment_submissions(user_id);
CREATE INDEX IF NOT EXISTS idx_equipment_submissions_is_local ON equipment_submissions(is_local);
7. Update package.json Scripts
Add migration commands if they don't exist:
json{
  "scripts": {
    "db:push": "drizzle-kit push:pg",
    "db:generate": "drizzle-kit generate:pg",
    "db:migrate": "tsx migrations/run.ts",
    "db:studio": "drizzle-kit studio"
  }
}
Instructions for Replit:

First, check what columns exist in the equipment_submissions table
Run the migration to add missing columns
If migrations aren't set up, update the schema.ts file and run npm run db:push
Verify the columns were added by checking the table structure again
Test the submission form again once the database is updated