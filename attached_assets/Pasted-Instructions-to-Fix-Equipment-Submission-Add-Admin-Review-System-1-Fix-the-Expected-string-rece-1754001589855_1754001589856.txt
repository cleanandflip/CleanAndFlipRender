Instructions to Fix Equipment Submission & Add Admin Review System
1. Fix the "Expected string, received number" Error
The error is likely happening because the price field is sending a number but the backend expects a string. Fix this:
tsx// In the submission form component (SellToUs.tsx or EquipmentSubmissionForm)

// Before submitting, convert the price to string
const handleSubmit = async (e) => {
  e.preventDefault();
  
  const submissionData = {
    ...formData,
    askingPrice: formData.askingPrice ? String(formData.askingPrice) : null,
    weight: formData.weight ? String(formData.weight) : null,
    // Convert any other numeric fields to strings
  };

  try {
    await submitEquipment(submissionData);
  } catch (error) {
    console.error('Submission error:', error);
  }
};
2. Update Database Schema for Local-Only Submissions
ts// In shared/schema.ts or database schema file

// Update equipment_submissions table to include location data
export const equipmentSubmissions = pgTable('equipment_submissions', {
  id: uuid('id').primaryKey().defaultRandom(),
  userId: uuid('user_id').references(() => users.id),
  
  // Equipment details
  equipmentName: text('equipment_name').notNull(),
  brand: text('brand').notNull(),
  condition: text('condition').notNull(),
  weight: text('weight'),
  askingPrice: text('asking_price'), // Store as text to avoid type issues
  description: text('description'),
  
  // Location data for local-only
  userCity: text('user_city'),
  userState: text('user_state'),
  userZipCode: text('user_zip_code'),
  isLocal: boolean('is_local').default(false), // True if within Asheville area
  distance: text('distance'), // Distance from your location
  
  // Submission status
  status: text('status').default('pending'), // pending, accepted, rejected, scheduled
  adminNotes: text('admin_notes'),
  offerAmount: text('offer_amount'),
  scheduledPickupDate: timestamp('scheduled_pickup_date'),
  phoneNumber: text('phone_number'),
  
  // Images
  images: jsonb('images').$type<string[]>(),
  
  createdAt: timestamp('created_at').defaultNow(),
  updatedAt: timestamp('updated_at').defaultNow()
});
3. Add Location Check for Local-Only Submissions
tsx// client/src/pages/SellToUs.tsx - Add location detection

import { useGeolocation } from '@/hooks/useGeolocation';

// Define Asheville area (roughly 50-mile radius)
const ASHEVILLE_CENTER = { lat: 35.5951, lng: -82.5515 };
const MAX_DISTANCE_MILES = 50;

function calculateDistance(lat1: number, lon1: number, lat2: number, lon2: number) {
  // Haversine formula for distance calculation
  const R = 3959; // Earth's radius in miles
  const dLat = (lat2 - lat1) * Math.PI / 180;
  const dLon = (lon2 - lon1) * Math.PI / 180;
  const a = 
    Math.sin(dLat/2) * Math.sin(dLat/2) +
    Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) *
    Math.sin(dLon/2) * Math.sin(dLon/2);
  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));
  return R * c;
}

// In the component
const { location, loading: locationLoading } = useGeolocation();
const [isLocalUser, setIsLocalUser] = useState(false);
const [userDistance, setUserDistance] = useState<number | null>(null);

useEffect(() => {
  if (location) {
    const distance = calculateDistance(
      location.latitude,
      location.longitude,
      ASHEVILLE_CENTER.lat,
      ASHEVILLE_CENTER.lng
    );
    setUserDistance(distance);
    setIsLocalUser(distance <= MAX_DISTANCE_MILES);
  }
}, [location]);

// Show message if not local
{!isLocalUser && !locationLoading && (
  <div className="bg-yellow-900/20 border border-yellow-700 rounded-lg p-4 mb-6">
    <p className="text-yellow-300">
      Note: Local pickup is only available within 50 miles of Asheville, NC. 
      You appear to be {userDistance?.toFixed(0)} miles away. 
      We may still be able to arrange shipping for valuable items.
    </p>
  </div>
)}
4. Create Admin Submissions Management Page
tsx// client/src/pages/admin/SubmissionsManager.tsx

import { useState } from 'react';
import { useQuery, useMutation } from '@tanstack/react-query';
import { Card } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { Calendar, MapPin, Phone, DollarSign } from 'lucide-react';

export function SubmissionsManager() {
  const [selectedSubmission, setSelectedSubmission] = useState(null);
  const [offerAmount, setOfferAmount] = useState('');
  const [adminNotes, setAdminNotes] = useState('');

  const { data: submissions, refetch } = useQuery({
    queryKey: ['admin-submissions'],
    queryFn: async () => {
      const res = await fetch('/api/admin/submissions');
      return res.json();
    }
  });

  const updateSubmission = useMutation({
    mutationFn: async ({ id, updates }) => {
      const res = await fetch(`/api/admin/submissions/${id}`, {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(updates)
      });
      return res.json();
    },
    onSuccess: () => refetch()
  });

  const handleAcceptOffer = async (submission) => {
    await updateSubmission.mutateAsync({
      id: submission.id,
      updates: {
        status: 'accepted',
        offerAmount,
        adminNotes
      }
    });
    
    // Send notification to user (implement notification system)
    alert(`Offer accepted! Contact user at ${submission.phoneNumber} to schedule pickup.`);
  };

  const statusColors = {
    pending: 'yellow',
    accepted: 'green',
    rejected: 'red',
    scheduled: 'blue'
  };

  return (
    <div className="p-6">
      <h1 className="text-2xl font-bold mb-6">Equipment Submissions</h1>
      
      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        {/* Submissions List */}
        <div className="lg:col-span-2 space-y-4">
          {submissions?.map((submission) => (
            <Card 
              key={submission.id}
              className="p-4 cursor-pointer hover:bg-gray-800/50 transition-colors"
              onClick={() => setSelectedSubmission(submission)}
            >
              <div className="flex justify-between items-start">
                <div>
                  <h3 className="font-semibold text-lg">{submission.equipmentName}</h3>
                  <p className="text-gray-400">{submission.brand} â€¢ {submission.condition}</p>
                  <div className="flex items-center gap-4 mt-2 text-sm">
                    <span className="flex items-center gap-1">
                      <DollarSign className="w-4 h-4" />
                      Asking: ${submission.askingPrice || 'Open to offers'}
                    </span>
                    {submission.isLocal && (
                      <span className="flex items-center gap-1 text-green-400">
                        <MapPin className="w-4 h-4" />
                        {submission.distance} miles away
                      </span>
                    )}
                  </div>
                </div>
                <Badge variant={statusColors[submission.status]}>
                  {submission.status}
                </Badge>
              </div>
              
              <div className="mt-3 flex items-center gap-4 text-sm text-gray-400">
                <span>{submission.userName}</span>
                <span>{new Date(submission.createdAt).toLocaleDateString()}</span>
              </div>
            </Card>
          ))}
        </div>

        {/* Detail Panel */}
        {selectedSubmission && (
          <Card className="p-6 h-fit">
            <h2 className="text-xl font-semibold mb-4">Submission Details</h2>
            
            {/* Images */}
            {selectedSubmission.images?.length > 0 && (
              <div className="grid grid-cols-2 gap-2 mb-4">
                {selectedSubmission.images.map((img, idx) => (
                  <img 
                    key={idx}
                    src={img} 
                    alt={`Equipment ${idx + 1}`}
                    className="rounded-lg w-full h-32 object-cover"
                  />
                ))}
              </div>
            )}
            
            {/* Details */}
            <div className="space-y-3 mb-6">
              <div>
                <label className="text-sm text-gray-400">Description</label>
                <p>{selectedSubmission.description}</p>
              </div>
              
              <div>
                <label className="text-sm text-gray-400">Contact</label>
                <p className="flex items-center gap-2">
                  <Phone className="w-4 h-4" />
                  {selectedSubmission.phoneNumber}
                </p>
              </div>
              
              <div>
                <label className="text-sm text-gray-400">Location</label>
                <p>{selectedSubmission.userCity}, {selectedSubmission.userState} {selectedSubmission.userZipCode}</p>
              </div>
            </div>

            {/* Action Panel */}
            {selectedSubmission.status === 'pending' && (
              <div className="space-y-4">
                <div>
                  <label className="text-sm text-gray-400">Your Offer</label>
                  <Input
                    type="number"
                    value={offerAmount}
                    onChange={(e) => setOfferAmount(e.target.value)}
                    placeholder="Enter offer amount"
                    className="mt-1"
                  />
                </div>
                
                <div>
                  <label className="text-sm text-gray-400">Notes</label>
                  <Textarea
                    value={adminNotes}
                    onChange={(e) => setAdminNotes(e.target.value)}
                    placeholder="Internal notes or message to user"
                    className="mt-1"
                  />
                </div>
                
                <div className="flex gap-2">
                  <Button 
                    onClick={() => handleAcceptOffer(selectedSubmission)}
                    className="flex-1"
                  >
                    Accept & Contact
                  </Button>
                  <Button 
                    variant="destructive"
                    onClick={() => updateSubmission.mutate({
                      id: selectedSubmission.id,
                      updates: { status: 'rejected', adminNotes }
                    })}
                  >
                    Reject
                  </Button>
                </div>
              </div>
            )}
            
            {selectedSubmission.status === 'accepted' && (
              <div className="bg-green-900/20 border border-green-700 rounded-lg p-4">
                <p className="text-green-400">
                  Offer accepted at ${selectedSubmission.offerAmount}
                </p>
                <p className="text-sm mt-2">
                  Call {selectedSubmission.phoneNumber} to schedule pickup
                </p>
              </div>
            )}
          </Card>
        )}
      </div>
    </div>
  );
}
5. Add API Endpoints for Submissions Management
ts// server/routes.ts - Add these endpoints

// Get all submissions (admin only)
app.get('/api/admin/submissions', requireAdmin, async (req, res) => {
  const submissions = await db.select({
    submission: equipmentSubmissions,
    user: {
      name: users.name,
      email: users.email,
      phone: users.phone
    }
  })
  .from(equipmentSubmissions)
  .leftJoin(users, eq(equipmentSubmissions.userId, users.id))
  .orderBy(desc(equipmentSubmissions.createdAt));
  
  res.json(submissions);
});

// Update submission (admin only)
app.put('/api/admin/submissions/:id', requireAdmin, async (req, res) => {
  const { id } = req.params;
  const updates = req.body;
  
  await db.update(equipmentSubmissions)
    .set({
      ...updates,
      updatedAt: new Date()
    })
    .where(eq(equipmentSubmissions.id, id));
    
  // If accepted, send email/SMS to user
  if (updates.status === 'accepted') {
    // Implement notification logic
  }
  
  res.json({ success: true });
});

// Update the submission creation to include location check
app.post('/api/submissions', requireAuth, async (req, res) => {
  const { askingPrice, weight, ...otherData } = req.body;
  
  // Get user location
  const user = await db.select().from(users).where(eq(users.id, req.session.userId)).limit(1);
  
  const submission = await db.insert(equipmentSubmissions).values({
    ...otherData,
    askingPrice: askingPrice ? String(askingPrice) : null,
    weight: weight ? String(weight) : null,
    userId: req.session.userId,
    phoneNumber: user[0].phone,
    userCity: user[0].city,
    userState: user[0].state,
    userZipCode: user[0].zipCode,
    isLocal: user[0].isLocal, // Set based on location
    status: 'pending'
  });
  
  res.json(submission);
});
6. Add Navigation to Admin Dashboard
tsx// In AdminDashboard.tsx or navigation component

<nav className="flex space-x-4">
  <Link to="/admin/products">Products</Link>
  <Link to="/admin/submissions">Buy Offers</Link>
  <Link to="/admin/orders">Orders</Link>
  <Link to="/admin/analytics">Analytics</Link>
</nav>
7. Add Phone Number Field to Submission Form
tsx// In SellToUs form
<Input
  type="tel"
  name="phoneNumber"
  placeholder="Phone number for pickup coordination"
  value={formData.phoneNumber}
  onChange={handleChange}
  required
/>
This implementation will:

Fix the type error by converting numbers to strings
Check if users are local (within 50 miles of Asheville)
Create an admin interface to review submissions
Allow admins to accept/reject offers
Store phone numbers for pickup coordination
Track submission status through the entire workflow