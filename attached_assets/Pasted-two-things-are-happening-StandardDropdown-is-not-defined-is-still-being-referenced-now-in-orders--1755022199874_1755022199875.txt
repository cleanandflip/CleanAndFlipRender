two things are happening:

StandardDropdown is not defined is still being referenced (now in orders.tsx).

The sell-to-us layout and dropdown fixes didn’t land (or didn’t apply to the right components).

Here’s a clear, “do-this-now” set of instructions for Replit to fix both quickly and safely.

0) Safety net first (stop the crash immediately)
Create a one-line shim so any lingering usages don’t explode while we migrate.

File: src/components/form/StandardDropdown.tsx

tsx
Copy
Edit
export { default } from "@/components/ui/Dropdown"; // temporary compatibility shim
This makes every import StandardDropdown ... resolve to the new canonical Dropdown component. The app stops throwing while you replace usages. Remove this shim after the migration (see Step 3d).

1) Find and replace every old usage
Run these searches and fix them all:

bash
Copy
Edit
# All the places still using legacy names
rg -n "StandardDropdown|SelectTrigger|SelectContent|SelectItem|@radix-ui/react-select|<select\\b" src

# Pages called out in the error
rg -n "StandardDropdown" src/pages/orders.tsx src/pages/sell-to-us.tsx
For each match:

Replace imports with:

tsx
Copy
Edit
import Dropdown from "@/components/ui/Dropdown";
If used with react-hook-form, use the adapter:

tsx
Copy
Edit
import DropdownField from "@/components/form/DropdownField";
Replace JSX:

tsx
Copy
Edit
<Dropdown value={...} onChange={...} options={OPTIONS} placeholder="Select..." />
# or
<DropdownField control={control} name="field" options={OPTIONS} placeholder="Select..." />
2) Apply the sell-to-us layout & spacing (so you actually see the changes)
Open src/pages/sell-to-us.tsx and update the Equipment Details section to use a clean grid. Don’t change copy—just structure:

tsx
Copy
Edit
<section aria-labelledby="equipment-details">
  <h2 id="equipment-details">Equipment Details</h2>

  {/* GRID: mobile 1-col, md+ 2-col */}
  <div className="grid grid-cols-1 md:grid-cols-2 gap-x-6 gap-y-5">
    {/* Row 1 */}
    <Field label="Equipment Name *" name="name">
      <Input id="name" {...register("name", { required: true })} />
    </Field>
    <Field label="Brand" name="brand">
      <DropdownField control={control} name="brand" options={BRAND_OPTIONS} placeholder="Search or select a brand..." />
    </Field>

    {/* Row 2 */}
    <Field label="Category *" name="category">
      <DropdownField control={control} name="category" options={CATEGORY_OPTIONS} placeholder="Select category" />
    </Field>
    <Field label="Weight (lbs)" name="weight">
      <Input id="weight" {...register("weight")} placeholder="Total weight in pounds" />
    </Field>

    {/* Row 3 */}
    <Field label="Condition *" name="condition">
      <DropdownField control={control} name="condition" options={CONDITION_OPTIONS} />
    </Field>
    <div /> {/* keep column balance or add another field here */}

    {/* Row 4 (full width) */}
    <div className="md:col-span-2">
      <Field label="Your Asking Price (Optional)" name="price" helper="This helps us make a fair offer, but we'll evaluate based on condition and market value.">
        <Input id="price" startAdornment="$" {...register("price")} />
      </Field>
    </div>

    {/* Row 5 (full width) */}
    <div className="md:col-span-2">
      <Field label="Description" name="description">
        <Textarea id="description" rows={5} placeholder="Tell us about the equipment - age, usage, any wear or damage..." {...register("description")} />
      </Field>
    </div>
  </div>
</section>
Field component (simple wrapper)

tsx
Copy
Edit
function Field({ label, name, helper, children }:{
  label: string; name: string; helper?: string; children: React.ReactNode;
}) {
  const id = name;
  return (
    <div>
      <label htmlFor={id} className="block text-sm font-medium">{label}</label>
      <div className="mt-2">{children}</div>
      {helper && <p id={`${id}-help`} className="mt-1 text-xs opacity-80">{helper}</p>}
    </div>
  );
}
Ensure all inputs and dropdown triggers use the same height (your md = h-10 equivalent).

Keep consistent radius/borders/focus ring via your shared UI components.

3) Fix dropdown layering (menu behind cards)
Wherever the canonical dropdown renders its menu (shadcn/Radix or custom), wire these:

Portal to body (prevents parent overflow clipping).

High z-index (above cards/forms).

Width & offset to align with the trigger.

If using shadcn Select under the hood, inside src/components/ui/Dropdown.tsx:

tsx
Copy
Edit
<Select>
  <SelectTrigger /* trigger classes matching inputs */ />
  <SelectContent
    position="popper"
    sideOffset={8}
    className="w-[var(--radix-select-trigger-width)] max-h-[56vh] overflow-y-auto z-[60] rounded-xl shadow-xl border"
  >
    {/* items */}
  </SelectContent>
</Select>
If it’s a custom menu, render the menu via React Portal and set style={{ zIndex: 60 }} (or your token) with position: fixed/absolute plus trigger-width calculation.

4) Make the nav profile dropdown readable
Update the header profile menu component to use your solid popover surface (not translucent), sensible width, and elevation:

Panel width 280–320px.

Surface: less transparent (use your popover surface token).

z-index ≥ 60.

Sections: profile block → divider → links → divider → sign out.

Open/close: 200ms fade + 8px translate; respect reduced motion.

Render via portal.

Example menu container classes:

css
Copy
Edit
"z-[60] w-72 rounded-xl shadow-xl border bg-popover p-3"
5) Remove every trace of legacy dropdown/menu code
After you’ve replaced imports, delete the old files:

src/components/**/Select*.tsx, *Dropdown*.tsx, header-specific menu components that aren’t the canonical one, dev dashboard variations, etc.

Remove their re-exports from any index.ts barrels.

Remove old stories/tests/styles.

Block re-introduction via ESLint:

js
Copy
Edit
// .eslintrc.cjs
rules: {
  "no-restricted-imports": ["error", { "paths": ["@radix-ui/react-select", "@radix-ui/react-dropdown-menu"] }],
  "no-restricted-syntax": [
    "error",
    { selector: "JSXOpeningElement[name.name='select']", message: "Use <Dropdown /> instead of native <select>." }
  ]
}
6) Verify everything (QA)
Orders page: no StandardDropdown references; sort/status filters use Dropdown.

Sell-to-us: grid layout matches spec; labels aligned; helper text aligned; menus open above cards and not clipped.

All pages: nav search works exactly as before (your coordinator logic), “X” returns to the correct page.

Profile menu: higher contrast, crisp, no translucency issues, closes on outside click/Esc, keyboard focus visible.

Searches:

bash
Copy
Edit
rg -n "StandardDropdown|@radix-ui/react-select|SelectTrigger|SelectItem|<select\\b" src
# Expect 0 matches (except the temporary shim file).
7) Clean up the temporary shim
Once all usages are migrated and the greps above are clean:

Delete src/components/form/StandardDropdown.tsx (the shim).

Run build and E2E smoke.

