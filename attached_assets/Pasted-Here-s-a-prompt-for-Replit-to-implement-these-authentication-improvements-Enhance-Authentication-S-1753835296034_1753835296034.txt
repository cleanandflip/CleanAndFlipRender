Here's a prompt for Replit to implement these authentication improvements:

Enhance Authentication Security & Add Address Fields
I need to improve the registration form with better security and additional required fields for user addresses.
1. Update Registration Form Fields:
Required Fields:

First Name
Last Name
Email
Address (single field for street address)
City, State ZIP (single field, e.g., "Asheville, NC 28806")
Password
Confirm Password (new field)

Optional Fields:

Phone Number (add "Optional" label)

2. Password Security Requirements:
Implement these password rules:
javascriptpasswordRequirements = {
  minLength: 8,
  requireUppercase: true,
  requireLowercase: true,
  requireNumbers: true,
  requireSpecialChar: true,
  
  errorMessages: {
    length: "Password must be at least 8 characters",
    uppercase: "Include at least one uppercase letter",
    lowercase: "Include at least one lowercase letter", 
    number: "Include at least one number",
    special: "Include at least one special character (!@#$%^&*)"
  }
}
Add visual indicators:

Real-time password strength meter (Weak/Fair/Good/Strong)
Green checkmarks as requirements are met
Password visibility toggle (eye icon)

3. Password Confirmation:
javascript// Validation
if (password !== confirmPassword) {
  error: "Passwords do not match"
}

// Visual feedback
- Show green border when passwords match
- Red border and error message when they don't
4. Database Schema Updates:
sqlALTER TABLE users
ADD COLUMN IF NOT EXISTS address VARCHAR(255) NOT NULL,
ADD COLUMN IF NOT EXISTS city_state_zip VARCHAR(100) NOT NULL,
ALTER COLUMN phone DROP NOT NULL; -- Make phone optional
5. Security Implementation:
Password Hashing:
javascript// Use bcrypt with proper salt rounds
import bcrypt from 'bcryptjs';

const SALT_ROUNDS = 12; // Industry standard

// Registration
const hashedPassword = await bcrypt.hash(password, SALT_ROUNDS);

// Never store plain text passwords
// Never log passwords
// Clear password fields after submission
Security Headers & Messages:
javascript// Add to registration page
securityMessages: {
  header: "Your Security Matters",
  subtext: "Your password is encrypted and never stored in plain text",
  badges: [
    "üîí 256-bit Encryption",
    "üõ°Ô∏è Secure Connection", 
    "‚úì PCI Compliant"
  ]
}
6. Form Layout & UX:
jsx<form>
  {/* Personal Info Section */}
  <h3>Personal Information</h3>
  <div className="grid grid-cols-2 gap-4">
    <input name="firstName" placeholder="First Name" required />
    <input name="lastName" placeholder="Last Name" required />
  </div>
  
  <input name="email" type="email" placeholder="Email" required />
  
  {/* Address Section */}
  <h3>Location</h3>
  <input name="address" placeholder="Street Address" required />
  <input name="cityStateZip" placeholder="City, State ZIP (e.g., Asheville, NC 28806)" required />
  
  {/* Optional */}
  <input name="phone" type="tel" placeholder="Phone Number (Optional)" />
  
  {/* Security Section */}
  <h3>Create Secure Password</h3>
  <div className="password-input-wrapper">
    <input name="password" type="password" placeholder="Password" required />
    <button type="button" onClick={toggleVisibility}>üëÅ</button>
  </div>
  
  {/* Password strength indicator */}
  <PasswordStrengthMeter password={password} />
  
  {/* Requirements checklist */}
  <PasswordRequirements password={password} />
  
  <input name="confirmPassword" type="password" placeholder="Confirm Password" required />
  
  {/* Security assurance */}
  <div className="security-notice">
    <Lock size={16} />
    <span>Your information is encrypted and secure</span>
  </div>
  
  <button type="submit">Create Secure Account</button>
</form>
7. Validation Updates:
javascript// City, State ZIP validation
const cityStateZipRegex = /^[A-Za-z\s]+,\s*[A-Z]{2}\s*\d{5}$/;

// Example valid formats:
// "Asheville, NC 28806"
// "Los Angeles, CA 90001"

if (!cityStateZipRegex.test(cityStateZip)) {
  error: "Please enter in format: City, ST 12345"
}
8. Address Verification for Local Sellers:
javascript// Extract ZIP from city_state_zip field
const zip = cityStateZip.split(' ').pop();

// Check if within service area
const isLocal = checkIfLocalZip(zip);
if (isLocal) {
  user.is_local_customer = true;
}
9. Trust Indicators:

Add SSL badge near form
Show "Secure form" with lock icon
Include privacy policy link
Add tooltip explaining encryption

10. Error Handling:

Clear, helpful error messages
Don't reveal if email exists (security)
Rate limit registration attempts
Log security events

Please implement these changes to create a secure, user-friendly registration system that collects necessary address information while ensuring users feel safe providing their personal data.