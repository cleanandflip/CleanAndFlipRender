# Dropdown and Form Styling Fixes for Clean & Flip

## Issues Identified:
1. Dropdowns don't stay positioned correctly when scrolling
2. Double borders on dropdown containers
3. Field sizes don't match dropdown widths
4. Inconsistent styling between forms

## 1. Fix Dropdown Positioning

### Update `/client/src/components/ui/select.tsx`:

```tsx
import * as React from "react"
import * as SelectPrimitive from "@radix-ui/react-select"
import { Check, ChevronDown } from "lucide-react"
import { cn } from "@/lib/utils"

const Select = SelectPrimitive.Root

const SelectGroup = SelectPrimitive.Group

const SelectValue = SelectPrimitive.Value

const SelectTrigger = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Trigger
    ref={ref}
    className={cn(
      "flex h-10 w-full items-center justify-between rounded-md border border-gray-700 bg-gray-900/50 px-3 py-2 text-sm ring-offset-gray-950 placeholder:text-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-600 focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
      className
    )}
    {...props}
  >
    {children}
    <SelectPrimitive.Icon asChild>
      <ChevronDown className="h-4 w-4 opacity-50" />
    </SelectPrimitive.Icon>
  </SelectPrimitive.Trigger>
))
SelectTrigger.displayName = SelectPrimitive.Trigger.displayName

const SelectContent = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>
>(({ className, children, position = "popper", ...props }, ref) => (
  <SelectPrimitive.Portal>
    <SelectPrimitive.Content
      ref={ref}
      className={cn(
        "relative z-50 min-w-[8rem] overflow-hidden rounded-md border border-gray-700 bg-gray-900 text-gray-50 shadow-md",
        position === "popper" &&
          "data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1",
        className
      )}
      position={position}
      sideOffset={4}
      // Fix for scrolling issues
      collisionBoundary={typeof window !== "undefined" ? window.document.body : undefined}
      {...props}
    >
      <SelectPrimitive.Viewport
        className={cn(
          "p-1",
          position === "popper" &&
            "h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]"
        )}
      >
        {children}
      </SelectPrimitive.Viewport>
    </SelectPrimitive.Content>
  </SelectPrimitive.Portal>
))
SelectContent.displayName = SelectPrimitive.Content.displayName

const SelectItem = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-gray-800 focus:text-gray-50 data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <SelectPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </SelectPrimitive.ItemIndicator>
    </span>
    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
  </SelectPrimitive.Item>
))
SelectItem.displayName = SelectPrimitive.Item.displayName

export { Select, SelectGroup, SelectValue, SelectTrigger, SelectContent, SelectItem }
```

## 2. Fix Contact Form Styling

### Update `/client/src/pages/Contact.tsx` or Contact Component:

```tsx
import { useState } from 'react';
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { z } from 'zod';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select';

const contactSchema = z.object({
  fullName: z.string().min(2, 'Name must be at least 2 characters'),
  email: z.string().email('Invalid email address'),
  category: z.string().min(1, 'Please select a category'),
  subject: z.string().min(1, 'Subject is required'),
  message: z.string().min(10, 'Message must be at least 10 characters'),
});

export function ContactForm() {
  const [isSubmitting, setIsSubmitting] = useState(false);
  
  const {
    register,
    handleSubmit,
    setValue,
    formState: { errors },
  } = useForm({
    resolver: zodResolver(contactSchema),
  });

  const onSubmit = async (data: any) => {
    setIsSubmitting(true);
    // Handle form submission
    console.log(data);
    setIsSubmitting(false);
  };

  return (
    <div className="max-w-2xl mx-auto p-6">
      <div className="bg-gray-900/50 rounded-lg p-8 border border-gray-800">
        <h2 className="text-2xl font-bold text-white mb-6 flex items-center gap-2">
          <span className="text-blue-500">âœ‰</span> SEND US A MESSAGE
        </h2>

        <form onSubmit={handleSubmit(onSubmit)} className="space-y-4">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            {/* Full Name */}
            <div>
              <label className="block text-sm font-medium text-gray-300 mb-2">
                Full Name *
              </label>
              <Input
                {...register('fullName')}
                placeholder="Your full name"
                className="w-full h-10 bg-gray-900/50 border-gray-700 text-white placeholder:text-gray-500 focus:border-blue-500"
              />
              {errors.fullName && (
                <p className="text-red-500 text-sm mt-1">{errors.fullName.message}</p>
              )}
            </div>

            {/* Email */}
            <div>
              <label className="block text-sm font-medium text-gray-300 mb-2">
                Email Address *
              </label>
              <Input
                {...register('email')}
                type="email"
                placeholder="your@email.com"
                className="w-full h-10 bg-gray-900/50 border-gray-700 text-white placeholder:text-gray-500 focus:border-blue-500"
              />
              {errors.email && (
                <p className="text-red-500 text-sm mt-1">{errors.email.message}</p>
              )}
            </div>
          </div>

          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            {/* Category Dropdown - Fixed */}
            <div>
              <label className="block text-sm font-medium text-gray-300 mb-2">
                Category *
              </label>
              <Select onValueChange={(value) => setValue('category', value)}>
                <SelectTrigger className="w-full h-10 bg-gray-900/50 border-gray-700 text-white">
                  <SelectValue placeholder="What can we help with?" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="selling">Selling Equipment</SelectItem>
                  <SelectItem value="buying">Buying Equipment</SelectItem>
                  <SelectItem value="order">Order Support</SelectItem>
                  <SelectItem value="shipping">Shipping & Delivery</SelectItem>
                  <SelectItem value="returns">Returns & Refunds</SelectItem>
                  <SelectItem value="other">Other</SelectItem>
                </SelectContent>
              </Select>
              {errors.category && (
                <p className="text-red-500 text-sm mt-1">{errors.category.message}</p>
              )}
            </div>

            {/* Subject */}
            <div>
              <label className="block text-sm font-medium text-gray-300 mb-2">
                Subject *
              </label>
              <Input
                {...register('subject')}
                placeholder="Brief subject line"
                className="w-full h-10 bg-gray-900/50 border-gray-700 text-white placeholder:text-gray-500 focus:border-blue-500"
              />
              {errors.subject && (
                <p className="text-red-500 text-sm mt-1">{errors.subject.message}</p>
              )}
            </div>
          </div>

          {/* Message */}
          <div>
            <label className="block text-sm font-medium text-gray-300 mb-2">
              Message *
            </label>
            <Textarea
              {...register('message')}
              placeholder="Tell us how we can help you..."
              rows={6}
              className="w-full bg-gray-900/50 border-gray-700 text-white placeholder:text-gray-500 focus:border-blue-500 resize-none"
            />
            {errors.message && (
              <p className="text-red-500 text-sm mt-1">{errors.message.message}</p>
            )}
          </div>

          <div className="pt-4">
            <p className="text-sm text-gray-400 mb-4">
              * Required fields<br />
              We typically respond within 24 hours during business hours. For urgent matters, please call us directly.
            </p>
            
            <Button
              type="submit"
              disabled={isSubmitting}
              className="w-full md:w-auto bg-blue-600 hover:bg-blue-700 text-white px-8"
            >
              {isSubmitting ? 'Sending...' : 'Send Message'}
            </Button>
          </div>
        </form>
      </div>
    </div>
  );
}
```

## 3. Fix Sell Equipment Form

### Update Equipment Submission Form:

```tsx
import { useState } from 'react';
import { useForm } from 'react-hook-form';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select';

export function EquipmentSubmissionForm() {
  const [uploadedImages, setUploadedImages] = useState<string[]>([]);
  const { register, handleSubmit, setValue, formState: { errors } } = useForm();

  return (
    <div className="max-w-4xl mx-auto p-6">
      <div className="bg-gray-900/50 rounded-lg p-8 border border-gray-800">
        <h2 className="text-2xl font-bold text-white mb-6">EQUIPMENT DETAILS</h2>

        <form className="space-y-6">
          {/* Equipment Name and Brand Row */}
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <label className="block text-sm font-medium text-gray-300 mb-2">
                Equipment Name *
              </label>
              <Input
                {...register('equipmentName')}
                placeholder="e.g. Olympic Barbell 45lb"
                className="w-full h-10 bg-gray-900/50 border-gray-700 text-white"
              />
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-300 mb-2">
                Brand
              </label>
              <Input
                {...register('brand')}
                placeholder="Search or select a brand..."
                className="w-full h-10 bg-gray-900/50 border-gray-700 text-white"
              />
            </div>
          </div>

          {/* Condition and Weight Row */}
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <label className="block text-sm font-medium text-gray-300 mb-2">
                Condition *
              </label>
              <Select onValueChange={(value) => setValue('condition', value)}>
                <SelectTrigger className="w-full h-10 bg-gray-900/50 border-gray-700 text-white">
                  <SelectValue placeholder="Select condition" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="new">New</SelectItem>
                  <SelectItem value="like-new">Like New</SelectItem>
                  <SelectItem value="good">Good</SelectItem>
                  <SelectItem value="fair">Fair</SelectItem>
                </SelectContent>
              </Select>
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-300 mb-2">
                Weight (lbs)
              </label>
              <Input
                {...register('weight')}
                type="number"
                placeholder="Total weight in pounds"
                className="w-full h-10 bg-gray-900/50 border-gray-700 text-white"
              />
            </div>
          </div>

          {/* Asking Price */}
          <div>
            <label className="block text-sm font-medium text-gray-300 mb-2">
              Your Asking Price (Optional)
            </label>
            <div className="relative">
              <span className="absolute left-3 top-1/2 -translate-y-1/2 text-gray-400">$</span>
              <Input
                {...register('price')}
                type="number"
                placeholder="50"
                className="w-full h-10 bg-gray-900/50 border-gray-700 text-white pl-8"
              />
            </div>
            <p className="text-sm text-gray-400 mt-1">
              This helps us make a fair offer, but we'll evaluate based on condition and market value.
            </p>
          </div>

          {/* Description */}
          <div>
            <label className="block text-sm font-medium text-gray-300 mb-2">
              Description
            </label>
            <Textarea
              {...register('description')}
              placeholder="Tell us about the equipment - age, usage, any wear or damage..."
              rows={4}
              className="w-full bg-gray-900/50 border-gray-700 text-white resize-none"
            />
          </div>

          {/* Photo Upload Section */}
          <div>
            <h3 className="text-lg font-semibold text-white mb-4">PHOTOS</h3>
            <p className="text-sm text-gray-400 mb-4">
              Upload clear photos showing the equipment from multiple angles. Include any wear, damage, or unique features.
            </p>
            
            <div className="border-2 border-dashed border-gray-700 rounded-lg p-8 text-center">
              <div className="flex flex-col items-center space-y-2">
                <svg className="w-12 h-12 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12" />
                </svg>
                <p className="text-gray-400">Drop files here, or click to select</p>
                <p className="text-sm text-gray-500">Maximum 12 files</p>
                <input
                  type="file"
                  multiple
                  accept="image/*"
                  className="hidden"
                  id="file-upload"
                />
                <label htmlFor="file-upload">
                  <Button type="button" variant="outline" className="cursor-pointer">
                    Choose Files
                  </Button>
                </label>
              </div>
            </div>
          </div>

          <Button type="submit" className="w-full bg-blue-600 hover:bg-blue-700 text-white">
            Submit Equipment for Review
          </Button>
        </form>
      </div>
    </div>
  );
}
```

## 4. Global CSS Fixes

### Add to `/client/src/styles/globals.css`:

```css
/* Fix dropdown positioning and styling */
[data-radix-ui-popper-content-wrapper] {
  z-index: 50 !important;
}

/* Remove double borders on select elements */
[data-state="open"] > [role="combobox"],
[data-state="closed"] > [role="combobox"] {
  outline: none !important;
  box-shadow: none !important;
}

/* Ensure dropdowns stay with their triggers */
[role="combobox"][aria-expanded="true"] {
  position: relative;
}

/* Fix select trigger focus states */
button[role="combobox"]:focus {
  outline: none;
  border-color: rgb(59 130 246); /* blue-500 */
  box-shadow: 0 0 0 3px rgb(59 130 246 / 0.1);
}

/* Consistent input and select heights */
input[type="text"],
input[type="email"],
input[type="number"],
textarea,
button[role="combobox"] {
  min-height: 2.5rem; /* 40px */
}

/* Fix dropdown content width */
[data-radix-ui-select-content] {
  width: var(--radix-select-trigger-width);
  max-height: var(--radix-select-content-available-height);
}

/* Remove unnecessary borders on dropdown items */
[role="option"] {
  border: none !important;
}

/* Ensure proper spacing in forms */
form label {
  display: block;
  margin-bottom: 0.5rem;
}

form input,
form textarea,
form button[role="combobox"] {
  width: 100%;
}
```

## 5. Update Shared Form Input Styles

### Create `/client/src/components/ui/form-field.tsx`:

```tsx
import { cn } from "@/lib/utils";

interface FormFieldProps {
  label: string;
  required?: boolean;
  error?: string;
  children: React.ReactNode;
  className?: string;
}

export function FormField({ 
  label, 
  required, 
  error, 
  children, 
  className 
}: FormFieldProps) {
  return (
    <div className={cn("space-y-2", className)}>
      <label className="block text-sm font-medium text-gray-300">
        {label} {required && <span className="text-red-500">*</span>}
      </label>
      {children}
      {error && (
        <p className="text-sm text-red-500 mt-1">{error}</p>
      )}
    </div>
  );
}
```

## 6. Fix Radix UI Select Props

### Update any Select components to use proper Radix UI props:

```tsx
// Ensure you're using the correct props
<Select
  value={selectedValue}
  onValueChange={handleValueChange}
  // Don't use onChange or value like a regular select
>
  <SelectTrigger className="w-full">
    <SelectValue placeholder="Select an option" />
  </SelectTrigger>
  <SelectContent 
    position="popper"
    sideOffset={5}
    align="start"
  >
    <SelectItem value="option1">Option 1</SelectItem>
    <SelectItem value="option2">Option 2</SelectItem>
  </SelectContent>
</Select>
```

## Testing Steps

1. Clear browser cache and reload
2. Test all dropdowns on both forms
3. Scroll while dropdown is open to ensure it follows
4. Check that all field heights match
5. Verify no double borders appear
6. Test on mobile devices for responsive behavior

## Summary of Fixes

âœ… Fixed dropdown positioning to stay with fields when scrolling
âœ… Removed double borders on select elements
âœ… Standardized field heights across all inputs
âœ… Fixed dropdown width to match trigger width
âœ… Improved focus states and accessibility
âœ… Added proper form validation and error handling
âœ… Ensured consistent styling across all forms