Here's a prompt for Replit:

CRITICAL FIXES: Wishlist Remove Not Working & Clean Up Redundant UI
Issues from Screenshots & Logs:

Wishlist DELETE failing - productId: undefined
Product cards showing redundant information (weight shown 3 times!)
Individual product page not using unified wishlist button
UI inconsistency between listing and product pages

1. FIX WISHLIST DELETE - Missing ProductId:
javascript// The DELETE request needs productId in the body
// Update the unified WishlistButton component:

const handleWishlistToggle = async (e) => {
  e.preventDefault();
  e.stopPropagation();
  
  if (!user) {
    setShowLoginPrompt(true);
    setTimeout(() => setShowLoginPrompt(false), 3000);
    return;
  }
  
  if (loading || !productId) return; // Add productId check
  
  setLoading(true);
  
  try {
    const endpoint = '/api/wishlist';
    const method = isWishlisted ? 'DELETE' : 'POST';
    
    const response = await fetch(endpoint, {
      method,
      headers: {
        'Authorization': `Bearer ${token}`,
        'Content-Type': 'application/json'
      },
      credentials: 'include',
      body: JSON.stringify({ productId }) // ENSURE productId is included for DELETE
    });
    
    if (response.ok) {
      setIsWishlisted(!isWishlisted);
      // Dispatch event
      window.dispatchEvent(new CustomEvent('wishlistUpdated', {
        detail: { productId, action: isWishlisted ? 'remove' : 'add' }
      }));
    }
  } catch (error) {
    console.error('Wishlist error:', error);
  } finally {
    setLoading(false);
  }
};
2. CLEAN UP PRODUCT CARD - Remove Redundancy:
javascript// components/ProductCard.jsx - CLEAN VERSION
import { WishlistButton } from '@/components/ui/WishlistButton';
import { AddToCartButton } from '@/components/ui/AddToCartButton';

const ProductCard = ({ product }) => {
  return (
    <div className="group relative bg-gray-900 rounded-lg overflow-hidden">
      {/* Stock Badge - Only show once */}
      {product.stock === 1 && (
        <div className="absolute top-2 left-2 z-10 bg-red-500 text-white px-2 py-1 rounded text-sm">
          Only 1 left!
        </div>
      )}
      
      {/* Wishlist Button - Top Right */}
      <WishlistButton 
        productId={product.id} 
        size="small" 
        className="absolute top-2 right-2 z-10" 
      />
      
      {/* Featured Badge if needed */}
      {product.featured && (
        <div className="absolute top-2 left-2 z-10 bg-yellow-500 text-black px-2 py-1 rounded text-sm">
          Featured
        </div>
      )}
      
      <Link href={`/products/${product.id}`}>
        {/* Product Image */}
        <div className="aspect-square relative overflow-hidden bg-gray-800">
          {product.images?.length > 0 ? (
            <img 
              src={product.images[0]} 
              alt={product.name}
              className="w-full h-full object-cover group-hover:scale-105 transition-transform"
            />
          ) : (
            <div className="flex items-center justify-center h-full">
              <Package className="w-16 h-16 text-gray-600" />
              <p className="text-gray-500 mt-2">No Image Available</p>
            </div>
          )}
        </div>
        
        {/* Product Info - CLEAN, NO REPETITION */}
        <div className="p-4">
          <h3 className="font-semibold text-white mb-1">{product.name}</h3>
          <p className="text-gray-400 text-sm mb-2">{product.brand}</p>
          
          {/* Price */}
          <div className="flex items-center justify-between mb-3">
            <span className="text-xl font-bold text-white">${product.price}</span>
            {product.condition && (
              <span className="bg-gray-700 px-2 py-1 rounded text-xs text-gray-300">
                {product.condition}
              </span>
            )}
          </div>
          
          {/* Single line for key spec - NO REPETITION */}
          {product.weight && (
            <p className="text-sm text-gray-400">{product.weight}</p>
          )}
        </div>
      </Link>
      
      {/* Add to Cart - Bottom of card */}
      <div className="px-4 pb-4">
        <AddToCartButton 
          productId={product.id} 
          stock={product.stock}
          variant="small"
          className="w-full"
        />
      </div>
    </div>
  );
};
3. UPDATE PRODUCT PAGE - Use Unified Components:
javascript// pages/products/[id].jsx - Use unified wishlist button
import { WishlistButton } from '@/components/ui/WishlistButton';

const ProductPage = ({ product }) => {
  return (
    <div className="container mx-auto">
      {/* ... breadcrumbs ... */}
      
      <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
        {/* Image Gallery */}
        <div className="relative">
          {/* ... image gallery ... */}
        </div>
        
        {/* Product Info */}
        <div>
          <h1 className="text-3xl font-bold mb-2">{product.name}</h1>
          
          <div className="flex items-center justify-between mb-4">
            <div>
              <span className="text-3xl font-bold text-blue-400">${product.price}</span>
              <p className="text-gray-400">{product.brand}</p>
            </div>
            
            {/* UNIFIED WISHLIST BUTTON */}
            <WishlistButton 
              productId={product.id} 
              size="default"
              showTooltip={true}
            />
          </div>
          
          {/* Stock Status - Once */}
          {product.stock === 1 && (
            <div className="bg-red-500/20 border border-red-500 text-red-400 px-3 py-2 rounded mb-4">
              üî¥ Only 1 left in stock!
            </div>
          )}
          
          {/* Condition Badge */}
          {product.condition && (
            <div className="inline-block bg-yellow-500 text-black px-3 py-1 rounded text-sm mb-4">
              {product.condition}
            </div>
          )}
          
          {/* Views */}
          <p className="text-gray-400 text-sm mb-4">üëÅ {product.views || 0} views</p>
          
          {/* Description */}
          <p className="text-gray-300 mb-6">{product.description}</p>
          
          {/* Key Specs - Clean Table */}
          <div className="bg-gray-800 rounded-lg p-4 mb-6">
            <h3 className="font-semibold mb-3">Key Specifications</h3>
            <table className="w-full">
              <tbody>
                {product.weight && (
                  <tr>
                    <td className="text-gray-400 py-2">Weight Range</td>
                    <td className="text-white">{product.weight}</td>
                  </tr>
                )}
                {product.increments && (
                  <tr>
                    <td className="text-gray-400 py-2">Increments</td>
                    <td className="text-white">{product.increments}</td>
                  </tr>
                )}
                {/* Add other specs without repetition */}
              </tbody>
            </table>
          </div>
          
          {/* Add to Cart Section */}
          <div className="flex items-center gap-4">
            <QuantitySelector 
              quantity={quantity}
              onChange={setQuantity}
              max={product.stock}
            />
            <AddToCartButton 
              productId={product.id}
              stock={product.stock}
              quantity={quantity}
              variant="default"
              className="flex-1"
            />
          </div>
          
          {/* Shipping Info */}
          <div className="grid grid-cols-3 gap-4 mt-8">
            <div className="text-center">
              <Truck className="w-6 h-6 mx-auto mb-2 text-blue-400" />
              <p className="text-sm">Fast Shipping</p>
              <p className="text-xs text-gray-400">2-3 business days</p>
            </div>
            <div className="text-center">
              <Shield className="w-6 h-6 mx-auto mb-2 text-blue-400" />
              <p className="text-sm">Inspected</p>
              <p className="text-xs text-gray-400">Quality guaranteed</p>
            </div>
            <div className="text-center">
              <RefreshCw className="w-6 h-6 mx-auto mb-2 text-blue-400" />
              <p className="text-sm">30-Day Returns</p>
              <p className="text-xs text-gray-400">Easy returns</p>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};
4. BACKEND FIX - Ensure DELETE endpoint accepts body:
javascript// Make sure the DELETE endpoint reads the body
app.delete('/api/wishlist', requireAuth, async (req, res) => {
  try {
    const { productId } = req.body; // Read from body
    const userId = req.userId;
    
    console.log('Remove from wishlist - userId:', userId, 'productId:', productId);
    
    if (!productId) {
      return res.status(400).json({ message: 'Product ID required' });
    }
    
    await storage.removeFromWishlist(userId, productId);
    
    res.json({ success: true, message: 'Removed from wishlist' });
  } catch (error) {
    console.error('Wishlist remove error:', error);
    res.status(500).json({ error: 'Failed to remove from wishlist' });
  }
});
5. CLEAN UP DUPLICATE TEXT:
Search and remove:

Multiple occurrences of weight (48 lbs shown 3 times!)
Redundant "Only 1 left!" badges
Duplicate condition badges
Multiple stock indicators

SUMMARY OF CHANGES:

‚úÖ Fix wishlist DELETE to include productId
‚úÖ Clean product cards - show each info only ONCE
‚úÖ Use unified WishlistButton everywhere
‚úÖ Consistent UI between listing and product pages
‚úÖ Remove all redundant text/badges

The UI should now be clean, consistent, and functional!