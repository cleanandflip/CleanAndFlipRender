Duplicate Code Cleanup Instructions for Replit
1. IMMEDIATE FIX - Remove Duplicate deleteProduct Method
typescript// In your storage/products file, you have TWO deleteProduct methods
// KEEP only the one with proper foreign key handling (the comprehensive one)
// DELETE the simpler duplicate version
2. SEARCH FOR ALL DUPLICATES IN CODEBASE
Run these commands to find duplicates:
bash# Find duplicate function declarations
grep -r "export.*function.*{" client/src/ | sort | uniq -d
grep -r "export.*const.*=.*(" client/src/ | sort | uniq -d

# Find duplicate method names in same files
find . -name "*.ts" -o -name "*.tsx" | xargs grep -l "deleteProduct" | xargs grep -n "deleteProduct"

# Check for duplicate API endpoints
grep -r "app\.(get\|post\|put\|delete)" server/ | sort | uniq -d
3. COMMON DUPLICATE PATTERNS TO CHECK
A. Multiple Export Statements
typescript// ❌ BAD - Duplicate exports
export const deleteProduct = async (id) => { ... }
// ... later in same file
export const deleteProduct = async (productId) => { ... }

// ✅ GOOD - Single export
export const deleteProduct = async (id: string) => {
  // Complete implementation with FK handling
}
B. Duplicate Route Handlers
typescript// Check server routes for duplicates like:
app.delete('/api/products/:id', ...)
app.delete('/api/admin/products/:id', ...)
// Make sure they're not doing the same thing
C. Duplicate Component Definitions
typescript// Search for duplicate React components
find client/src -name "*.tsx" -exec grep -l "function ProductCard\|const ProductCard" {} \;
4. AUTOMATED DUPLICATE DETECTION SCRIPT
Create scripts/find-duplicates.js:
javascriptconst fs = require('fs');
const path = require('path');

function findDuplicateFunctions(dir) {
  const functions = new Map();
  const duplicates = [];

  function scanFile(filePath) {
    const content = fs.readFileSync(filePath, 'utf8');
    const functionMatches = content.matchAll(/(?:export\s+)?(?:async\s+)?function\s+(\w+)|(?:export\s+)?const\s+(\w+)\s*=/g);
    
    for (const match of functionMatches) {
      const funcName = match[1] || match[2];
      if (!functions.has(funcName)) {
        functions.set(funcName, []);
      }
      functions.get(funcName).push(filePath);
    }
  }

  function walkDir(dir) {
    const files = fs.readdirSync(dir);
    files.forEach(file => {
      const filePath = path.join(dir, file);
      const stat = fs.statSync(filePath);
      if (stat.isDirectory() && !file.startsWith('.') && file !== 'node_modules') {
        walkDir(filePath);
      } else if (file.endsWith('.ts') || file.endsWith('.tsx') || file.endsWith('.js')) {
        scanFile(filePath);
      }
    });
  }

  walkDir(dir);

  // Find duplicates
  functions.forEach((files, funcName) => {
    if (files.length > 1) {
      duplicates.push({ funcName, files });
    }
  });

  return duplicates;
}

// Run the scan
const duplicates = findDuplicateFunctions('./client/src');
console.log('Duplicate functions found:', duplicates);
5. SPECIFIC AREAS TO CHECK
Storage/Database Functions
bash# Check for duplicate database operations
grep -r "deleteProduct\|removeProduct\|destroyProduct" --include="*.ts" .
grep -r "createProduct\|addProduct\|insertProduct" --include="*.ts" .
grep -r "updateProduct\|editProduct\|modifyProduct" --include="*.ts" .
API Endpoints
bash# Find duplicate API routes
grep -r "router\.\|app\." server/ | grep -E "(get|post|put|delete|patch)" | sort | uniq -d
React Hooks
bash# Find duplicate custom hooks
grep -r "export.*use[A-Z]" client/src/hooks/ | sort
6. CLEANUP CHECKLIST

 Remove duplicate deleteProduct method (keep the one with FK handling)
 Check for duplicate API endpoints with same functionality
 Consolidate similar utility functions
 Remove unused imports and exports
 Check for duplicate React components
 Verify no duplicate database schema definitions
 Remove commented-out code blocks
 Consolidate duplicate type definitions

7. PREVENT FUTURE DUPLICATES
Add ESLint rule to eslintrc.json:
json{
  "rules": {
    "no-duplicate-imports": "error",
    "no-redeclare": "error",
    "no-dupe-keys": "error",
    "no-dupe-class-members": "error"
  }
}
8. QUICK MANUAL SCAN COMMANDS
bash# Find files with potential duplicates
find . -name "*.ts" -o -name "*.tsx" | xargs wc -l | sort -n | tail -20

# Search for copy-paste patterns
grep -r "TODO\|FIXME\|HACK\|XXX" --include="*.ts" --include="*.tsx" .

# Find similar function names
grep -r "function\|const.*=.*=>" --include="*.ts" . | cut -d: -f2 | sort | uniq -c | sort -n
This cleanup will:

Remove the duplicate deleteProduct and similar duplicates
Prevent build errors and unexpected behavior
Make the codebase cleaner and more maintainable
Reduce confusion about which version to use

Start with removing the duplicate deleteProduct method, keeping only the version with proper foreign key constraint handling!