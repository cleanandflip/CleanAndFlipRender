Complete Design System with Outline Theme - Instructions for Replit
Instructions for Replit:
"Create a comprehensive design system with two complementary themes: filled buttons for actions and outline styles for fields, dropdowns, and forms. Ensure COMPLETE consistency across the entire site.
PHASE 1: CREATE OUTLINE THEME SYSTEM
Create client/src/styles/outline-theme.css:
css/* Outline Theme Variables */
:root {
  /* Outline Colors */
  --outline-default: rgba(100, 116, 139, 0.5);
  --outline-hover: rgba(148, 163, 184, 0.6);
  --outline-focus: rgba(96, 165, 250, 0.8);
  --outline-active: rgba(59, 130, 246, 1);
  --outline-error: rgba(239, 68, 68, 0.8);
  --outline-success: rgba(34, 197, 94, 0.8);
  
  /* Field Background */
  --field-bg: rgba(30, 41, 59, 0.3);
  --field-bg-hover: rgba(30, 41, 59, 0.5);
  --field-bg-focus: rgba(30, 41, 59, 0.7);
  --field-bg-disabled: rgba(30, 41, 59, 0.2);
  
  /* Field Text */
  --field-text: #E2E8F0;
  --field-text-placeholder: #64748B;
  --field-text-disabled: #475569;
  --field-label: #94A3B8;
  
  /* Field Effects */
  --field-shadow: 0 1px 2px rgba(0, 0, 0, 0.05);
  --field-shadow-focus: 0 0 0 3px rgba(96, 165, 250, 0.1);
  --field-transition: all 0.2s cubic-bezier(0.4, 0, 0.2, 1);
}

/* Base Outline Button */
.btn-outline {
  position: relative;
  display: inline-flex;
  align-items: center;
  justify-content: center;
  gap: 0.5rem;
  padding: 0.625rem 1rem;
  font-weight: 500;
  font-size: 0.875rem;
  line-height: 1.25rem;
  border-radius: 0.5rem;
  background: var(--field-bg);
  border: 1.5px solid var(--outline-default);
  color: var(--field-text);
  transition: var(--field-transition);
  cursor: pointer;
  outline: none;
}

.btn-outline:hover:not(:disabled) {
  background: var(--field-bg-hover);
  border-color: var(--outline-hover);
  transform: translateY(-1px);
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
}

.btn-outline:focus-visible {
  border-color: var(--outline-focus);
  box-shadow: var(--field-shadow-focus);
}

.btn-outline:active:not(:disabled) {
  transform: translateY(0);
  background: var(--field-bg-focus);
}

.btn-outline:disabled {
  background: var(--field-bg-disabled);
  color: var(--field-text-disabled);
  border-color: rgba(100, 116, 139, 0.3);
  cursor: not-allowed;
}

/* Outline Variants */
.btn-outline-primary {
  border-color: rgba(96, 165, 250, 0.5);
  color: #93BBFC;
}

.btn-outline-primary:hover:not(:disabled) {
  border-color: rgba(96, 165, 250, 0.8);
  background: rgba(59, 130, 246, 0.1);
}

.btn-outline-success {
  border-color: rgba(34, 197, 94, 0.5);
  color: #4ADE80;
}

.btn-outline-danger {
  border-color: rgba(239, 68, 68, 0.5);
  color: #F87171;
}

/* Form Fields Base */
.field {
  width: 100%;
  padding: 0.75rem 1rem;
  background: var(--field-bg);
  border: 1.5px solid var(--outline-default);
  border-radius: 0.5rem;
  color: var(--field-text);
  font-size: 0.875rem;
  transition: var(--field-transition);
  outline: none;
}

.field:hover:not(:disabled):not(:focus) {
  background: var(--field-bg-hover);
  border-color: var(--outline-hover);
}

.field:focus {
  background: var(--field-bg-focus);
  border-color: var(--outline-focus);
  box-shadow: var(--field-shadow-focus);
}

.field:disabled {
  background: var(--field-bg-disabled);
  color: var(--field-text-disabled);
  border-color: rgba(100, 116, 139, 0.3);
  cursor: not-allowed;
}

.field::placeholder {
  color: var(--field-text-placeholder);
}

/* Field Variants */
.field-error {
  border-color: var(--outline-error);
}

.field-error:focus {
  box-shadow: 0 0 0 3px rgba(239, 68, 68, 0.1);
}

.field-success {
  border-color: var(--outline-success);
}

/* Select/Dropdown Styling */
.select-field {
  appearance: none;
  background-image: url("data:image/svg+xml,%3Csvg width='12' height='8' viewBox='0 0 12 8' fill='none' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='M1 1.5L6 6.5L11 1.5' stroke='%2394A3B8' stroke-width='1.5' stroke-linecap='round' stroke-linejoin='round'/%3E%3C/svg%3E");
  background-repeat: no-repeat;
  background-position: right 1rem center;
  padding-right: 2.5rem;
}

/* Checkbox & Radio */
.checkbox,
.radio {
  width: 1.25rem;
  height: 1.25rem;
  background: var(--field-bg);
  border: 1.5px solid var(--outline-default);
  border-radius: 0.25rem;
  transition: var(--field-transition);
  cursor: pointer;
}

.radio {
  border-radius: 50%;
}

.checkbox:checked,
.radio:checked {
  background: var(--btn-primary-bg);
  border-color: var(--btn-primary-bg);
}

/* Dropdown Menu */
.dropdown-menu {
  background: rgba(24, 32, 44, 0.98);
  border: 1.5px solid var(--outline-default);
  border-radius: 0.5rem;
  backdrop-filter: blur(12px);
  box-shadow: 0 10px 25px rgba(0, 0, 0, 0.3);
  padding: 0.5rem;
}

.dropdown-item {
  padding: 0.5rem 0.75rem;
  border-radius: 0.375rem;
  color: var(--field-text);
  transition: var(--field-transition);
  cursor: pointer;
}

.dropdown-item:hover {
  background: var(--field-bg-hover);
  color: var(--text-primary);
}

.dropdown-item:focus {
  background: var(--field-bg-focus);
  outline: none;
  box-shadow: inset 0 0 0 1px var(--outline-focus);
}

/* Filter Buttons */
.filter-btn {
  padding: 0.5rem 1rem;
  background: var(--field-bg);
  border: 1.5px solid var(--outline-default);
  border-radius: 0.5rem;
  color: var(--field-text);
  font-size: 0.875rem;
  font-weight: 500;
  transition: var(--field-transition);
  cursor: pointer;
  white-space: nowrap;
}

.filter-btn:hover {
  background: var(--field-bg-hover);
  border-color: var(--outline-hover);
  transform: translateY(-1px);
}

.filter-btn.active {
  background: rgba(59, 130, 246, 0.2);
  border-color: var(--outline-active);
  color: #93BBFC;
}

/* Search Input */
.search-input {
  padding-left: 2.5rem;
  background: var(--field-bg);
  border: 1.5px solid var(--outline-default);
}

.search-input:focus {
  background: var(--field-bg-focus);
  border-color: var(--outline-focus);
  box-shadow: 0 0 0 3px rgba(96, 165, 250, 0.1);
}

/* Form Groups */
.form-group {
  margin-bottom: 1.5rem;
}

.form-label {
  display: block;
  margin-bottom: 0.5rem;
  color: var(--field-label);
  font-size: 0.875rem;
  font-weight: 500;
}

.form-hint {
  margin-top: 0.375rem;
  color: var(--field-text-placeholder);
  font-size: 0.75rem;
}

.form-error {
  margin-top: 0.375rem;
  color: var(--text-danger);
  font-size: 0.75rem;
}

/* Switch/Toggle */
.switch {
  position: relative;
  width: 3rem;
  height: 1.5rem;
  background: var(--field-bg);
  border: 1.5px solid var(--outline-default);
  border-radius: 0.75rem;
  transition: var(--field-transition);
  cursor: pointer;
}

.switch-thumb {
  position: absolute;
  top: 0.125rem;
  left: 0.125rem;
  width: 1rem;
  height: 1rem;
  background: var(--field-text);
  border-radius: 50%;
  transition: var(--field-transition);
}

.switch.checked {
  background: rgba(59, 130, 246, 0.2);
  border-color: var(--outline-active);
}

.switch.checked .switch-thumb {
  transform: translateX(1.5rem);
  background: #60A5FA;
}

/* Tab Navigation */
.tab-nav {
  display: flex;
  gap: 0.25rem;
  padding: 0.25rem;
  background: var(--field-bg);
  border: 1.5px solid var(--outline-default);
  border-radius: 0.625rem;
}

.tab-btn {
  padding: 0.5rem 1rem;
  border-radius: 0.375rem;
  color: var(--field-text);
  font-weight: 500;
  transition: var(--field-transition);
  cursor: pointer;
}

.tab-btn:hover {
  background: var(--field-bg-hover);
}

.tab-btn.active {
  background: rgba(59, 130, 246, 0.2);
  color: #93BBFC;
  box-shadow: 0 1px 2px rgba(0, 0, 0, 0.05);
}
PHASE 2: CREATE FORM COMPONENTS
Create client/src/components/ui/FormElements.tsx:
typescriptimport { forwardRef, InputHTMLAttributes, SelectHTMLAttributes } from 'react';
import { cn } from '@/lib/utils';

// Input Component
export const Input = forwardRef<HTMLInputElement, InputHTMLAttributes<HTMLInputElement> & {
  error?: boolean;
  success?: boolean;
}>(({ className, error, success, ...props }, ref) => {
  return (
    <input
      ref={ref}
      className={cn(
        'field',
        error && 'field-error',
        success && 'field-success',
        className
      )}
      {...props}
    />
  );
});

// Select Component
export const Select = forwardRef<HTMLSelectElement, SelectHTMLAttributes<HTMLSelectElement> & {
  error?: boolean;
}>(({ className, error, children, ...props }, ref) => {
  return (
    <select
      ref={ref}
      className={cn(
        'field select-field',
        error && 'field-error',
        className
      )}
      {...props}
    >
      {children}
    </select>
  );
});

// Textarea Component
export const Textarea = forwardRef<HTMLTextAreaElement, InputHTMLAttributes<HTMLTextAreaElement> & {
  error?: boolean;
}>(({ className, error, ...props }, ref) => {
  return (
    <textarea
      ref={ref}
      className={cn(
        'field',
        error && 'field-error',
        'resize-none',
        className
      )}
      {...props}
    />
  );
});

// Form Group Component
export const FormGroup = ({ 
  label, 
  hint, 
  error, 
  children, 
  required 
}: {
  label?: string;
  hint?: string;
  error?: string;
  children: React.ReactNode;
  required?: boolean;
}) => {
  return (
    <div className="form-group">
      {label && (
        <label className="form-label">
          {label}
          {required && <span className="text-danger ml-1">*</span>}
        </label>
      )}
      {children}
      {hint && !error && <p className="form-hint">{hint}</p>}
      {error && <p className="form-error">{error}</p>}
    </div>
  );
};

// Filter Button Component
export const FilterButton = forwardRef<HTMLButtonElement, ButtonHTMLAttributes<HTMLButtonElement> & {
  active?: boolean;
  count?: number;
}>(({ className, active, count, children, ...props }, ref) => {
  return (
    <button
      ref={ref}
      className={cn(
        'filter-btn',
        active && 'active',
        className
      )}
      {...props}
    >
      {children}
      {count !== undefined && count > 0 && (
        <span className="ml-2 px-1.5 py-0.5 bg-blue-500/20 text-blue-300 text-xs rounded-full">
          {count}
        </span>
      )}
    </button>
  );
});

// Checkbox Component
export const Checkbox = forwardRef<HTMLInputElement, InputHTMLAttributes<HTMLInputElement> & {
  label?: string;
}>(({ className, label, ...props }, ref) => {
  return (
    <label className="flex items-center gap-2 cursor-pointer">
      <input
        ref={ref}
        type="checkbox"
        className={cn('checkbox', className)}
        {...props}
      />
      {label && <span className="text-secondary">{label}</span>}
    </label>
  );
});

// Switch Component
export const Switch = forwardRef<HTMLInputElement, InputHTMLAttributes<HTMLInputElement> & {
  label?: string;
}>(({ className, label, checked, ...props }, ref) => {
  return (
    <label className="flex items-center gap-3 cursor-pointer">
      <div className={cn('switch', checked && 'checked', className)}>
        <div className="switch-thumb" />
        <input
          ref={ref}
          type="checkbox"
          className="sr-only"
          checked={checked}
          {...props}
        />
      </div>
      {label && <span className="text-secondary">{label}</span>}
    </label>
  );
});
PHASE 3: UPDATE ALL FORMS
Login Form
typescript// Update login form fields
<form onSubmit={handleSubmit}>
  <FormGroup label="Email" error={errors.email} required>
    <Input
      type="email"
      placeholder="your@email.com"
      value={email}
      onChange={(e) => setEmail(e.target.value)}
      error={!!errors.email}
      autoComplete="email"
    />
  </FormGroup>
  
  <FormGroup label="Password" error={errors.password} required>
    <Input
      type="password"
      placeholder="Enter your password"
      value={password}
      onChange={(e) => setPassword(e.target.value)}
      error={!!errors.password}
      autoComplete="current-password"
    />
  </FormGroup>
  
  <Checkbox 
    label="Remember me"
    checked={rememberMe}
    onChange={(e) => setRememberMe(e.target.checked)}
  />
  
  <Button type="submit" variant="primary" className="w-full mt-4">
    Sign In
  </Button>
</form>
Registration Form
typescript// Update registration form
<form onSubmit={handleSubmit}>
  <div className="grid grid-cols-2 gap-4">
    <FormGroup label="First Name" error={errors.firstName} required>
      <Input
        placeholder="John"
        value={firstName}
        onChange={(e) => setFirstName(e.target.value)}
        error={!!errors.firstName}
      />
    </FormGroup>
    
    <FormGroup label="Last Name" error={errors.lastName} required>
      <Input
        placeholder="Doe"
        value={lastName}
        onChange={(e) => setLastName(e.target.value)}
        error={!!errors.lastName}
      />
    </FormGroup>
  </div>
  
  <FormGroup label="Email" error={errors.email} required>
    <Input
      type="email"
      placeholder="your@email.com"
      value={email}
      onChange={(e) => setEmail(e.target.value)}
      error={!!errors.email}
    />
  </FormGroup>
  
  <FormGroup 
    label="Password" 
    hint="Must be at least 8 characters"
    error={errors.password} 
    required
  >
    <Input
      type="password"
      placeholder="Create a password"
      value={password}
      onChange={(e) => setPassword(e.target.value)}
      error={!!errors.password}
    />
  </FormGroup>
  
  <FormGroup>
    <Checkbox 
      label="I agree to the Terms of Service and Privacy Policy"
      checked={agreeToTerms}
      onChange={(e) => setAgreeToTerms(e.target.checked)}
      required
    />
  </FormGroup>
  
  <Button type="submit" variant="primary" className="w-full">
    Create Account
  </Button>
</form>
PHASE 4: UPDATE NAVIGATION & DROPDOWNS
Search Bar
typescript// Update search input
<div className="relative">
  <Search className="absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-secondary" />
  <Input
    type="search"
    placeholder="Search equipment..."
    className="search-input pl-10"
    value={searchQuery}
    onChange={(e) => setSearchQuery(e.target.value)}
  />
</div>
Navigation Dropdown
typescript// Update dropdown menu
<div className="dropdown-menu">
  <button className="dropdown-item">
    <User className="mr-2 h-4 w-4" />
    My Dashboard
  </button>
  <button className="dropdown-item">
    <Package className="mr-2 h-4 w-4" />
    Order History
  </button>
  <button className="dropdown-item">
    <FileText className="mr-2 h-4 w-4" />
    My Submissions
  </button>
  <div className="my-1 h-px bg-outline-default" />
  <button className="dropdown-item text-danger">
    <LogOut className="mr-2 h-4 w-4" />
    Sign Out
  </button>
</div>
PHASE 5: UPDATE FILTER COMPONENTS
typescript// Product filters
<div className="flex flex-wrap gap-2">
  <FilterButton
    active={filters.category === 'barbells'}
    onClick={() => setFilter('category', 'barbells')}
  >
    Barbells
  </FilterButton>
  
  <FilterButton
    active={filters.category === 'dumbbells'}
    onClick={() => setFilter('category', 'dumbbells')}
  >
    Dumbbells
  </FilterButton>
  
  <FilterButton
    active={showFilters}
    onClick={() => setShowFilters(!showFilters)}
    count={activeFilterCount}
  >
    <Filter className="mr-2 h-4 w-4" />
    Filters
  </FilterButton>
</div>

// Price range filter
<FormGroup label="Price Range">
  <div className="flex items-center gap-2">
    <Input
      type="number"
      placeholder="Min"
      value={minPrice}
      onChange={(e) => setMinPrice(e.target.value)}
      className="w-24"
    />
    <span className="text-secondary">to</span>
    <Input
      type="number"
      placeholder="Max"
      value={maxPrice}
      onChange={(e) => setMaxPrice(e.target.value)}
      className="w-24"
    />
  </div>
</FormGroup>
PHASE 6: UPDATE DASHBOARD TABS
typescript// Dashboard tab navigation
<div className="tab-nav">
  <button 
    className={cn('tab-btn', activeTab === 'orders' && 'active')}
    onClick={() => setActiveTab('orders')}
  >
    Orders
  </button>
  <button 
    className={cn('tab-btn', activeTab === 'submissions' && 'active')}
    onClick={() => setActiveTab('submissions')}
  >
    Submissions
  </button>
  <button 
    className={cn('tab-btn', activeTab === 'wishlist' && 'active')}
    onClick={() => setActiveTab('wishlist')}
  >
    Wishlist
  </button>
  <button 
    className={cn('tab-btn', activeTab === 'profile' && 'active')}
    onClick={() => setActiveTab('profile')}
  >
    Profile
  </button>
  <button 
    className={cn('tab-btn', activeTab === 'addresses' && 'active')}
    onClick={() => setActiveTab('addresses')}
  >
    Addresses
  </button>
</div>
PHASE 7: UPDATE ADMIN FORMS
typescript// Product edit form
<FormGroup label="Product Name" error={errors.name} required>
  <Input
    value={product.name}
    onChange={(e) => setProduct({...product, name: e.target.value})}
    error={!!errors.name}
  />
</FormGroup>

<FormGroup label="Category" required>
  <Select
    value={product.categoryId}
    onChange={(e) => setProduct({...product, categoryId: e.target.value})}
  >
    <option value="">Select a category</option>
    {categories.map(cat => (
      <option key={cat.id} value={cat.id}>{cat.name}</option>
    ))}
  </Select>
</FormGroup>

<FormGroup label="Description">
  <Textarea
    rows={4}
    value={product.description}
    onChange={(e) => setProduct({...product, description: e.target.value})}
    placeholder="Enter product description..."
  />
</FormGroup>

<FormGroup label="Settings">
  <Switch
    label="Featured Product"
    checked={product.featured}
    onChange={(e) => setProduct({...product, featured: e.target.checked})}
  />
  <Switch
    label="Active"
    checked={product.active}
    onChange={(e) => setProduct({...product, active: e.target.checked})}
  />
</FormGroup>
PHASE 8: GLOBAL IMPLEMENTATION SCRIPT
Create scripts/implement-design-system.js:
javascriptconst fs = require('fs');
const path = require('path');
const glob = require('glob');

const replacements = [
  // Input replacements
  { from: /<input([^>]*?)className="([^"]*?)"([^>]*?)>/g, 
    to: '<Input$1className="field $2"$3>' },
  
  // Select replacements
  { from: /<select([^>]*?)className="([^"]*?)"([^>]*?)>/g, 
    to: '<Select$1className="field select-field $2"$3>' },
  
  // Textarea replacements
  { from: /<textarea([^>]*?)className="([^"]*?)"([^>]*?)>/g, 
    to: '<Textarea$1className="field $2"$3>' },
  
  // Button outline replacements
  { from: /className="[^"]*?border[^"]*?"/g, 
    to: 'className="btn-outline"' },
  
  // Remove hardcoded colors
  { from: /bg-gray-\d+/g, to: '' },
  { from: /border-gray-\d+/g, to: '' },
  { from: /text-white/g, to: 'text-primary' },
  { from: /text-gray-\d+/g, to: 'text-secondary' },
];

// Process all TSX files
glob('client/src/**/*.tsx', (err, files) => {
  files.forEach(file => {
    let content = fs.readFileSync(file, 'utf8');
    let changed = false;
    
    replacements.forEach(({ from, to }) => {
      if (from.test(content)) {
        content = content.replace(from, to);
        changed = true;
      }
    });
    
    if (changed) {
      // Add imports if needed
      if (!content.includes("from '@/components/ui/FormElements'")) {
        content = `import { Input, Select, Textarea, FormGroup, FilterButton, Checkbox, Switch } from '@/components/ui/FormElements';\n` + content;
      }
      
      fs.writeFileSync(file, content);
      console.log(`Updated: ${file}`);
    }
  });
});
PHASE 9: IMPORT ALL STYLES
Update client/src/index.css:
css/* Design System Imports */
@import './styles/button-theme.css';
@import './styles/outline-theme.css';
@import './styles/typography.css';

/* Remove ALL old styles for buttons, inputs, etc. */

/* Global Resets */
* {
  box-sizing: border-box;
}

body {
  background: #0F172A;
  color: var(--text-primary);
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
}

/* Ensure consistency */
button, input, select, textarea {
  font-family: inherit;
  font-size: inherit;
  line-height: inherit;
}

/* Remove default focus styles */
*:focus {
  outline: none;
}
PHASE 10: VERIFICATION CHECKLIST
Run these checks:
bash# Find remaining hardcoded styles
echo "=== STYLE AUDIT ===" > style-audit.txt

# Find hardcoded colors
grep -rn "bg-\|text-\|border-" --include="*.tsx" client/src/ | grep -v "var(\|field\|btn\|outline" >> style-audit.txt

# Find unstyled inputs
grep -rn "<input\|<select\|<textarea" --include="*.tsx" client/src/ | grep -v "Input\|Select\|Textarea" >> style-audit.txt

# Find inline styles
grep -rn "style=" --include="*.tsx" client/src/ >> style-audit.txt

# Check all forms
grep -rn "form\|Form" --include="*.tsx" client/src/ >> style-audit.txt

# Verify component usage
echo "\n=== COMPONENT USAGE ===" >> style-audit.txt
grep -c "<Input" client/src/**/*.tsx >> style-audit.txt
grep -c "<Button" client/src/**/*.tsx >> style-audit.txt
grep -c "<FilterButton" client/src/**/*.tsx >> style-audit.txt
FINAL RESULT
This implementation provides:

✅ Consistent outline theme for all form elements
✅ Matching but distinct button styles
✅ Unified dropdown and menu styling
✅ Consistent filter buttons
✅ Proper form groups with labels and errors
✅ Tab navigation styling
✅ Search input consistency
✅ Checkbox, radio, and switch components
✅ Full accessibility support
✅ Dark theme optimized colors
✅ Smooth animations throughout
✅ No hardcoded colors anywhere

