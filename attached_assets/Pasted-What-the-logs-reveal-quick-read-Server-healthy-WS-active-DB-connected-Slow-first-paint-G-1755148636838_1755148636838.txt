What the logs reveal (quick read)
‚úÖ Server healthy; WS active; DB connected.

üê¢ Slow first paint: GET / ~2s and index.css ~2.3s on initial load (likely Vite/Tailwind dev scan + unoptimized deps).

üîÅ Both old useWebSocket.ts / useWebSocketState.tsx and new useSingletonSocket.tsx are loaded ‚Üí duplication risk.

üß© GET /api/products/featured returns [] (Content-Length: 2). Likely no featured seed or query filter too strict.

üîê /api/user 401 first, later 200. Fine if unauthenticated ‚Üí authenticated flow, but admin calls log userId: undefined.

‚ùå Critical DB error on product update:

vbnet
Copy
Edit
error: violates foreign key "products_category_id_categories_id_fk"
detail: Key (category_id)=(Strength Training) is not present in table "categories".
Client is sending a category name instead of the category id (UUID). Needs DTO + UI fix, plus graceful 400 on PG 23503.

üëâ Paste this into Replit (single instruction)
‚ÄúReplit, apply the following changes end-to-end and verify with the checklist at the bottom.‚Äù

A) Fix product update FK error (category id vs name)
Server validation & handler

File: server/routes.ts

For PUT /api/admin/products/:id, require categoryId as a UUID‚Äînot a name.

Use zod (or your validator) to enforce:

ts
Copy
Edit
// server/routes.ts (excerpt)
import { z } from "zod";

const updateProductSchema = z.object({
  name: z.string().min(1),
  price: z.number().nonnegative(),
  sku: z.string().min(1),
  description: z.string().optional(),
  images: z.array(z.string().url()).default([]),
  status: z.enum(["draft", "active", "archived"]),
  featured: z.boolean().default(false),
  categoryId: z.string().uuid(), // << the key fix
  // add other fields here...
});

router.put("/api/admin/products/:id", async (req, res) => {
  try {
    const { id } = req.params;
    const data = updateProductSchema.parse(req.body);
    await db.updateProduct(id, data); // must persist data.categoryId ‚Üí category_id
    res.status(200).json({ ok: true });
  } catch (err:any) {
    // Map PG FK errors to 400 with a human message
    if (err?.code === "23503") {
      return res.status(400).json({ error: "Invalid categoryId: category does not exist." });
    }
    if (err?.name === "ZodError") {
      return res.status(400).json({ error: "Invalid payload", details: err.issues });
    }
    req.log?.error?.(err);
    res.status(500).json({ error: "Server error" });
  }
});
Server storage layer

File: server/storage.ts (around the failing line ~466)

Ensure we set category_id = $categoryId (UUID) rather than any name:

ts
Copy
Edit
// server/storage.ts (excerpt)
async updateProduct(id: string, payload: {
  name: string; price: number; sku: string; description?: string;
  images: string[]; status: "draft"|"active"|"archived"; featured: boolean;
  categoryId: string;
}) {
  const { name, price, sku, description, images, status, featured, categoryId } = payload;

  await this.sql`
    UPDATE products SET
      name = ${name},
      price = ${price},
      sku = ${sku},
      description = ${description ?? null},
      images = ${this.sql.array(images, 'text')},
      status = ${status},
      featured = ${featured},
      category_id = ${categoryId}
    WHERE id = ${id}
  `;
}
Client admin modal: send categoryId (UUID)

File: src/components/admin/modals/EnhancedProductModal.tsx

Build dropdown options from categories as { label: c.name, value: c.id }.

Bind form field categoryId (not category):

tsx
Copy
Edit
// EnhancedProductModal.tsx (excerpt)
const categoryOptions = categories.map(c => ({ label: c.name, value: c.id }));

<Dropdown
  options={categoryOptions}
  value={form.categoryId ?? null}
  onChange={(v) => setForm(f => ({ ...f, categoryId: v }))}
/>

// On submit:
await api.put(`/api/admin/products/${productId}`, {
  ...form,
  categoryId: form.categoryId, // ensure UUID goes up
});
Optional safety: name‚Üíid mapping shim
If some legacy clients still send category as a name, temporarily support it:

ts
Copy
Edit
if (!body.categoryId && typeof body.category === "string") {
  const row = await db.sql`SELECT id FROM categories WHERE name = ${body.category} LIMIT 1`;
  if (row.length) body.categoryId = row[0].id;
}
B) WebSocket consolidation (remove all old hooks, one singleton)
Symptoms: Logs show useWebSocket.ts, useWebSocketState.tsx, and useSingletonSocket.tsx all loading. Replace usages with the singleton to avoid duplicate sockets/race conditions.

Provide a small compatibility shim (so nothing breaks mid-refactor)

File: src/hooks/useWebSocket.ts

Content: re-export the singleton:

ts
Copy
Edit
export { useSingletonSocket as default } from "./useSingletonSocket";
Search & replace imports

Replace all useWebSocket and useWebSocketState with useSingletonSocket.

bash
Copy
Edit
# Linux shell in Replit
rg -l "useWebSocketState|useWebSocket" src | xargs -I{} sed -i \
  -e 's/useWebSocketState/useSingletonSocket/g' \
  -e 's/useWebSocket/useSingletonSocket/g' {}
Guarantee one socket instance app-wide

File: src/hooks/useSingletonSocket.tsx

Ensure it memoizes a single connection, has exponential backoff, heartbeat (30s ping/pong), and queues outbound messages until open.

Server contract

File: server/websocket.ts

Make sure messages use a stable envelope:

ts
Copy
Edit
type WSMessage<T=unknown> = { type: string; ts: number; requestId?: string; data: T };
Enforce role/auth on connect; include clientId, role, heartbeat.

C) First-load performance (dev)
Vite optimizeDeps (big cuts to first page load)

File: vite.config.ts

ts
Copy
Edit
optimizeDeps: {
  include: [
    "react", "react-dom",
    "lucide-react",
    "framer-motion",
    "@radix-ui/react-dialog", "@radix-ui/react-toast", "@radix-ui/react-tabs",
    "@radix-ui/react-tooltip", "@radix-ui/react-separator", "@radix-ui/react-slot"
  ]
},
css: { devSourcemap: false }
Tailwind scan scope

File: tailwind.config.ts

ts
Copy
Edit
content: ["./index.html", "./src/**/*.{ts,tsx}"] // do NOT scan server/ or node_modules
Static asset headers (prod build)

Ensure gzip/brotli is enabled behind your prod server. (Dev slowness is acceptable; aim for <700ms on GET / after this.)

D) Featured products returning []
Confirm query and seeding:

File: server/routes.ts (GET /api/products/featured) ‚Äî should filter WHERE featured = true AND status = 'active'.

If empty, add a seed:

File: server/seeds.ts

ts
Copy
Edit
await sql`UPDATE products SET featured = true WHERE id = ${someKnownId}`;
Add an admin toggle in EnhancedProductModal tied to featured.

E) Admin auth enforcement
Logs show admin endpoints with userId: undefined. Add admin middleware:

File: server/routes.ts

ts
Copy
Edit
function requireAdmin(req,res,next){
  if (!req.user) return res.status(401).json({error: "Not authenticated"});
  if (req.user.role !== "admin") return res.status(403).json({error: "Forbidden"});
  next();
}
router.use("/api/admin", requireAdmin);
Ensure GET /api/user sets req.user via session/JWT.

F) Dropdown placeholder/readability fix
File: src/components/ui/Dropdown.tsx

Ensure selected vs placeholder styles are distinct and accessible:

tsx
Copy
Edit
const selected = options.find(o => o.value === value);
const isPlaceholder = !selected;

<span
  className={cn(
    "truncate",
    isPlaceholder ? "text-muted-foreground/70" : "text-foreground"
  )}
>
  {selected ? selected.label : placeholder}
</span>
G) Better error feedback for PG errors
Centralize PG error mapping (23503 FK, 23505 unique, etc.)

File: server/lib/pgErrors.ts

ts
Copy
Edit
export function mapPGError(e:any){
  if (e?.code === "23503") return { status: 400, msg: "Invalid foreign key reference." };
  if (e?.code === "23505") return { status: 409, msg: "Duplicate value." };
  return { status: 500, msg: "Server error." };
}
Use in all route catch blocks.

H) Health/observability bump
File: server/routes.ts (GET /status)

Add: ws: { clients: manager.count(), uptimeSec, lastHeartbeatMs }

Add: db: { pools, idle, waiting } if available.

Verification checklist (run these)
DB/Category

curl -X PUT /api/admin/products/<id> -d '{"name":"X","price":1,"sku":"S","categoryId":"<uuid>","status":"active","featured":false}' -H 'Content-Type: application/json'
‚Üí 200 OK

Try with a bogus categoryId ‚Üí 400 with Invalid categoryId message (not 500).

Admin UI

Open Admin ‚Üí Edit product ‚Üí Change Category via dropdown ‚Üí Save
‚Üí No error toast; product persists and shows the chosen category.

WebSockets

Confirm only one socket connects (no duplicate open/close logs when navigating).

/status now shows ws.clients >= 1 when UI open.

Featured products

Toggle featured in admin, reload Home
‚Üí GET /api/products/featured returns non-empty array.

Performance

First load of / now < ~800ms on dev after dependency prebundle.

No ‚ÄúSlow request detected‚Äù for index.css.

Auth

Access /api/admin/* when logged out ‚Üí 401.

Access as non-admin ‚Üí 403.

Access as admin ‚Üí 200 and userId logged.

End of instruction. Please implement and report diffs & results.