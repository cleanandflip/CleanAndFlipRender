fix list for every item in your Observability feed. It covers what to change, where, and code to use—plus noise-reduction so the dashboard stays useful.

A) Category images failing to load (Cloudinary)
Symptoms (many WARNs):

bash
Copy
Edit
Failed to load img: https://res.cloudinary.com/clean-flip/image/upload/v1/categories/*.jpg
1) Standardize how category images are referenced
Create: src/lib/cloudinary.ts

ts
Copy
Edit
const CLOUD = "clean-flip";
const BASE  = `https://res.cloudinary.com/${CLOUD}/image/upload`;

/** Build a themed, optimized URL. Keep slugs exact. */
export function categoryImg(slug: string, size = 512) {
  // Use f_auto & q_auto + cover crop; centralize transforms here only.
  return `${BASE}/f_auto,q_auto,c_fill,w_${size},h_${size}/v1/categories/${slug}.jpg`;
}

/** Single fallback used site-wide */
export const FALLBACK_IMG = `${BASE}/f_auto,q_auto/c_fit,w_512/v1/placeholders/category-fallback.png`;
Action: In your category data, store just the slug ("dumbbells", "kettlebells", …), not full URLs. If full URLs exist, replace with slugs in your seed/data file.

2) Add a safe image component with fallback + one-time logging
Create: src/components/ImageWithFallback.tsx

tsx
Copy
Edit
import { useRef, useState } from "react";
import { FALLBACK_IMG } from "@/lib/cloudinary";
import { reportClientError } from "@/lib/err"; // your local LETS client

const seen = new Set<string>(); // session dedupe

type Props = React.ImgHTMLAttributes<HTMLImageElement> & {
  logKey?: string; // identifier for observability (e.g., "category:<slug>")
};

export default function ImageWithFallback({ src, logKey, alt = "", ...rest }: Props) {
  const [current, setCurrent] = useState(src);
  const errored = useRef(false);

  return (
    <img
      {...rest}
      alt={alt}
      loading="lazy"
      decoding="async"
      src={current}
      onError={() => {
        if (!errored.current) {
          errored.current = true;
          // Log only once per unique URL per session
          if (current && !seen.has(current)) {
            seen.add(current);
            reportClientError({
              level: "warn",
              message: `Failed to load img: ${current}`,
              type: "ResourceError",
              extra: { logKey, kind: "img" },
            });
          }
          setCurrent(FALLBACK_IMG);
        }
      }}
    />
  );
}
3) Use it everywhere for category thumbs
Example: src/components/categories/CategoryTile.tsx

tsx
Copy
Edit
import ImageWithFallback from "@/components/ImageWithFallback";
import { categoryImg } from "@/lib/cloudinary";

export function CategoryTile({ slug, name }: { slug: string; name: string }) {
  return (
    <div className="tile">
      <ImageWithFallback
        src={categoryImg(slug, 512)}
        alt={name}
        logKey={`category:${slug}`}
        className="rounded-md object-cover w-28 h-28"
      />
      <div className="mt-2">{name}</div>
    </div>
  );
}
4) Fix slugs & verify existence quickly
Ensure the files exist in Cloudinary at:
v1/categories/<slug>.jpg for each slug you use:
dumbbells, kettlebells, weight-plates, barbells, adjustable-dumbbells, resistance-bands, medicine-balls, mats-accessories.

If names differ, either upload files to those paths or change slugs to match what you actually uploaded.

(Optional) add a media audit admin tool that HEAD-requests those URLs and lists 404s—only if you want.

B) Beacon script failing (external)
pgsql
Copy
Edit
Failed to load script: https://replit.com/public/js/beacon.js
This is non-critical. Make it optional or remove entirely.

Find and remove the <script> tag. If you want to keep it:

tsx
Copy
Edit
<script
  defer
  src="https://replit.com/public/js/beacon.js"
  onError={() => {
    // Don’t spam the dashboard
    // Optionally: report as info once per session if you care
  }}
/>
CSP note: if you keep it, ensure your CSP allows https://replit.com for script-src. If you don’t need it, delete it.

C) Reduce noise in LETS (observability) for expected resource errors
We want true signal, not spam. Add a client-side filter so known benign resource failures are downgraded or ignored.

Update: src/lib/err.ts (right before sending)

ts
Copy
Edit
const IGNORE_URL_PATTERNS = [
  /\/public\/js\/beacon\.js$/,                         // optional beacon
];
const DOWNGRADE_TO_INFO = [
  /res\.cloudinary\.com\/clean-flip\/image\/upload\/.*\/categories\/.*\.jpg$/,
];

export function reportClientError(payload: { level?: "error"|"warn"|"info"; message: string; type?: string; stack?: string; extra?: Record<string, any>; }) {
  try {
    const msg = payload.message || "";
    const matchUrl = /https?:\/\/[^\s]+/i.exec(msg)?.[0]; // extract URL if present

    if (matchUrl && IGNORE_URL_PATTERNS.some(rx => rx.test(matchUrl))) {
      return; // drop completely
    }
    let level = payload.level ?? "error";
    if (matchUrl && DOWNGRADE_TO_INFO.some(rx => rx.test(matchUrl))) {
      level = "info";
    }

    fetch("/api/observability/errors", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
        service: "client",
        level,
        env: import.meta.env.MODE === "production" ? "production" : "development",
        release: import.meta.env.VITE_APP_RELEASE,
        url: window.location.pathname + window.location.search,
        message: payload.message,
        type: payload.type,
        stack: payload.stack,
        user: window.__CF_USER ? { id: window.__CF_USER.id } : undefined,
        tags: { ua: navigator.userAgent },
        extra: payload.extra,
      }),
      keepalive: true,
    });
  } catch {}
}
Result: Cloudinary image 404s become info, the beacon script error is ignored, and your dashboard focuses on real issues.

D) Ensure Errors tab uses the Unified Dropdowns
Open src/pages/admin/observability.tsx (or /observability/index.tsx) and replace any local <select> / Radix / homegrown dropdowns with your shared dropdown.

tsx
Copy
Edit
import { Dropdown } from "@/components/ui/Dropdown"; // your unified component

const LEVELS = [
  { label: "All levels", value: "" },
  { label: "Error", value: "error" },
  { label: "Warn",  value: "warn"  },
  { label: "Info",  value: "info"  },
];

const ENVS = [
  { label: "All envs",    value: "" },
  { label: "Production",  value: "production" },
  { label: "Development", value: "development" },
];

const STATUS = [
  { label: "Unresolved", value: "false" },
  { label: "Resolved",   value: "true"  },
];

// toolbar
<Dropdown value={level ?? ""} onChange={v => setLevel(v || undefined)} options={LEVELS} placeholder="Level" />
<Dropdown value={env ?? ""}   onChange={v => setEnv(v || undefined)}   options={ENVS}   placeholder="Env" />
<Dropdown value={resolved ? "true" : "false"} onChange={v => setResolved(v === "true")} options={STATUS} placeholder="Status" />
Remove any StandardDropdown, @radix-ui/react-select, or raw <select> in this page.
Ensure dropdown menu z-index is above cards:

css
Copy
Edit
.dropdown-portal, .dropdown-menu { z-index: 60; }
E) Defensive date handling (keep this in page)
We already saw a parseISO crash. Keep the safe parser in use and ensure API returns ISO strings.

ts
Copy
Edit
// src/lib/dates.ts
export function toDateSafe(v: unknown): Date | null {
  if (v instanceof Date) return v;
  if (typeof v === "number") return new Date(v);
  if (typeof v === "string" && v) {
    const d = new Date(v);
    return isNaN(+d) ? null : d;
  }
  return null;
}
export function fmtDateTime(d: Date | null) { return d ? d.toLocaleString() : "—"; }
Use it for firstSeen, lastSeen, and series hour fields.

F) Verify server routes (issue details were erroring earlier)
In server/routes/observability.ts:

Correct import: import { ErrorStore } from "../data/errorStore";

Details routes exist and return ISO dates.

Sanitizer allowlists /api/observability/*.

G) Quick acceptance checklist
 Category grid shows images or the fallback; no broken-image icons.

 Observability no longer floods WARNs for category images; they appear at info at most, and only once per URL per session.

 No more “Failed to load beacon.js” entries (either ignored or removed).

 Errors tab filters use the unified dropdown component and look identical to the rest of the site.

 Issue details drawer loads without server errors.

 No parseISO / date split errors; dates render with fmtDateTime.

If anything still pops in the feed after these changes, paste the new log lines and we’ll tighten the filters or fix the data source.