Instructions for a Scalable Equipment Submission Management System
1. Create a Comprehensive Submission Management Page
tsx
// client/src/pages/admin/SubmissionManager.tsx - Complete scalable system

import { useState, useEffect } from 'react';
import { useQuery, useMutation } from '@tanstack/react-query';
import { Card } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Badge } from '@/components/ui/badge';
import { Tabs, TabsList, TabsTrigger, TabsContent } from '@/components/ui/tabs';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Calendar } from '@/components/ui/calendar';
import { Popover, PopoverContent, PopoverTrigger } from '@/components/ui/popover';
import { 
  Search, Filter, Download, Archive, CheckCircle, XCircle, Clock, 
  Eye, Calendar as CalendarIcon, DollarSign, MapPin, Phone, Mail,
  ChevronLeft, ChevronRight, Grid, List, ArrowUpDown, RefreshCw,
  FileText, Trash2, Edit, MessageSquare, Star, MoreVertical
} from 'lucide-react';

interface SubmissionFilters {
  status: string;
  search: string;
  dateRange: { from: Date | null; to: Date | null };
  isLocal: boolean | null;
  sortBy: 'date' | 'price' | 'name' | 'status';
  sortOrder: 'asc' | 'desc';
  view: 'grid' | 'list';
  page: number;
  limit: number;
}

export function SubmissionManager() {
  const [filters, setFilters] = useState<SubmissionFilters>({
    status: 'all',
    search: '',
    dateRange: { from: null, to: null },
    isLocal: null,
    sortBy: 'date',
    sortOrder: 'desc',
    view: 'list',
    page: 1,
    limit: 20
  });
  
  const [selectedSubmissions, setSelectedSubmissions] = useState<Set<string>>(new Set());
  const [selectedSubmission, setSelectedSubmission] = useState(null);
  const [showFilters, setShowFilters] = useState(false);
  
  // Main data query
  const { data: submissions, isLoading, refetch } = useQuery({
    queryKey: ['admin-submissions', filters],
    queryFn: async () => {
      const params = new URLSearchParams({
        status: filters.status,
        search: filters.search,
        sortBy: filters.sortBy,
        sortOrder: filters.sortOrder,
        page: filters.page.toString(),
        limit: filters.limit.toString()
      });
      
      if (filters.isLocal !== null) params.append('isLocal', filters.isLocal.toString());
      if (filters.dateRange.from) params.append('dateFrom', filters.dateRange.from.toISOString());
      if (filters.dateRange.to) params.append('dateTo', filters.dateRange.to.toISOString());
      
      const res = await fetch(`/api/admin/submissions?${params}`);
      return res.json();
    }
  });
  
  // Status tabs with counts
  const statusTabs = [
    { value: 'all', label: 'All', count: submissions?.total || 0, color: 'default' },
    { value: 'pending', label: 'Pending', count: submissions?.pending || 0, color: 'yellow' },
    { value: 'under_review', label: 'Under Review', count: submissions?.under_review || 0, color: 'blue' },
    { value: 'accepted', label: 'Accepted', count: submissions?.accepted || 0, color: 'green' },
    { value: 'scheduled', label: 'Scheduled', count: submissions?.scheduled || 0, color: 'purple' },
    { value: 'completed', label: 'Completed', count: submissions?.completed || 0, color: 'gray' },
    { value: 'rejected', label: 'Rejected', count: submissions?.rejected || 0, color: 'red' },
    { value: 'cancelled', label: 'Cancelled', count: submissions?.cancelled || 0, color: 'gray' }
  ];
  
  // Saved filter presets
  const filterPresets = [
    { label: 'Needs Action', filters: { status: 'pending', sortBy: 'date' } },
    { label: 'High Value', filters: { sortBy: 'price', sortOrder: 'desc' } },
    { label: 'Local Only', filters: { isLocal: true } },
    { label: 'This Week', filters: { dateRange: { from: getWeekStart(), to: new Date() } } },
    { label: 'Rejected Items', filters: { status: 'rejected' } }
  ];
  
  // Bulk actions
  const handleBulkAction = async (action: string) => {
    if (selectedSubmissions.size === 0) return;
    
    const confirmMessage = `Are you sure you want to ${action} ${selectedSubmissions.size} submissions?`;
    if (!confirm(confirmMessage)) return;
    
    // Implement bulk action API call
    await fetch('/api/admin/submissions/bulk', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        action,
        submissionIds: Array.from(selectedSubmissions)
      })
    });
    
    setSelectedSubmissions(new Set());
    refetch();
  };
  
  // Export functionality
  const handleExport = async (format: 'csv' | 'pdf') => {
    const params = new URLSearchParams({ format, ...filters });
    const res = await fetch(`/api/admin/submissions/export?${params}`);
    const blob = await res.blob();
    
    const url = window.URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `submissions-${new Date().toISOString().split('T')[0]}.${format}`;
    a.click();
  };
  
  return (
    <div className="min-h-screen bg-gray-900">
      {/* Header */}
      <div className="border-b border-gray-800 bg-gray-900/50 backdrop-blur sticky top-0 z-40">
        <div className="px-6 py-4">
          <div className="flex items-center justify-between">
            <div>
              <h1 className="text-2xl font-bold">Equipment Submissions</h1>
              <p className="text-gray-400 mt-1">
                Manage and process equipment buy requests
              </p>
            </div>
            
            <div className="flex items-center gap-3">
              {/* Quick Actions */}
              <Button
                variant="outline"
                size="sm"
                onClick={() => refetch()}
                className="gap-2"
              >
                <RefreshCw className="w-4 h-4" />
                Refresh
              </Button>
              
              <Popover>
                <PopoverTrigger asChild>
                  <Button variant="outline" size="sm" className="gap-2">
                    <Download className="w-4 h-4" />
                    Export
                  </Button>
                </PopoverTrigger>
                <PopoverContent>
                  <div className="space-y-2">
                    <Button
                      variant="ghost"
                      size="sm"
                      className="w-full justify-start"
                      onClick={() => handleExport('csv')}
                    >
                      Export as CSV
                    </Button>
                    <Button
                      variant="ghost"
                      size="sm"
                      className="w-full justify-start"
                      onClick={() => handleExport('pdf')}
                    >
                      Export as PDF
                    </Button>
                  </div>
                </PopoverContent>
              </Popover>
            </div>
          </div>
          
          {/* Search and Filters Bar */}
          <div className="flex items-center gap-4 mt-4">
            <div className="relative flex-1 max-w-md">
              <Search className="absolute left-3 top-1/2 -translate-y-1/2 w-4 h-4 text-gray-400" />
              <Input
                placeholder="Search by reference, name, brand..."
                value={filters.search}
                onChange={(e) => setFilters({ ...filters, search: e.target.value, page: 1 })}
                className="pl-10"
              />
            </div>
            
            <Button
              variant="outline"
              onClick={() => setShowFilters(!showFilters)}
              className="gap-2"
            >
              <Filter className="w-4 h-4" />
              Filters
              {(filters.isLocal !== null || filters.dateRange.from) && (
                <Badge variant="secondary" className="ml-1">
                  Active
                </Badge>
              )}
            </Button>
            
            {/* View Toggle */}
            <div className="flex items-center gap-1 bg-gray-800 rounded-lg p-1">
              <Button
                variant={filters.view === 'list' ? 'secondary' : 'ghost'}
                size="sm"
                onClick={() => setFilters({ ...filters, view: 'list' })}
              >
                <List className="w-4 h-4" />
              </Button>
              <Button
                variant={filters.view === 'grid' ? 'secondary' : 'ghost'}
                size="sm"
                onClick={() => setFilters({ ...filters, view: 'grid' })}
              >
                <Grid className="w-4 h-4" />
              </Button>
            </div>
            
            {/* Sort Options */}
            <Select
              value={`${filters.sortBy}-${filters.sortOrder}`}
              onValueChange={(value) => {
                const [sortBy, sortOrder] = value.split('-');
                setFilters({ ...filters, sortBy: sortBy as any, sortOrder: sortOrder as any });
              }}
            >
              <SelectTrigger className="w-[180px]">
                <ArrowUpDown className="w-4 h-4 mr-2" />
                <SelectValue />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="date-desc">Newest First</SelectItem>
                <SelectItem value="date-asc">Oldest First</SelectItem>
                <SelectItem value="price-desc">Highest Price</SelectItem>
                <SelectItem value="price-asc">Lowest Price</SelectItem>
                <SelectItem value="name-asc">Name A-Z</SelectItem>
                <SelectItem value="name-desc">Name Z-A</SelectItem>
              </SelectContent>
            </Select>
          </div>
          
          {/* Filter Presets */}
          {showFilters && (
            <div className="mt-4 p-4 bg-gray-800/50 rounded-lg">
              <div className="flex items-center justify-between mb-3">
                <h3 className="text-sm font-medium">Quick Filters</h3>
                <Button
                  variant="ghost"
                  size="sm"
                  onClick={() => {
                    setFilters({
                      ...filters,
                      dateRange: { from: null, to: null },
                      isLocal: null
                    });
                  }}
                >
                  Clear All
                </Button>
              </div>
              
              <div className="flex flex-wrap gap-2">
                {filterPresets.map((preset) => (
                  <Button
                    key={preset.label}
                    variant="outline"
                    size="sm"
                    onClick={() => setFilters({ ...filters, ...preset.filters })}
                  >
                    {preset.label}
                  </Button>
                ))}
                
                <Popover>
                  <PopoverTrigger asChild>
                    <Button variant="outline" size="sm" className="gap-2">
                      <CalendarIcon className="w-4 h-4" />
                      Date Range
                    </Button>
                  </PopoverTrigger>
                  <PopoverContent className="w-auto p-0" align="start">
                    <Calendar
                      mode="range"
                      selected={filters.dateRange}
                      onSelect={(range) => setFilters({ ...filters, dateRange: range })}
                    />
                  </PopoverContent>
                </Popover>
                
                <Select
                  value={filters.isLocal?.toString() || 'all'}
                  onValueChange={(value) => {
                    setFilters({
                      ...filters,
                      isLocal: value === 'all' ? null : value === 'true'
                    });
                  }}
                >
                  <SelectTrigger className="w-[140px]">
                    <MapPin className="w-4 h-4 mr-2" />
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="all">All Locations</SelectItem>
                    <SelectItem value="true">Local Only</SelectItem>
                    <SelectItem value="false">Non-Local</SelectItem>
                  </SelectContent>
                </Select>
              </div>
            </div>
          )}
        </div>
        
        {/* Status Tabs */}
        <Tabs value={filters.status} onValueChange={(v) => setFilters({ ...filters, status: v, page: 1 })}>
          <TabsList className="px-6">
            {statusTabs.map((tab) => (
              <TabsTrigger key={tab.value} value={tab.value} className="gap-2">
                {tab.label}
                <Badge variant={tab.color as any} className="ml-1">
                  {tab.count}
                </Badge>
              </TabsTrigger>
            ))}
          </TabsList>
        </Tabs>
      </div>
      
      {/* Main Content */}
      <div className="p-6">
        {/* Bulk Actions Bar */}
        {selectedSubmissions.size > 0 && (
          <div className="mb-4 p-4 bg-blue-900/20 border border-blue-700 rounded-lg flex items-center justify-between">
            <p className="text-blue-300">
              {selectedSubmissions.size} submission{selectedSubmissions.size > 1 ? 's' : ''} selected
            </p>
            <div className="flex gap-2">
              <Button
                variant="outline"
                size="sm"
                onClick={() => handleBulkAction('archive')}
              >
                <Archive className="w-4 h-4 mr-2" />
                Archive
              </Button>
              <Button
                variant="outline"
                size="sm"
                onClick={() => handleBulkAction('export')}
              >
                <Download className="w-4 h-4 mr-2" />
                Export
              </Button>
              <Button
                variant="destructive"
                size="sm"
                onClick={() => handleBulkAction('delete')}
              >
                <Trash2 className="w-4 h-4 mr-2" />
                Delete
              </Button>
            </div>
          </div>
        )}
        
        {/* Submissions Display */}
        {isLoading ? (
          <div className="flex justify-center items-center h-64">
            <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500"></div>
          </div>
        ) : submissions?.data?.length === 0 ? (
          <Card className="p-12 text-center">
            <div className="max-w-md mx-auto">
              <FileText className="w-12 h-12 mx-auto mb-4 text-gray-400" />
              <h3 className="text-lg font-semibold mb-2">No submissions found</h3>
              <p className="text-gray-400 mb-4">
                {filters.search || filters.status !== 'all' 
                  ? 'Try adjusting your filters or search terms'
                  : 'Equipment submissions will appear here when users submit them'}
              </p>
              <Button variant="outline" onClick={() => setFilters({ ...filters, status: 'all', search: '' })}>
                Clear Filters
              </Button>
            </div>
          </Card>
        ) : (
          <>
            {filters.view === 'list' ? (
              <SubmissionsList 
                submissions={submissions.data}
                selectedSubmissions={selectedSubmissions}
                onSelectSubmission={(id) => {
                  const newSelected = new Set(selectedSubmissions);
                  if (newSelected.has(id)) {
                    newSelected.delete(id);
                  } else {
                    newSelected.add(id);
                  }
                  setSelectedSubmissions(newSelected);
                }}
                onViewDetails={setSelectedSubmission}
              />
            ) : (
              <SubmissionsGrid
                submissions={submissions.data}
                selectedSubmissions={selectedSubmissions}
                onSelectSubmission={(id) => {
                  const newSelected = new Set(selectedSubmissions);
                  if (newSelected.has(id)) {
                    newSelected.delete(id);
                  } else {
                    newSelected.add(id);
                  }
                  setSelectedSubmissions(newSelected);
                }}
                onViewDetails={setSelectedSubmission}
              />
            )}
            
            {/* Pagination */}
            <div className="mt-6 flex items-center justify-between">
              <p className="text-sm text-gray-400">
                Showing {((filters.page - 1) * filters.limit) + 1} to{' '}
                {Math.min(filters.page * filters.limit, submissions.total)} of{' '}
                {submissions.total} submissions
              </p>
              
              <div className="flex items-center gap-2">
                <Button
                  variant="outline"
                  size="sm"
                  onClick={() => setFilters({ ...filters, page: filters.page - 1 })}
                  disabled={filters.page === 1}
                >
                  <ChevronLeft className="w-4 h-4" />
                  Previous
                </Button>
                
                <div className="flex gap-1">
                  {[...Array(Math.ceil(submissions.total / filters.limit))].map((_, i) => (
                    <Button
                      key={i}
                      variant={filters.page === i + 1 ? 'default' : 'outline'}
                      size="sm"
                      onClick={() => setFilters({ ...filters, page: i + 1 })}
                      className="w-10"
                    >
                      {i + 1}
                    </Button>
                  )).slice(Math.max(0, filters.page - 3), filters.page + 2)}
                </div>
                
                <Button
                  variant="outline"
                  size="sm"
                  onClick={() => setFilters({ ...filters, page: filters.page + 1 })}
                  disabled={filters.page * filters.limit >= submissions.total}
                >
                  Next
                  <ChevronRight className="w-4 h-4" />
                </Button>
              </div>
            </div>
          </>
        )}
      </div>
      
      {/* Detail Modal */}
      {selectedSubmission && (
        <SubmissionDetailModal
          submission={selectedSubmission}
          onClose={() => setSelectedSubmission(null)}
          onUpdate={() => refetch()}
        />
      )}
    </div>
  );
}
2. Create List View Component
tsx
// client/src/components/admin/SubmissionsList.tsx

function SubmissionsList({ submissions, selectedSubmissions, onSelectSubmission, onViewDetails }) {
  return (
    <div className="space-y-2">
      {/* Header */}
      <div className="grid grid-cols-12 gap-4 px-4 py-2 text-sm text-gray-400 font-medium">
        <div className="col-span-1">
          <input
            type="checkbox"
            className="rounded"
            checked={selectedSubmissions.size === submissions.length}
            onChange={(e) => {
              if (e.target.checked) {
                submissions.forEach(s => onSelectSubmission(s.id));
              } else {
                submissions.forEach(s => onSelectSubmission(s.id));
              }
            }}
          />
        </div>
        <div className="col-span-2">Reference</div>
        <div className="col-span-3">Equipment</div>
        <div className="col-span-2">User</div>
        <div className="col-span-1">Price</div>
        <div className="col-span-1">Status</div>
        <div className="col-span-1">Date</div>
        <div className="col-span-1">Actions</div>
      </div>
      
      {/* Rows */}
      {submissions.map((submission) => (
        <Card 
          key={submission.id}
          className={`p-4 hover:bg-gray-800/50 transition-colors ${
            selectedSubmissions.has(submission.id) ? 'ring-2 ring-blue-500' : ''
          }`}
        >
          <div className="grid grid-cols-12 gap-4 items-center">
            <div className="col-span-1">
              <input
                type="checkbox"
                className="rounded"
                checked={selectedSubmissions.has(submission.id)}
                onChange={() => onSelectSubmission(submission.id)}
              />
            </div>
            
            <div className="col-span-2">
              <p className="font-mono text-sm">{submission.referenceNumber}</p>
              {!submission.viewedByAdmin && (
                <Badge variant="secondary" className="text-xs mt-1">New</Badge>
              )}
            </div>
            
            <div className="col-span-3">
              <p className="font-medium">{submission.equipmentName}</p>
              <p className="text-sm text-gray-400">{submission.brand} • {submission.condition}</p>
            </div>
            
            <div className="col-span-2">
              <p className="text-sm">{submission.userName}</p>
              <p className="text-xs text-gray-400">{submission.phoneNumber}</p>
            </div>
            
            <div className="col-span-1">
              <p className="font-medium">${submission.askingPrice || 'Open'}</p>
            </div>
            
            <div className="col-span-1">
              <Badge variant={getStatusVariant(submission.status)}>
                {formatStatus(submission.status)}
              </Badge>
            </div>
            
            <div className="col-span-1">
              <p className="text-sm text-gray-400">
                {new Date(submission.createdAt).toLocaleDateString()}
              </p>
            </div>
            
            <div className="col-span-1 flex gap-1">
              <Button
                variant="ghost"
                size="icon"
                onClick={() => onViewDetails(submission)}
              >
                <Eye className="w-4 h-4" />
              </Button>
              <DropdownMenu>
                <DropdownMenuTrigger asChild>
                  <Button variant="ghost" size="icon">
                    <MoreVertical className="w-4 h-4" />
                  </Button>
                </DropdownMenuTrigger>
                <DropdownMenuContent>
                  <DropdownMenuItem>
                    <Edit className="w-4 h-4 mr-2" />
                    Edit
                  </DropdownMenuItem>
                  <DropdownMenuItem>
                    <MessageSquare className="w-4 h-4 mr-2" />
                    Add Note
                  </DropdownMenuItem>
                  <DropdownMenuItem>
                    <Archive className="w-4 h-4 mr-2" />
                    Archive
                  </DropdownMenuItem>
                  <DropdownMenuSeparator />
                  <DropdownMenuItem className="text-red-400">
                    <Trash2 className="w-4 h-4 mr-2" />
                    Delete
                  </DropdownMenuItem>
                </DropdownMenuContent>
              </DropdownMenu>
            </div>
          </div>
        </Card>
      ))}
    </div>
  );
}
3. Create Grid View Component
tsx
// client/src/components/admin/SubmissionsGrid.tsx

function SubmissionsGrid({ submissions, selectedSubmissions, onSelectSubmission, onViewDetails }) {
  return (
    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4">
      {submissions.map((submission) => (
        <Card 
          key={submission.id}
          className={`p-4 hover:bg-gray-800/50 transition-all cursor-pointer ${
            selectedSubmissions.has(submission.id) ? 'ring-2 ring-blue-500' : ''
          }`}
          onClick={() => onViewDetails(submission)}
        >
          <div className="flex justify-between items-start mb-3">
            <input
              type="checkbox"
              className="rounded"
              checked={selectedSubmissions.has(submission.id)}
              onChange={(e) => {
                e.stopPropagation();
                onSelectSubmission(submission.id);
              }}
              onClick={(e) => e.stopPropagation()}
            />
            <Badge variant={getStatusVariant(submission.status)}>
              {formatStatus(submission.status)}
            </Badge>
          </div>
          
          {/* Image placeholder or actual image */}
          <div className="aspect-square bg-gray-800 rounded-lg mb-3 flex items-center justify-center">
            {submission.images?.[0] ? (
              <img 
                src={submission.images[0]} 
                alt={submission.equipmentName}
                className="w-full h-full object-cover rounded-lg"
              />
            ) : (
              <Package className="w-12 h-12 text-gray-600" />
            )}
          </div>
          
          <h3 className="font-semibold mb-1">{submission.equipmentName}</h3>
          <p className="text-sm text-gray-400 mb-2">{submission.brand}</p>
          
          <div className="flex justify-between items-center text-sm">
            <span className="font-medium">${submission.askingPrice || 'Open'}</span>
            <span className="text-gray-400">
              {new Date(submission.createdAt).toLocaleDateString()}
            </span>
          </div>
          
          <div className="mt-3 pt-3 border-t border-gray-700">
            <p className="text-xs text-gray-400 font-mono">{submission.referenceNumber}</p>
          </div>
        </Card>
      ))}
    </div>
  );
}
4. Update Backend for Advanced Features
ts
// server/routes.ts - Enhanced submissions endpoint

app.get('/api/admin/submissions', requireAdmin, async (req, res) => {
  try {
    const {
      status = 'all',
      search = '',
      sortBy = 'date',
      sortOrder = 'desc',
      page = 1,
      limit = 20,
      isLocal,
      dateFrom,
      dateTo
    } = req.query;
    
    // Build conditions
    const conditions = [];
    
    if (status !== 'all') {
      conditions.push(eq(equipmentSubmissions.status, status));
    }
    
    if (search) {
      conditions.push(
        or(
          ilike(equipmentSubmissions.referenceNumber, `%${search}%`),
          ilike(equipmentSubmissions.equipmentName, `%${search}%`),
          ilike(equipmentSubmissions.brand, `%${search}%`)
        )
      );
    }
    
    if (isLocal !== undefined) {
      conditions.push(eq(equipmentSubmissions.isLocal, isLocal === 'true'));
    }
    
    if (dateFrom || dateTo) {
      if (dateFrom && dateTo) {
        conditions.push(
          between(equipmentSubmissions.createdAt, new Date(dateFrom), new Date(dateTo))
        );
      } else if (dateFrom) {
        conditions.push(gte(equipmentSubmissions.createdAt, new Date(dateFrom)));
      } else if (dateTo) {
        conditions.push(lte(equipmentSubmissions.createdAt, new Date(dateTo)));
      }
    }
    
    // Build sort
    const orderByColumn = {
      date: equipmentSubmissions.createdAt,
      price: equipmentSubmissions.askingPrice,
      name: equipmentSubmissions.equipmentName,
      status: equipmentSubmissions.status
    }[sortBy] || equipmentSubmissions.createdAt;
    
    const orderByDirection = sortOrder === 'asc' ? asc : desc;
    
    // Execute queries
    const [submissions, totalResult, statusCounts] = await Promise.all([
      // Main query
      db.select({
        submission: equipmentSubmissions,
        user: {
          name: sql<string>`${users.firstName} || ' ' || ${users.lastName}`,
          email: users.email
        }
      })
      .from(equipmentSubmissions)
      .leftJoin(users, eq(equipmentSubmissions.userId, users.id))
      .where(conditions.length > 0 ? and(...conditions) : undefined)
      .orderBy(orderByDirection(orderByColumn))
      .limit(Number(limit))
      .offset((Number(page) - 1) * Number(limit)),
      
      // Total count
      db.select({ count: count() })
        .from(equipmentSubmissions)
        .where(conditions.length > 0 ? and(...conditions) : undefined),
      
      // Status counts
      db.select({
        status: equipmentSubmissions.status,
        count: count()
      })
      .from(equipmentSubmissions)
      .groupBy(equipmentSubmissions.status)
    ]);
    
    // Mark as viewed
    const unviewedIds = submissions
      .filter(s => !s.submission.viewedByAdmin)
      .map(s => s.submission.id);
    
    if (unviewedIds.length > 0) {
      await db.update(equipmentSubmissions)
        .set({ viewedByAdmin: true, lastViewedAt: new Date() })
        .where(inArray(equipmentSubmissions.id, unviewedIds));
    }
    
    res.json({
      data: submissions.map(s => ({
        ...s.submission,
        userName: s.user?.name,
        userEmail: s.user?.email
      })),
      total: totalResult[0]?.count || 0,
      ...Object.fromEntries(
        statusCounts.map(sc => [sc.status || 'unknown', Number(sc.count)])
      ),
      page: Number(page),
      totalPages: Math.ceil((totalResult[0]?.count || 0) / Number(limit))
    });
    
  } catch (error) {
    console.error('Error in admin submissions:', error);
    res.status(500).json({ error: 'Failed to fetch submissions' });
  }
});

// Bulk actions endpoint
app.post('/api/admin/submissions/bulk', requireAdmin, async (req, res) => {
  try {
    const { action, submissionIds } = req.body;
    
    switch (action) {
      case 'archive':
        await db.update(equipmentSubmissions)
          .set({ status: 'archived', updatedAt: new Date() })
          .where(inArray(equipmentSubmissions.id, submissionIds));
        break;
        
      case 'delete':
        await db.delete(equipmentSubmissions)
          .where(inArray(equipmentSubmissions.id, submissionIds));
        break;
        
      case 'export':
        // Handle export logic
        break;
    }
    
    res.json({ success: true, affected: submissionIds.length });
  } catch (error) {
    res.status(500).json({ error: 'Failed to perform bulk action' });
  }
});

// Export endpoint
app.get('/api/admin/submissions/export', requireAdmin, async (req, res) => {
  try {
    const { format = 'csv' } = req.query;
    
    // Get all submissions based on current filters
    const submissions = await db.select()
      .from(equipmentSubmissions)
      .leftJoin(users, eq(equipmentSubmissions.userId, users.id));
    
    if (format === 'csv') {
      const csv = generateCSV(submissions);
      res.setHeader('Content-Type', 'text/csv');
      res.setHeader('Content-Disposition', 'attachment; filename=submissions.csv');
      res.send(csv);
    } else if (format === 'pdf') {
      const pdf = await generatePDF(submissions);
      res.setHeader('Content-Type', 'application/pdf');
      res.setHeader('Content-Disposition', 'attachment; filename=submissions.pdf');
      res.send(pdf);
    }
  } catch (error) {
    res.status(500).json({ error: 'Failed to export submissions' });
  }
});
5. Add Analytics Dashboard
tsx
// client/src/components/admin/SubmissionAnalytics.tsx

function SubmissionAnalytics() {
  const { data: analytics } = useQuery({
    queryKey: ['submission-analytics'],
    queryFn: async () => {
      const res = await fetch('/api/admin/submissions/analytics');
      return res.json();
    }
  });
  
  return (
    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 mb-6">
      <Card className="p-6">
        <div className="flex items-center justify-between">
          <div>
            <p className="text-sm text-gray-400">Total Value</p>
            <p className="text-2xl font-bold">${analytics?.totalValue || 0}</p>
          </div>
          <DollarSign className="w-8 h-8 text-green-500" />
        </div>
      </Card>
      
      <Card className="p-6">
        <div className="flex items-center justify-between">
          <div>
            <p className="text-sm text-gray-400">Avg Response Time</p>
            <p className="text-2xl font-bold">{analytics?.avgResponseTime || 0}h</p>
          </div>
          <Clock className="w-8 h-8 text-blue-500" />
        </div>
      </Card>
      
      <Card className="p-6">
        <div className="flex items-center justify-between">
          <div>
            <p className="text-sm text-gray-400">Acceptance Rate</p>
            <p className="text-2xl font-bold">{analytics?.acceptanceRate || 0}%</p>
          </div>
          <CheckCircle className="w-8 h-8 text-green-500" />
        </div>
      </Card>
      
      <Card className="p-6">
        <div className="flex items-center justify-between">
          <div>
            <p className="text-sm text-gray-400">Local Submissions</p>
            <p className="text-2xl font-bold">{analytics?.localPercentage || 0}%</p>
          </div>
          <MapPin className="w-8 h-8 text-purple-500" />
        </div>
      </Card>
    </div>
  );
}
Instructions for Replit to Implement:
Create the new comprehensive SubmissionManager component
Replace the existing simple view with this scalable system
Add all the filtering, sorting, and view options
Update the admin dashboard
Link to the new submission manager
Show analytics summary on main dashboard
Implement backend enhancements
Add filtering and sorting logic
Create bulk action endpoints
Add export functionality
Create analytics endpoint
Add database indexes for performance
sql
CREATE INDEX idx_submissions_status ON equipment_submissions(status);
CREATE INDEX idx_submissions_created ON equipment_submissions(created_at DESC);
CREATE INDEX idx_submissions_ref ON equipment_submissions(reference_number);
CREATE INDEX idx_submissions_search ON equipment_submissions USING gin(to_tsvector('english', equipment_name || ' ' || brand));
Create helper functions
Status variant mapping
Date formatting utilities
CSV/PDF generation functions
Add keyboard shortcuts
Ctrl+F for search focus
Ctrl+A to select all
Arrow keys for navigation
This scalable system provides:

Multi-view options (list/grid)
Advanced filtering with presets
Bulk operations for efficiency
Export capabilities for reporting
Analytics dashboard for insights
Pagination for large datasets
Search across multiple fields
Status management with clear workflows
Mobile responsive design
The system can handle thousands of submissions without getting overwhelming, and provides quick access to any submission through search, filters, and sorting.



