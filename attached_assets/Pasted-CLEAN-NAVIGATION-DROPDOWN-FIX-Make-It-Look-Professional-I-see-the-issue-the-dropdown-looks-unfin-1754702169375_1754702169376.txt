CLEAN NAVIGATION DROPDOWN FIX - Make It Look Professional
I see the issue - the dropdown looks unfinished and messy. Let's fix it with proper alignment, spacing, and visual polish.

REPLIT INSTRUCTIONS - FIX DROPDOWN MENU:
markdown## DROPDOWN MENU COMPLETE FIX

### FILE: `/client/src/components/Navigation.tsx`

### MAIN ISSUES WITH DROPDOWN:
1. Text floating to the right, not aligned with icons
2. No proper container styling
3. Icons and text misaligned
4. Missing hover states
5. No visual separation from background

### DROPDOWN FIXES:

#### 1. DROPDOWN CONTAINER
```jsx
{dropdownOpen && (
  <div className="absolute right-0 mt-2 w-64 
                  bg-[#2a2f3e] /* Slightly lighter than nav bg */
                  border border-gray-700/50 
                  rounded-xl shadow-2xl 
                  overflow-hidden
                  py-1"> /* Remove extra padding */
2. USER INFO HEADER (at top of dropdown)
jsx<div className="px-4 py-3 border-b border-gray-700/50 bg-[#1e2129]">
  <div className="flex items-center gap-3">
    <div className="w-10 h-10 bg-blue-600 rounded-lg flex items-center justify-center">
      <span className="text-white font-bold">CF</span>
    </div>
    <div>
      <div className="text-white font-medium text-sm">{user.username || 'User'}</div>
      <div className="text-gray-400 text-xs">{user.email}</div>
    </div>
  </div>
  {user.role === 'developer' && (
    <div className="mt-2">
      <span className="inline-block px-2 py-0.5 bg-purple-600/20 text-purple-400 text-xs rounded">
        Developer
      </span>
    </div>
  )}
</div>
3. MENU ITEMS - PROPER ALIGNMENT
jsx<div className="py-1">
  {/* Dashboard */}
  <Link href="/dashboard">
    <a className="flex items-center gap-3 px-4 py-2.5 
                  text-gray-300 hover:bg-white/5 
                  hover:text-white transition-colors group">
      <Grid3x3 className="w-4 h-4 text-gray-500 group-hover:text-gray-300" />
      <span className="text-sm">Dashboard</span>
    </a>
  </Link>

  {/* Order History */}
  <Link href="/orders">
    <a className="flex items-center gap-3 px-4 py-2.5 
                  text-gray-300 hover:bg-white/5 
                  hover:text-white transition-colors group">
      <History className="w-4 h-4 text-gray-500 group-hover:text-gray-300" />
      <span className="text-sm">Order History</span>
    </a>
  </Link>

  {/* Divider */}
  <div className="my-1 mx-3 border-t border-gray-700/50" />

  {/* Developer Dashboard - if developer */}
  {user.role === 'developer' && (
    <>
      <Link href="/admin">
        <a className="flex items-center gap-3 px-4 py-2.5 
                      text-purple-400 hover:bg-purple-600/10 
                      transition-colors group">
          <Code className="w-4 h-4 text-purple-500" />
          <span className="text-sm">Developer Dashboard</span>
        </a>
      </Link>
      <div className="my-1 mx-3 border-t border-gray-700/50" />
    </>
  )}

  {/* Sign Out */}
  <button onClick={handleLogout}
          className="w-full flex items-center gap-3 px-4 py-2.5 
                     text-red-400 hover:bg-red-600/10 
                     transition-colors group">
    <LogOut className="w-4 h-4 text-red-500" />
    <span className="text-sm">Sign Out</span>
  </button>
</div>
4. USER BUTTON (CF dropdown trigger)
jsx<button onClick={() => setDropdownOpen(!dropdownOpen)}
        className="flex items-center gap-2 px-2 py-1.5 
                   rounded-lg hover:bg-white/5 transition-colors">
  <div className="w-9 h-9 bg-blue-600 rounded-lg 
                  flex items-center justify-center 
                  border border-blue-500/30">
    <span className="text-white font-bold text-sm">CF</span>
  </div>
  <ChevronDown className={`w-4 h-4 text-gray-400 transition-transform 
                          ${dropdownOpen ? 'rotate-180' : ''}`} />
</button>
5. CLICK OUTSIDE TO CLOSE
jsx// Add useEffect to handle click outside
useEffect(() => {
  const handleClickOutside = (e) => {
    if (dropdownRef.current && !dropdownRef.current.contains(e.target)) {
      setDropdownOpen(false);
    }
  };
  
  if (dropdownOpen) {
    document.addEventListener('mousedown', handleClickOutside);
  }
  
  return () => document.removeEventListener('mousedown', handleClickOutside);
}, [dropdownOpen]);

// Add ref to dropdown container
<div className="relative" ref={dropdownRef}>
  {/* User button and dropdown here */}
</div>
6. ADD REQUIRED IMPORTS
jsximport { Grid3x3, History, Code, LogOut, ChevronDown } from 'lucide-react';
import { useRef, useEffect } from 'react';
ADDITIONAL POLISH:
1. SEARCH BAR
jsx<div className="relative flex-1 max-w-lg mx-6">
  <Search className="absolute left-3 top-1/2 -translate-y-1/2 w-4 h-4 text-gray-500" />
  <input
    type="text"
    placeholder="Search equipment..."
    className="w-full pl-10 pr-4 py-2 
               bg-[#2a2f3e] border border-gray-700/50 
               rounded-lg text-white placeholder-gray-500
               focus:bg-[#323844] focus:border-gray-600 
               focus:outline-none transition-all"
  />
</div>
2. CART BUTTON
jsx<Link href="/cart">
  <a className="relative p-2 rounded-lg hover:bg-white/5 transition-colors">
    <ShoppingCart className="w-5 h-5 text-gray-300" />
    {itemCount > 0 && (
      <span className="absolute -top-1 -right-1 
                       min-w-[20px] h-5 
                       bg-red-500 text-white text-xs font-bold 
                       rounded-full flex items-center justify-center px-1">
        {itemCount}
      </span>
    )}
  </a>
</Link>
COMPLETE STRUCTURE:
jsx<nav className="bg-[#1a1f2e] border-b border-gray-800/50 sticky top-0 z-50">
  <div className="container mx-auto px-6 h-16 flex items-center justify-between">
    {/* Logo */}
    {/* Nav Links */}
    {/* Search Bar */}
    {/* Right Section: User & Cart */}
  </div>
</nav>
KEY IMPROVEMENTS:

✅ Icons properly aligned with text
✅ Consistent spacing (gap-3 between icon and text)
✅ Proper hover states with background changes
✅ Visual hierarchy with dividers
✅ User info header in dropdown
✅ Click outside to close
✅ Rotate chevron when open
✅ Better contrast for dropdown (slightly lighter bg)
✅ Proper padding and margins
✅ Clean, professional appearance

This will give you a polished, professional dropdown that looks intentional and well-designed.
