UI looks solid, but three things are missing/wrong:

Order summary isn’t bound to real cart lines.

The page doesn’t preload the user’s default (profile) address.

There’s no real address chooser to switch to another saved address.

Below is a tight fix pack Replit can drop in. It keeps the SSOT architecture you built and only patches the gaps.

0) Server-side guarantees (verify quickly)
/api/user must include { profileAddress, profile_address_id }.

/api/addresses returns addresses[] sorted default-first (or add /api/addresses?default=true).

/api/cart returns:

json
Copy
Edit
{ "items":[{"id":"…","title":"…","qty":1,"unit":10999,"total":10999}], "subtotal":10999, "total":10999 }
If total isn’t on each line, include unit and qty.

PATCH /api/addresses/:id/default flips default and updates users.profile_address_id.

Miles only: your distance util should use EARTH_RADIUS_MI = 3958.7613.

1) Checkout — make it use the saved/default address
In client/src/pages/checkout.tsx, replace the default-address selection with this (it prefers the profile address id and falls back cleanly):

ts
Copy
Edit
const addresses = Array.isArray(addressesResp?.addresses) ? addressesResp.addresses : [];
const profileAddressId: string | null = user?.profile_address_id ?? user?.profileAddress?.id ?? null;

const defaultAddr =
  (profileAddressId && addresses.find(a => a.id === profileAddressId)) ||
  addresses.find(a => a.is_default) ||
  user?.profileAddress ||
  null;
Immediately after queries resolve, prefill the form from defaultAddr:

ts
Copy
Edit
useEffect(() => {
  if (!userLoading && !addrLoading && defaultAddr) {
    form.reset({
      firstName: user?.firstName ?? "",
      lastName: user?.lastName ?? "",
      email: user?.email ?? "",
      phone: user?.phone ?? "",
      street: defaultAddr.street ?? "",
      address2: defaultAddr.address2 ?? "",
      city: defaultAddr.city ?? "",
      state: defaultAddr.state ?? "",
      zipCode: defaultAddr.zipCode ?? "",
      country: defaultAddr.country ?? "US",
      geoapify_place_id: defaultAddr.geoapify_place_id ?? "",
      latitude: defaultAddr.latitude ?? null,
      longitude: defaultAddr.longitude ?? null,
      saveToProfile: false,
      deliveryInstructions: "",
    });
    setUsingSavedAddressId(defaultAddr.id);
  }
}, [userLoading, addrLoading, defaultAddr]);
2) Add a real “Choose another address” UI
Create client/src/components/addresses/AddressPicker.tsx:

tsx
Copy
Edit
import { useState } from "react";
import { Button } from "@/components/ui/button";

export default function AddressPicker({addresses, currentId, onPick}:{addresses:any[]; currentId?:string|null; onPick:(id:string)=>void}) {
  const [open, setOpen] = useState(false);
  if (!addresses?.length) return null;

  return (
    <>
      <Button type="button" variant="secondary" onClick={() => setOpen(true)}>
        Change saved address
      </Button>

      {open && (
        <div className="fixed inset-0 z-50 bg-black/60 flex items-center justify-center">
          <div className="w-[520px] max-w-[92vw] rounded-2xl bg-neutral-900 p-5 shadow-xl">
            <div className="text-lg font-medium mb-4">Choose an address</div>
            <div className="space-y-2 max-h-[50vh] overflow-auto">
              {addresses.map(a => (
                <label key={a.id} className="flex items-start gap-3 p-3 rounded-xl bg-black/20">
                  <input
                    type="radio"
                    name="picker"
                    checked={currentId === a.id}
                    onChange={() => onPick(a.id)}
                  />
                  <div className="text-sm">
                    <div className="font-medium">{a.first_name} {a.last_name} {a.is_default && <span className="ml-1 text-xs px-2 py-0.5 rounded-full bg-green-700/40">Default</span>}</div>
                    <div className="opacity-80">{a.street}{a.address2 ? `, ${a.address2}` : ""}</div>
                    <div className="opacity-80">{a.city}, {a.state} {a.zipCode}</div>
                  </div>
                </label>
              ))}
            </div>
            <div className="mt-5 flex justify-end gap-3">
              <Button type="button" variant="ghost" onClick={() => setOpen(false)}>Close</Button>
              <Button
                type="button"
                onClick={() => setOpen(false)}
              >Use selected</Button>
            </div>
          </div>
        </div>
      )}
    </>
  );
}
Wire it into Checkout (replace the small “Change saved address” button section):

tsx
Copy
Edit
import AddressPicker from "@/components/addresses/AddressPicker";
// …

<div className="md:col-span-2 flex items-center gap-3">
  <input id="saveToProfile" type="checkbox" {...form.register("saveToProfile")} />
  <Label htmlFor="saveToProfile">Save this address to my profile</Label>

  <div className="ml-auto flex items-center gap-3 text-sm">
    <span className="opacity-80">
      Using: {usingSavedAddressId ? (addresses.find(a=>a.id===usingSavedAddressId)?.is_default ? "Default address" : "Saved address") : "Unsaved address"}
    </span>

    <AddressPicker
      addresses={addresses}
      currentId={usingSavedAddressId ?? defaultAddr?.id}
      onPick={(id) => {
        setUsingSavedAddressId(id);
        // Make it default on the server so SSOT stays true
        mutateDefault.mutate(id);
      }}
    />
  </div>
</div>
This gives a clear picker, labels which one is Default, and promotes the chosen one to default on the server.

3) Order Summary — bind to real data (and never $0.00)
Add these helpers near the top of checkout:

ts
Copy
Edit
const cents = (n:number|undefined|null) => Math.max(0, Number(n||0));
const money = (c:number) => `$${(c/100).toFixed(2)}`;
Replace your summary list with this safe mapper (handles missing total by unit*qty):

tsx
Copy
Edit
<ul className="space-y-2 mb-4">
  {cartItems.map((line:any) => {
    const lineTotal = cents(line.total ?? (line.unit && line.qty ? line.unit*line.qty : 0));
    const title = line.title ?? line.name ?? line.product?.title ?? "Item";
    return (
      <li key={line.id} className="flex justify-between text-sm">
        <span>{title} × {line.qty ?? 1}</span>
        <span>{money(lineTotal)}</span>
      </li>
    );
  })}
</ul>

<div className="flex justify-between text-sm py-2 border-t border-white/10">
  <span>Subtotal</span>
  <span>{money(cents(cartResp?.subtotal))}</span>
</div>
<div className="flex justify-between text-sm py-2">
  <span>Shipping</span>
  <span>{selectedQuoteId ? "Calculated at next step" : "—"}</span>
</div>
Also ensure the cart query returns latest data when the user opens checkout:

ts
Copy
Edit
useEffect(() => {
  qc.invalidateQueries({ queryKey: ["cart"] });
}, []);
4) Quotes refresh & KM→Miles
In your quote fetcher, you already pass either addressId or a full address. Keep that and reset quotes when switching addresses:

ts
Copy
Edit
onPick={(id)=>{ setUsingSavedAddressId(id); setSelectedQuoteId(null); qc.invalidateQueries({queryKey:["shipping:quotes"]}); }}
Confirm the server Haversine uses miles:

ts
Copy
Edit
const R = 3958.7613; // miles
5) Dashboard “Addresses” — default & delete rules
Only one default:

PATCH /api/addresses/:id/default should UPDATE addresses SET is_default=false WHERE user_id=$1; UPDATE addresses SET is_default=true WHERE id=$2; UPDATE users SET profile_address_id=$2.

Delete:

Disallow deleting the current default (return 400 with message).

In the UI, show Delete button only when !is_default.

Add a small “Default” pill in the list item and grey out its Delete control.

6) Guard rails (no more runtime crashes)
Every place using arrays in checkout/cart uses asArray() (or the inline Array.isArray() checks above).

Buttons are disabled until: formState.isValid && selectedQuoteId && cartItems.length>0.

7) Quick smoke test script
Login with a user having at least 2 saved addresses (one default).

Open /checkout → form prefilled from default; quotes appear.

Click Change saved address → pick the other; default flips; form repopulates; quotes refresh.

Fill missing fields → Continue to Payment becomes enabled.

Return to dashboard → the chosen address shows Default, Delete hidden for default.

Try deleting non-default → works; try deleting default → blocked with toast.

If Replit implements the snippets above and verifies the server contracts, you’ll have: the order summary showing real line prices, a fully wired default address flow, and a proper address picker to switch addresses — all SSOT-compliant.









Ask ChatGPT
