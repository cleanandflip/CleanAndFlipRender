Instructions to Add Brand Dropdown with Custom Input Option
1. Update the Brand Field to a Searchable Dropdown
Find the equipment submission form component and replace the brand text input with a select dropdown that includes an "Other" option:
tsx// In your SellToUs or EquipmentSubmissionForm component

const [selectedBrand, setSelectedBrand] = useState('');
const [customBrand, setCustomBrand] = useState('');
const [showCustomInput, setShowCustomInput] = useState(false);

// List of brands from your website
const EQUIPMENT_BRANDS = [
  'Rogue Fitness',
  'Concept2',
  'Bowflex',
  'York Barbell',
  'PowerBlock',
  'Rep Fitness',
  'Titan Fitness',
  'CAP Barbell',
  'Eleiko',
  'Life Fitness',
  'Hammer Strength',
  'Cybex',
  'Precor',
  'Other' // This option allows custom input
];

// Replace the current brand input with:
<div className="space-y-2">
  <label>Brand</label>
  <select
    value={selectedBrand}
    onChange={(e) => {
      setSelectedBrand(e.target.value);
      setShowCustomInput(e.target.value === 'Other');
    }}
    className="w-full px-4 py-2 bg-gray-800 border border-gray-700 rounded-md text-white"
  >
    <option value="">Select a brand...</option>
    {EQUIPMENT_BRANDS.map((brand) => (
      <option key={brand} value={brand}>
        {brand}
      </option>
    ))}
  </select>
  
  {showCustomInput && (
    <input
      type="text"
      placeholder="Enter brand name"
      value={customBrand}
      onChange={(e) => setCustomBrand(e.target.value)}
      className="w-full px-4 py-2 bg-gray-800 border border-gray-700 rounded-md text-white mt-2"
    />
  )}
</div>
2. Create a Better Searchable Dropdown Component
For a more user-friendly experience with search functionality:
tsx// client/src/components/ui/SearchableSelect.tsx
import { useState, useRef, useEffect } from 'react';
import { ChevronDown, X } from 'lucide-react';

export function SearchableSelect({ options, placeholder, onSelect, allowCustom = true }) {
  const [isOpen, setIsOpen] = useState(false);
  const [search, setSearch] = useState('');
  const [selected, setSelected] = useState('');
  const dropdownRef = useRef(null);

  const filteredOptions = options.filter(option =>
    option.toLowerCase().includes(search.toLowerCase())
  );

  useEffect(() => {
    function handleClickOutside(event) {
      if (dropdownRef.current && !dropdownRef.current.contains(event.target)) {
        setIsOpen(false);
      }
    }
    document.addEventListener('mousedown', handleClickOutside);
    return () => document.removeEventListener('mousedown', handleClickOutside);
  }, []);

  const handleSelect = (value) => {
    setSelected(value);
    setSearch(value);
    setIsOpen(false);
    onSelect(value);
  };

  return (
    <div className="relative" ref={dropdownRef}>
      <div className="relative">
        <input
          type="text"
          value={search}
          onChange={(e) => {
            setSearch(e.target.value);
            setIsOpen(true);
          }}
          onFocus={() => setIsOpen(true)}
          placeholder={placeholder}
          className="w-full px-4 py-2 pr-10 bg-gray-800 border border-gray-700 rounded-md text-white"
        />
        <button
          type="button"
          onClick={() => setIsOpen(!isOpen)}
          className="absolute right-2 top-1/2 -translate-y-1/2"
        >
          <ChevronDown className="w-4 h-4 text-gray-400" />
        </button>
      </div>

      {isOpen && (
        <div className="absolute z-10 w-full mt-1 bg-gray-800 border border-gray-700 rounded-md shadow-lg max-h-60 overflow-auto">
          {filteredOptions.length > 0 ? (
            filteredOptions.map((option) => (
              <button
                key={option}
                type="button"
                onClick={() => handleSelect(option)}
                className="w-full px-4 py-2 text-left hover:bg-gray-700 text-white"
              >
                {option}
              </button>
            ))
          ) : (
            <>
              {allowCustom ? (
                <button
                  type="button"
                  onClick={() => handleSelect(search)}
                  className="w-full px-4 py-2 text-left hover:bg-gray-700 text-white"
                >
                  Use "{search}"
                </button>
              ) : (
                <div className="px-4 py-2 text-gray-400">No brands found</div>
              )}
            </>
          )}
        </div>
      )}
    </div>
  );
}
3. Implement in Your Form
tsx// In your equipment submission form
import { SearchableSelect } from '@/components/ui/SearchableSelect';

const EQUIPMENT_BRANDS = [
  'Rogue Fitness',
  'Concept2',
  'Bowflex',
  'York Barbell',
  'PowerBlock',
  'Rep Fitness',
  'Titan Fitness',
  'CAP Barbell',
  'Eleiko',
  'Life Fitness',
  'Hammer Strength',
  'Cybex',
  'Precor',
  'Body-Solid',
  'Nautilus',
  'StairMaster',
  'TRX',
  'Assault Fitness',
  'Sorinex',
  'EliteFTS'
];

// Use the component
<SearchableSelect
  options={EQUIPMENT_BRANDS}
  placeholder="e.g. Rogue, Eleiko, etc."
  onSelect={(brand) => {
    // Handle brand selection
    setFormData({ ...formData, brand });
  }}
  allowCustom={true}
/>
4. Alternative: Use an Existing Library
If you prefer using a pre-built solution, install react-select:
bashnpm install react-select
Then implement:
tsximport Select from 'react-select';
import CreatableSelect from 'react-select/creatable';

const brandOptions = EQUIPMENT_BRANDS.map(brand => ({
  value: brand,
  label: brand
}));

<CreatableSelect
  options={brandOptions}
  placeholder="Select or type a brand..."
  className="react-select-container"
  classNamePrefix="react-select"
  theme={(theme) => ({
    ...theme,
    colors: {
      ...theme.colors,
      primary: '#3b82f6',
      primary25: '#1f2937',
      neutral0: '#111827',
      neutral80: '#ffffff',
    },
  })}
/>
5. Update Your Database/API
Make sure your backend can handle both predefined and custom brand names:
ts// In your submission handler
const brand = formData.brand || formData.customBrand;
This implementation will:

Show a dropdown with all your existing brands
Allow users to search/filter brands as they type
Let users enter a custom brand if theirs isn't listed
Maintain the dark theme styling
Provide a smooth UX with proper keyboard navigation