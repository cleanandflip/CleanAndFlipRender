Here‚Äôs a clean ‚Äúfix ticket‚Äù you can paste to your Replit and follow step-by-step. It addresses exactly what your logs show right now:

mixed env (APP_ENV=production while NODE_ENV=development)

connecting to prod DB from a dev boot

sign-out/session weirdness behind a proxy

Vite import error (@/components/ui/Select vs select)

occasional AuthPage crash (isPending on undefined)

‚úÖ Immediate fixes Replit must apply
1) Stop the ENV split brain (root cause of cookies not sticking & wrong DB)

package.json ‚Äì scripts

{
  "scripts": {
-   "dev": "NODE_ENV=development tsx server/index.ts",
+   "dev": "APP_ENV=development NODE_ENV=development tsx server/index.ts",

-   "start": "node dist/server/index.js"
+   "start": "APP_ENV=production NODE_ENV=production node dist/server/index.js"
  }
}


server/config/app-env.ts (new)

export const APP_ENV = (process.env.APP_ENV ?? process.env.NODE_ENV ?? "development").toLowerCase();
export const IS_PROD = APP_ENV === "production";
export const IS_DEV = !IS_PROD;


server/config/database.ts (unify URLs)

import { IS_PROD } from "./app-env";

export function getDatabaseUrl() {
  const url = IS_PROD ? process.env.PROD_DATABASE_URL : process.env.DEV_DATABASE_URL;
  if (!url) throw new Error(`Missing ${IS_PROD ? "PROD" : "DEV"}_DATABASE_URL`);
  return url;
}


server/db/index.ts (or wherever you create Pool)

import { Pool } from "pg";
import { getDatabaseUrl } from "../config/database";

export const pool = new Pool({
  connectionString: getDatabaseUrl(),
  ssl: process.env.DB_SSL === "true" ? { rejectUnauthorized: false } : undefined
});


After this, your boot logs should read:
[ENV] app=development node=development dbHost=<dev-host> when running pnpm dev.

2) Sessions & cookies behind Replit‚Äôs proxy

server/index.ts

import express from "express";
+import { IS_PROD } from "./config/app-env";

const app = express();

+// Required so secure cookies work behind Replit's proxy / HTTPS terminator
+app.set("trust proxy", 1);


server/middleware/session-config.ts

import session from "express-session";
import connectPg from "connect-pg-simple";
import { IS_PROD } from "../config/app-env";
import { pool } from "../db";

const PgSession = connectPg(session);

export const sessionMiddleware = session({
  name: "cf.sid",
  secret: process.env.SESSION_SECRET!,
  resave: false,
  saveUninitialized: false,
  store: new PgSession({ pool, tableName: "sessions", createTableIfMissing: true }),
  cookie: {
    path: "/",
    httpOnly: true,
    sameSite: "lax",
-   secure: true
+   secure: IS_PROD
  }
});


Logout route (make clearing bulletproof)

router.post("/api/logout", (req, res) => {
  const opts = { path: "/", httpOnly: true, sameSite: "lax", secure: IS_PROD } as const;
  req.session?.destroy(() => {
    res.clearCookie("cf.sid", opts);
    // dev convenience:
    if (!IS_PROD) res.set("Clear-Site-Data", '"cookies"');
    res.status(200).json({ ok: true });
  });
});

3) Use the correct database per branch

Your log shows:

[ENV] app=production node=development dbHost=ep-muddy-moon...
[INFO]   Environment     production
[STARTUP] Environment: development


That means the code was reading PROD for DB while booting dev. After #1 and #2 you‚Äôll read from DEV_DATABASE_URL in dev and PROD_DATABASE_URL in prod‚Äîno more surprises.

4) Fix the Vite import error in Admin DB tab

Error:

Failed to resolve import "@/components/ui/Select" ...


Your filesystem has components/ui/select.tsx (lowercase). Linux is case sensitive.

client/src/pages/admin/EnhancedDatabaseTab.tsx

- import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/Select";
+ import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";


(If the actual filename is select.tsx with a default export, also ensure it re-exports these components or switch to your project‚Äôs shadcn naming.)

5) Guard AuthPage against undefined mutation object

Error:

TypeError: Cannot read properties of undefined (reading 'isPending')
    at AuthPage ... src/pages/auth.tsx:277


Make sure you get the mutation object from useMutation() and don‚Äôt use it before init:

client/src/pages/auth.tsx

- const { isPending, mutate } = loginMutation; // ‚ùå can be undefined before init
+ const loginMutation = useMutation({...});
+ const { isPending, mutate } = loginMutation; // ‚úÖ always defined after the hook runs

+ // And guard in JSX:
+ <Button disabled={!!loginMutation?.isPending}>
+   {loginMutation?.isPending ? "Signing in..." : "Sign in"}
+ </Button>

6) Verify the fix (quick checks)

Run pnpm dev and watch the first 5 log lines:

Should show Environment production only when you run pnpm start.

In dev: app=development node=development dbHost=<your DEV host>

Hit /api/user ‚Üí 200 JSON.

Logout ‚Üí response headers contain one Set-Cookie: cf.sid=; Path=/; ... line, no duplicates with different attributes.

üßπ Purge old/unused code & scripts (so they stop fighting your new flow)

Run these searches and delete/merge as indicated:

Multiple session configs

ripgrep -n "express-session"
ripgrep -n "connect-pg-simple"


Keep only server/middleware/session-config.ts. Delete legacy ones.

Stray DATABASE_URL usage

ripgrep -n "DATABASE_URL"


Replace direct uses with getDatabaseUrl() so branch routing can‚Äôt be bypassed.

Old auth routes / hooks

ripgrep -n "api/user"
ripgrep -n "logout"
ripgrep -n "use-auth"


Keep the unified endpoints/hook. Remove legacy routes and the old hook to avoid double fetching and race conditions.

Duplicate UI import names

ripgrep -n "@/components/ui/Select"


Normalize to the actual casing (select).

üîí Optional (recommended) hardening

Add a boot-time assertion:

if (IS_PROD && process.env.NODE_ENV !== "production") {
  console.warn("[ENV] WARNING: APP_ENV=production while NODE_ENV!=production");
}


Log which DB URL is actually used (mask credentials):

const host = new URL(getDatabaseUrl()).host;
console.info(`[DB] Connected to ${IS_PROD ? "PROD" : "DEV"} @ ${host}`);


Add a tiny /api/health that returns { env, db: "ok", session: "ok" } so you can verify all three layers in one call.

Done checklist (what Replit should confirm)

 Booting dev uses DEV_DATABASE_URL; prod uses PROD_DATABASE_URL.

 Only one session store & one cookie name (cf.sid) across the app.

 trust proxy set to 1 (secure cookies behave).

 Admin DB tab builds (no Select import error).

 AuthPage no longer crashes; logout always clears the cookie.

If any of these still fails, paste the first 30 lines of the server boot log and the response headers from POST /api/logout and I‚Äôll pinpoint the next fix.