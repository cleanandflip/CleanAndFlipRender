{
  "scanDate": "2025-08-15T15:41:48.325Z",
  "totalOffenders": 61,
  "offendersByType": {
    "direct-fulfillment-check": 20,
    "legacy-cart-api": 29,
    "banned-function": 12
  },
  "offenders": [
    {
      "file": "client/src/components/AddToCartButton.tsx",
      "line": 54,
      "codeContext": "const isLocalOnly = fulfillmentMode === 'LOCAL_ONLY';",
      "offenderType": "direct-fulfillment-check",
      "fixSuggestion": "Use computeEffectiveAvailability(productMode, userMode) instead"
    },
    {
      "file": "client/src/components/admin/modals/EnhancedProductModal.tsx",
      "line": 619,
      "codeContext": "onClick={() => changeMode(FULFILLMENT.LOCAL_ONLY)}",
      "offenderType": "direct-fulfillment-check",
      "fixSuggestion": "Use computeEffectiveAvailability(productMode, userMode) instead"
    },
    {
      "file": "client/src/components/admin/modals/EnhancedProductModal.tsx",
      "line": 621,
      "codeContext": "mode === FULFILLMENT.LOCAL_ONLY",
      "offenderType": "direct-fulfillment-check",
      "fixSuggestion": "Use computeEffectiveAvailability(productMode, userMode) instead"
    },
    {
      "file": "client/src/components/admin/modals/EnhancedProductModal.tsx",
      "line": 632,
      "codeContext": "mode === FULFILLMENT.LOCAL_ONLY",
      "offenderType": "direct-fulfillment-check",
      "fixSuggestion": "Use computeEffectiveAvailability(productMode, userMode) instead"
    },
    {
      "file": "client/src/components/fulfillment/AddToCartEnhanced.tsx",
      "line": 33,
      "codeContext": "const isBlocked = mode === 'LOCAL_ONLY' && !isLocal;",
      "offenderType": "direct-fulfillment-check",
      "fixSuggestion": "Use computeEffectiveAvailability(productMode, userMode) instead"
    },
    {
      "file": "client/src/components/fulfillment/FulfillmentBadge.tsx",
      "line": 93,
      "codeContext": "if (mode === \"LOCAL_ONLY\") {",
      "offenderType": "direct-fulfillment-check",
      "fixSuggestion": "Use computeEffectiveAvailability(productMode, userMode) instead"
    },
    {
      "file": "client/src/components/locality/ProductAvailabilityChips.tsx",
      "line": 24,
      "codeContext": "if (!mode || (mode !== 'LOCAL_ONLY' && mode !== 'LOCAL_AND_SHIPPING')) {",
      "offenderType": "direct-fulfillment-check",
      "fixSuggestion": "Use computeEffectiveAvailability(productMode, userMode) instead"
    },
    {
      "file": "client/src/hooks/use-cart.tsx",
      "line": 38,
      "codeContext": "const response = await fetch('/api/cart', {",
      "offenderType": "legacy-cart-api",
      "fixSuggestion": "Use /api/cart.v2 endpoints only"
    },
    {
      "file": "client/src/hooks/use-cart.tsx",
      "line": 69,
      "codeContext": "const response = await fetch('/api/cart/items', {",
      "offenderType": "legacy-cart-api",
      "fixSuggestion": "Use /api/cart.v2 endpoints only"
    },
    {
      "file": "client/src/hooks/use-cart.tsx",
      "line": 161,
      "codeContext": "const response = await fetch(`/api/cart/items/${productId}`, {",
      "offenderType": "legacy-cart-api",
      "fixSuggestion": "Use /api/cart.v2 endpoints only"
    },
    {
      "file": "client/src/hooks/use-cart.tsx",
      "line": 232,
      "codeContext": "const response = await fetch(`/api/cart/items/${productId}`, {",
      "offenderType": "legacy-cart-api",
      "fixSuggestion": "Use /api/cart.v2 endpoints only"
    },
    {
      "file": "client/src/hooks/use-cart.tsx",
      "line": 301,
      "codeContext": "return await apiRequest('DELETE', '/api/cart');",
      "offenderType": "legacy-cart-api",
      "fixSuggestion": "Use /api/cart.v2 endpoints only"
    },
    {
      "file": "client/src/hooks/useCart.ts",
      "line": 18,
      "codeContext": "queryFn: () => apiJson(\"/api/cart\"),",
      "offenderType": "legacy-cart-api",
      "fixSuggestion": "Use /api/cart.v2 endpoints only"
    },
    {
      "file": "client/src/hooks/useCart.ts",
      "line": 25,
      "codeContext": "apiJson(\"/api/cart/items\", {",
      "offenderType": "legacy-cart-api",
      "fixSuggestion": "Use /api/cart.v2 endpoints only"
    },
    {
      "file": "client/src/hooks/useCart.ts",
      "line": 102,
      "codeContext": "apiJson(`/api/cart/items/${itemId}`, {",
      "offenderType": "legacy-cart-api",
      "fixSuggestion": "Use /api/cart.v2 endpoints only"
    },
    {
      "file": "client/src/hooks/useCart.ts",
      "line": 141,
      "codeContext": "apiJson(`/api/cart/product/${productId}`, { method: \"DELETE\" }),",
      "offenderType": "legacy-cart-api",
      "fixSuggestion": "Use /api/cart.v2 endpoints only"
    },
    {
      "file": "client/src/hooks/useProducts.ts",
      "line": 84,
      "codeContext": "const mode = (product as any).fulfillment_mode || ((product as any).isLocalDeliveryAvailable && !(product as any).isShippingAvailable ? 'LOCAL_ONLY' : 'LOCAL_AND_SHIPPING');",
      "offenderType": "direct-fulfillment-check",
      "fixSuggestion": "Use computeEffectiveAvailability(productMode, userMode) instead"
    },
    {
      "file": "client/src/hooks/useProducts.ts",
      "line": 87,
      "codeContext": "return mode === 'LOCAL_ONLY';",
      "offenderType": "direct-fulfillment-check",
      "fixSuggestion": "Use computeEffectiveAvailability(productMode, userMode) instead"
    },
    {
      "file": "client/src/hooks/useProducts.ts",
      "line": 89,
      "codeContext": "return mode === 'LOCAL_AND_SHIPPING';",
      "offenderType": "direct-fulfillment-check",
      "fixSuggestion": "Use computeEffectiveAvailability(productMode, userMode) instead"
    },
    {
      "file": "client/src/hooks/useProducts.ts",
      "line": 91,
      "codeContext": "return mode === 'LOCAL_ONLY' || mode === 'LOCAL_AND_SHIPPING';",
      "offenderType": "direct-fulfillment-check",
      "fixSuggestion": "Use computeEffectiveAvailability(productMode, userMode) instead"
    },
    {
      "file": "client/src/hooks/useProducts.ts",
      "line": 93,
      "codeContext": "return mode === 'LOCAL_AND_SHIPPING';",
      "offenderType": "direct-fulfillment-check",
      "fixSuggestion": "Use computeEffectiveAvailability(productMode, userMode) instead"
    },
    {
      "file": "client/src/pages/checkout.tsx",
      "line": 41,
      "codeContext": "const response = await fetch('/api/cart', { credentials: 'include' });",
      "offenderType": "legacy-cart-api",
      "fixSuggestion": "Use /api/cart.v2 endpoints only"
    },
    {
      "file": "server/lib/distance.ts",
      "line": 17,
      "codeContext": "export function isLocalMiles(lat: number | null, lng: number | null): boolean {",
      "offenderType": "banned-function",
      "fixSuggestion": "Use computeEffectiveAvailability(productMode, userMode)"
    },
    {
      "file": "server/lib/distance.ts",
      "line": 23,
      "codeContext": "return isLocalMiles(address.lat, address.lng);",
      "offenderType": "banned-function",
      "fixSuggestion": "Use computeEffectiveAvailability(productMode, userMode)"
    },
    {
      "file": "server/lib/geo.ts",
      "line": 12,
      "codeContext": "export function isLocal({ lat, lng }: Coordinates): boolean {",
      "offenderType": "banned-function",
      "fixSuggestion": "Use computeEffectiveAvailability(productMode, userMode)"
    },
    {
      "file": "server/lib/locality.ts",
      "line": 10,
      "codeContext": "export function isLocalMiles(lat?: number | null, lng?: number | null): LocalityResult {",
      "offenderType": "banned-function",
      "fixSuggestion": "Use computeEffectiveAvailability(productMode, userMode)"
    },
    {
      "file": "server/lib/locality.ts",
      "line": 24,
      "codeContext": "return isLocalMiles(addr.latitude ?? null, addr.longitude ?? null);",
      "offenderType": "banned-function",
      "fixSuggestion": "Use computeEffectiveAvailability(productMode, userMode)"
    },
    {
      "file": "server/middleware/cartLocalityEnforcement.ts",
      "line": 39,
      "codeContext": "if (mode === 'LOCAL_ONLY' && !status.eligible) {",
      "offenderType": "direct-fulfillment-check",
      "fixSuggestion": "Use computeEffectiveAvailability(productMode, userMode) instead"
    },
    {
      "file": "server/middleware/monitoring.ts",
      "line": 91,
      "codeContext": "if (url.includes('/api/cart') || url.includes('/api/user') || url.includes('/api/admin/stats')) {",
      "offenderType": "legacy-cart-api",
      "fixSuggestion": "Use /api/cart.v2 endpoints only"
    },
    {
      "file": "server/middleware/request-consolidator.ts",
      "line": 75,
      "codeContext": "else if (requestKey.includes('/api/user') || requestKey.includes('/api/cart')) {",
      "offenderType": "legacy-cart-api",
      "fixSuggestion": "Use /api/cart.v2 endpoints only"
    },
    {
      "file": "server/routes/addresses.ts",
      "line": 56,
      "codeContext": "const localityResult = isLocalMiles(data.latitude || null, data.longitude || null);",
      "offenderType": "banned-function",
      "fixSuggestion": "Use computeEffectiveAvailability(productMode, userMode)"
    },
    {
      "file": "server/routes/addresses.ts",
      "line": 103,
      "codeContext": "const localityResult = isLocalMiles(data.latitude || null, data.longitude || null);",
      "offenderType": "banned-function",
      "fixSuggestion": "Use computeEffectiveAvailability(productMode, userMode)"
    },
    {
      "file": "server/routes/cart-validation.ts",
      "line": 9,
      "codeContext": "// POST /api/cart/validate - Validate entire cart against current locality",
      "offenderType": "legacy-cart-api",
      "fixSuggestion": "Use /api/cart.v2 endpoints only"
    },
    {
      "file": "server/routes/cart-validation.ts",
      "line": 18,
      "codeContext": "isLocalMiles(defaultAddress.latitude, defaultAddress.longitude) :",
      "offenderType": "banned-function",
      "fixSuggestion": "Use computeEffectiveAvailability(productMode, userMode)"
    },
    {
      "file": "server/routes/cart.ts",
      "line": 40,
      "codeContext": "console.error('GET /api/cart error:', error);",
      "offenderType": "legacy-cart-api",
      "fixSuggestion": "Use /api/cart.v2 endpoints only"
    },
    {
      "file": "server/routes/cart.ts",
      "line": 58,
      "codeContext": "? isLocalMiles(Number(defaultAddress.latitude), Number(defaultAddress.longitude))",
      "offenderType": "banned-function",
      "fixSuggestion": "Use computeEffectiveAvailability(productMode, userMode)"
    },
    {
      "file": "server/routes/cart.ts",
      "line": 68,
      "codeContext": "if (fulfillment_mode === 'LOCAL_ONLY' && !isLocal) {",
      "offenderType": "direct-fulfillment-check",
      "fixSuggestion": "Use computeEffectiveAvailability(productMode, userMode) instead"
    },
    {
      "file": "server/routes/cart.ts",
      "line": 85,
      "codeContext": "console.error('POST /api/cart error:', error);",
      "offenderType": "legacy-cart-api",
      "fixSuggestion": "Use /api/cart.v2 endpoints only"
    },
    {
      "file": "server/routes/cart.ts",
      "line": 109,
      "codeContext": "console.error('PATCH /api/cart/:itemId error:', error);",
      "offenderType": "legacy-cart-api",
      "fixSuggestion": "Use /api/cart.v2 endpoints only"
    },
    {
      "file": "server/routes/cart.ts",
      "line": 130,
      "codeContext": "console.error('DELETE /api/cart/:itemId error:', error);",
      "offenderType": "legacy-cart-api",
      "fixSuggestion": "Use /api/cart.v2 endpoints only"
    },
    {
      "file": "server/routes/cart.ts",
      "line": 166,
      "codeContext": "console.error('POST /api/cart/validate error:', error);",
      "offenderType": "legacy-cart-api",
      "fixSuggestion": "Use /api/cart.v2 endpoints only"
    },
    {
      "file": "server/routes/checkout.ts",
      "line": 60,
      "codeContext": "isLocalMiles(defaultAddress.latitude, defaultAddress.longitude) :",
      "offenderType": "banned-function",
      "fixSuggestion": "Use computeEffectiveAvailability(productMode, userMode)"
    },
    {
      "file": "server/routes.ts",
      "line": 241,
      "codeContext": "app.use('/api/cart', ensureSession, cartRouterV2);",
      "offenderType": "legacy-cart-api",
      "fixSuggestion": "Use /api/cart.v2 endpoints only"
    },
    {
      "file": "server/routes.ts",
      "line": 245,
      "codeContext": "app.use('/api/cart-legacy', (req, res, next) => {",
      "offenderType": "legacy-cart-api",
      "fixSuggestion": "Use /api/cart.v2 endpoints only"
    },
    {
      "file": "server/routes.ts",
      "line": 271,
      "codeContext": "app.use('/api/cart', cartValidationRoutes.default);",
      "offenderType": "legacy-cart-api",
      "fixSuggestion": "Use /api/cart.v2 endpoints only"
    },
    {
      "file": "server/routes.ts",
      "line": 850,
      "codeContext": "app.get(\"/api/cart\", authMiddleware.optionalAuth, async (req, res) => {",
      "offenderType": "legacy-cart-api",
      "fixSuggestion": "Use /api/cart.v2 endpoints only"
    },
    {
      "file": "server/routes.ts",
      "line": 897,
      "codeContext": "app.post(\"/api/cart/items\", authMiddleware.optionalAuth, async (req, res) => {",
      "offenderType": "legacy-cart-api",
      "fixSuggestion": "Use /api/cart.v2 endpoints only"
    },
    {
      "file": "server/routes.ts",
      "line": 899,
      "codeContext": "Logger.info(`[CART DEBUG] POST /api/cart/items reached handler - body: ${JSON.stringify(req.body)}, productId: ${req.body?.productId}, quantity: ${req.body?.quantity}`);",
      "offenderType": "legacy-cart-api",
      "fixSuggestion": "Use /api/cart.v2 endpoints only"
    },
    {
      "file": "server/routes.ts",
      "line": 1022,
      "codeContext": "app.patch(\"/api/cart/items/:productId\", requireAuth, async (req, res) => {",
      "offenderType": "legacy-cart-api",
      "fixSuggestion": "Use /api/cart.v2 endpoints only"
    },
    {
      "file": "server/routes.ts",
      "line": 1054,
      "codeContext": "app.delete(\"/api/cart/items/:productId\", requireAuth, async (req, res) => {",
      "offenderType": "legacy-cart-api",
      "fixSuggestion": "Use /api/cart.v2 endpoints only"
    },
    {
      "file": "server/routes.ts",
      "line": 1112,
      "codeContext": "app.post(\"/api/cart/validate\", requireAuth, async (req, res) => {",
      "offenderType": "legacy-cart-api",
      "fixSuggestion": "Use /api/cart.v2 endpoints only"
    },
    {
      "file": "server/routes.ts",
      "line": 1163,
      "codeContext": "app.put(\"/api/cart/shipping-address\", requireAuth, async (req, res) => {",
      "offenderType": "legacy-cart-api",
      "fixSuggestion": "Use /api/cart.v2 endpoints only"
    },
    {
      "file": "server/routes.ts",
      "line": 1192,
      "codeContext": "app.post(\"/api/cart/shipping-address\", requireAuth, async (req, res) => {",
      "offenderType": "legacy-cart-api",
      "fixSuggestion": "Use /api/cart.v2 endpoints only"
    },
    {
      "file": "server/routes.ts",
      "line": 2842,
      "codeContext": "let fulfillmentMode = \"LOCAL_AND_SHIPPING\";",
      "offenderType": "direct-fulfillment-check",
      "fixSuggestion": "Use computeEffectiveAvailability(productMode, userMode) instead"
    },
    {
      "file": "server/routes.ts",
      "line": 2843,
      "codeContext": "if (isLocal && !isShip) fulfillmentMode = \"LOCAL_ONLY\";",
      "offenderType": "direct-fulfillment-check",
      "fixSuggestion": "Use computeEffectiveAvailability(productMode, userMode) instead"
    },
    {
      "file": "server/services/cartCleanup.ts",
      "line": 18,
      "codeContext": "return mode === 'LOCAL_ONLY';",
      "offenderType": "direct-fulfillment-check",
      "fixSuggestion": "Use computeEffectiveAvailability(productMode, userMode) instead"
    },
    {
      "file": "server/services/cartCleanup.ts",
      "line": 21,
      "codeContext": "console.log(`[CART CLEANUP] Found ${localOnlyItems.length} LOCAL_ONLY items for user=${userId}`);",
      "offenderType": "direct-fulfillment-check",
      "fixSuggestion": "Use computeEffectiveAvailability(productMode, userMode) instead"
    },
    {
      "file": "server/services/localService.ts",
      "line": 21,
      "codeContext": "export async function isLocal(address: Address): Promise<boolean> {",
      "offenderType": "banned-function",
      "fixSuggestion": "Use computeEffectiveAvailability(productMode, userMode)"
    },
    {
      "file": "server/utils/fulfillment.ts",
      "line": 7,
      "codeContext": "export function isLocalMiles(lat: number, lng: number, center = HQ, radius = RADIUS) {",
      "offenderType": "banned-function",
      "fixSuggestion": "Use computeEffectiveAvailability(productMode, userMode)"
    },
    {
      "file": "server/utils/fulfillment.ts",
      "line": 27,
      "codeContext": "err.code = \"LOCAL_ONLY\";",
      "offenderType": "direct-fulfillment-check",
      "fixSuggestion": "Use computeEffectiveAvailability(productMode, userMode) instead"
    },
    {
      "file": "shared/schema.ts",
      "line": 109,
      "codeContext": "\"LOCAL_ONLY\",",
      "offenderType": "direct-fulfillment-check",
      "fixSuggestion": "Use computeEffectiveAvailability(productMode, userMode) instead"
    }
  ]
}