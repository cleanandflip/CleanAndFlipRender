server/middleware/transaction.ts-6-// Database transaction wrapper for race condition prevention
server/middleware/transaction.ts-7-export async function withTransaction<T>(
server/middleware/transaction.ts:8:  operation: (tx: typeof db) => Promise<T>
server/middleware/transaction.ts:9:): Promise<T> {
server/middleware/transaction.ts-10-  return await db.transaction(async (tx) => {
--
server/middleware/transaction.ts-18-  quantityToReduce: number,
server/middleware/transaction.ts-19-  tx: any = db
server/middleware/transaction.ts:20:): Promise<{ success: boolean; availableStock?: number; error?: string }> {
server/middleware/transaction.ts-21-  try {
--
server/middleware/transaction.ts-64-  quantity: number,
server/middleware/transaction.ts-65-  operation: 'add' | 'update' | 'remove'
server/middleware/transaction.ts:66:): Promise<{ success: boolean; error?: string; cartItem?: any }> {
server/middleware/transaction.ts-67-  return await withTransaction(async (tx) => {
